{
    "version": "https://jsonfeed.org/version/1",
    "title": "⭐️齐下无贰⭐️ • All posts by \"leetcode\" category",
    "description": "May all the beauty be bless.✨",
    "home_page_url": "https://blog.weidows.tech",
    "items": [
        {
            "id": "https://blog.weidows.tech/post/experience/LeetCode/1/",
            "url": "https://blog.weidows.tech/post/experience/LeetCode/1/",
            "title": "😵‍💫跟力扣斗智斗勇-log-1",
            "date_published": "2022-03-09T05:20:05.000Z",
            "content_html": "<h1>跟力扣斗智斗勇-log-1</h1>\n<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2023-04-20 18:25:09\n * @FilePath: \\Blog-private\\source\\_posts\\experience\\LeetCode\\1.md\n * @Description:\n * @!: *********************************************************************\n-->\n<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li><a href=\"#%E8%B7%9F%E5%8A%9B%E6%89%A3%E6%96%97%E6%99%BA%E6%96%97%E5%8B%87-log-1\">跟力扣斗智斗勇-log-1</a>\n<ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95\">数据结构与算法</a>\n<ul>\n<li><a href=\"#%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC%E9%97%AE%E9%A2%98\">链表反转问题</a></li>\n<li><a href=\"#%E7%B4%A0%E6%95%B0\">素数</a></li>\n<li><a href=\"#%E5%8C%BA%E5%88%86%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86\">区分二叉树遍历</a>\n<ul>\n<li><a href=\"#%E6%B7%B1%E5%BA%A6-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86\">深度-广度优先遍历</a></li>\n<li><a href=\"#%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86\">前中后序遍历</a></li>\n</ul>\n</li>\n<li><a href=\"#arraylist-linkedlist\">ArrayList-LinkedList</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%A2%98%E8%A7%A3\">题解</a>\n<ul>\n<li><a href=\"#160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8\">160. 相交链表</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E4%B8%AD%E8%90%BD%E5%8D%95%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0\">数组中落单的两个数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%96%B9%E6%B3%95\">方法</a>\n<ul>\n<li><a href=\"#%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95\">投票算法</a></li>\n<li><a href=\"#%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88\">快慢指针</a></li>\n<li><a href=\"#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">动态规划</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%9D%91\">坑</a>\n<ul>\n<li><a href=\"#python-%E5%8F%96%E6%95%B4%E4%B8%8E%E6%95%B4%E9%99%A4\">python-取整与整除</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%80%9F%E7%89%A9%E8%A1%A8\">借物表</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<!-- [⏩ 文章地址](https://weidows.github.io/post/experience/LeetCode/1/) | [✔️ 仓库地址](https://github.com/Weidows-projects/public-post/) 欢迎提交 pr ! -->\n<p>一题二写，三数之和，题解四瞅五瞄六瞧，水平还七上八下九流，十分辣鸡<br>\n十天九考，八皇会面，题干七页六道五问，答案仅四行三言两语，一点不会</p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"数据结构与算法\">数据结构与算法</h2>\n<p>课程: 速览 ing</p>\n<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class=\"bbplayer\"><iframe class=\"bbplayer\" id=\"mmedia-WCPPtQWjALRMQRnp\" src=\"https://player.bilibili.com/player.html?bvid=BV1a54y1b74k&page=1&high_quality=1&danmaku=true&autoplay=0\" allowfullscreen=\"allowfullscreen\" scrolling=\"no\" border=\"0\" frameborder=\"0\" framespacing=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups\"></iframe></div><script> document.getElementById(\"mmedia-WCPPtQWjALRMQRnp\").style.height=document.getElementById(\"mmedia-WCPPtQWjALRMQRnp\").scrollWidth*0.76+\"px\";\n    window.onresize = function(){\n      document.getElementById(\"mmedia-WCPPtQWjALRMQRnp\").style.height=document.getElementById(\"mmedia-WCPPtQWjALRMQRnp\").scrollWidth*0.76+\"px\";\n    }; </script>\n<h3 id=\"链表反转问题\">链表反转问题</h3>\n<p><code>迭代(栈)</code> / <code>递归</code></p>\n<p>这问题我面试时问我了,我回答的就是栈,面试官说栈要遍历两次,而递归一次就能出(函数参数添加 prev 节点)</p>\n<hr>\n<h3 id=\"素数\">素数</h3>\n<p>非素数(合数) / 素数(质数) : 都要排除 0 和 1</p>\n<ul>\n<li>\n<p>暴力法: 遍历 2 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.2397em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span></span></span></span> 之前的数字,如果能被整除,那么这个数字不是素数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i * i &lt; x; i++)&#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>埃塞法: 比如找 100 内有多少个素数 (25 个)</p>\n<p>构造 bool[100]</p>\n<p>找到 3 是素数, 那么 3x3=3, 3x4=12, 3x5=15…3x33=99 都不是素数,对应 bool[i]做标记,遍历时跳过</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"区分二叉树遍历\">区分二叉树遍历</h3>\n<h4 id=\"深度-广度优先遍历\">深度-广度优先遍历</h4>\n<ul>\n<li>\n<p>深度优先遍历: <code>递归</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>广度优先遍历: <code>队列</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"前中后序遍历\">前中后序遍历</h4>\n<p>前序也叫先序, 这三种都属于深度优先遍历</p>\n<ul>\n<li>\n<p>基本上是递归模板,比如中序遍历 BST 如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>详见这个题解: <a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/173.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8.java\">https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/173.二叉搜索树迭代器.java</a></p>\n</li>\n<li>\n<p>前后序遍历: <sup id='cite_ref-3'><a href=\"#cite_note-3\">[3]</a></sup></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h3 id=\"ArrayList-LinkedList\">ArrayList-LinkedList</h3>\n<p>顺序遍历时间复杂度相同, n 相同时 LinkedList 空间更大</p>\n<ul>\n<li>\n<p>ArrayList:</p>\n<p>随机查询快, 插入和删除慢(不可随机)</p>\n<blockquote>\n<p>随机指的是对任意指定 index 的操作</p>\n</blockquote>\n<hr>\n</li>\n<li>\n<p>LinkedList:</p>\n<p>随机查询慢, 插入和删除快(可随机)</p>\n<p>linkedlist 排序性能更好,并且较 arraylist 更节省空间 <sup id='cite_ref-4'><a href=\"#cite_note-4\">[4]</a></sup></p>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"题解\">题解</h2>\n<h3 id=\"160-相交链表\">160. 相交链表</h3>\n<blockquote>\n<p><a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8.py\">https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/160.相交链表.py</a></p>\n</blockquote>\n<ul>\n<li>\n<p>此方法简单描述就是交叉接尾 <sup id='cite_ref-1'><a href=\"#cite_note-1\">[1]</a></sup></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">getIntersectionNode</span>(<span class=\"params\">self, headA, headB</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type head1, head1: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        p, q = headA, headB</span><br><span class=\"line\">        <span class=\"keyword\">while</span> p != q:</span><br><span class=\"line\">            p = p.<span class=\"built_in\">next</span> <span class=\"keyword\">if</span> p <span class=\"keyword\">else</span> headB</span><br><span class=\"line\">            q = q.<span class=\"built_in\">next</span> <span class=\"keyword\">if</span> q <span class=\"keyword\">else</span> headA</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br></pre></td></tr></table></figure>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/RCFKPP.png\" alt=\"\"></p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/RCFg7n.png\" alt=\"\"></p>\n<p>当前链表结尾后接上对方链表的头, 同时以两链表头为起点, 可以发现都走了 7 步后在交叉绿点相遇</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"数组中落单的两个数\">数组中落单的两个数</h3>\n<blockquote>\n<p>题目：一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。<sup id='cite_ref-6'><a href=\"#cite_note-6\">[6]</a></sup></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/%E6%95%B0%E7%BB%84%E4%B8%AD%E8%90%BD%E5%8D%95%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0.py\">https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/数组中落单的两个数.py</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">findTwoSingleNum</span>(<span class=\"params\">array</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 两个独立数的异或</span></span><br><span class=\"line\">    buff = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> array:</span><br><span class=\"line\">        buff ^= i</span><br><span class=\"line\"></span><br><span class=\"line\">    bias = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 从末尾轮着找为&#x27;1&#x27;的位 (也就是两独立数不同的位)</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (buff &amp; <span class=\"number\">1</span> != <span class=\"number\">1</span>):</span><br><span class=\"line\">        buff &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">        bias += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    res_0, res_1 = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过第bias位的0和1分为两个child-array, 分别all-XOR后就是两个结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> array:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;&gt; bias &amp; <span class=\"number\">1</span> == <span class=\"number\">1</span>): res_1 ^= i</span><br><span class=\"line\">        <span class=\"keyword\">else</span>: res_0 ^= i</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [res_0, res_1]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4:    100</span></span><br><span class=\"line\"><span class=\"comment\"># 5:    101</span></span><br><span class=\"line\"><span class=\"comment\"># 4^5:  001</span></span><br><span class=\"line\"><span class=\"comment\"># xxx1&amp;1: 1</span></span><br><span class=\"line\">arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(findTwoSingleNum(arr))</span><br></pre></td></tr></table></figure>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"方法\">方法</h2>\n<h3 id=\"投票算法\">投票算法</h3>\n<p>可以看一下多数元素的题解 <sup id='cite_ref-2'><a href=\"#cite_note-2\">[2]</a></sup></p>\n<p>对于出现次数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>大于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>的元素,能抵消其他元素还有余量,最后 candidate 必然是众数</p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h3 id=\"快慢指针\">快慢指针</h3>\n<p>常用于链表</p>\n<ol>\n<li>\n<p><a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.go\">判断是否存在 <code>环</code>, 相遇即成环</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hasCycle</span><span class=\"params\">(head *ListNode)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">  slow, fast := head, head</span><br><span class=\"line\">  <span class=\"keyword\">for</span> fast != <span class=\"literal\">nil</span> &amp;&amp; fast.Next != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    slow = slow.Next</span><br><span class=\"line\">    fast = fast.Next.Next</span><br><span class=\"line\">    <span class=\"keyword\">if</span> slow == fast &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.java\">寻找链表中点</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ListNode</span> <span class=\"variable\">slow</span> <span class=\"operator\">=</span> head, fast = head;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (fast != tail) &#123;</span><br><span class=\"line\">  slow = slow.next;</span><br><span class=\"line\">  fast = fast.next;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fast != tail) &#123;</span><br><span class=\"line\">    fast = fast.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">ListNode</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> slow;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h3 id=\"动态规划\">动态规划</h3>\n<p>有的问题会需要<code>前瞻后顾 找最优 &quot;重叠&quot; 子结构</code>, 像是递归/迭代/贪心无法解决或者十分棘手, 瞥一眼又是中等+难度的, 多是 dp (dymanic-programming) 没跑了; 这种问题有个大致框架: <sup id='cite_ref-5'><a href=\"#cite_note-5\">[5]</a></sup></p>\n<ol>\n<li>\n<p>状态矩阵 <code>dp[n][n]</code></p>\n<p>dp[i][j] 一般存储第 i 到 j 位通过条件转换后的状态位/数值</p>\n</li>\n<li>\n<p>条件转换方程</p>\n<p>条件: if-else</p>\n<p>转换方程: 类似 <code>dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])</code> 这种形式</p>\n</li>\n<li>\n<p>最终结果就是最后一趟 i,j 的位置: 如下的 <code>dp[0][ n - 1]</code></p>\n</li>\n</ol>\n<hr>\n<ul>\n<li>\n<p>i, j 的遍历方向是根据转换方程来确定的, 比如 <a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/516.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97.py\">516.最长回文子序列</a> 这个题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">longestPalindromeSubseq</span>(<span class=\"params\">self, s</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span>] * n <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n - <span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            dp[i][i] = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> s[i] == s[j]:</span><br><span class=\"line\">                    dp[i][j] = dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"number\">2</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dp[i][j] = <span class=\"built_in\">max</span>(dp[i + <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][n - <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<p>在确定 <code>dp[i][j]</code> 前, 需要已经确定 <code>dp[i+1][j]</code> 和 <code>dp[i][j-1]</code></p>\n<p>也就是说: 外层 i 为逆序,从上往下推, 内层 j 为正序从左往右推 (x 为所推的值)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">i \\ j</th>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">7</th>\n<th style=\"text-align:center\">8</th>\n<th style=\"text-align:center\">9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"坑\">坑</h2>\n<h3 id=\"python-取整与整除\">python-取整与整除</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 整除: 对于正数是int(), 对于负数是round()</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span>//<span class=\"number\">2</span>)          <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(-<span class=\"number\">3</span>//<span class=\"number\">2</span>)         <span class=\"comment\"># -2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">9</span>//<span class=\"number\">5</span>)          <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(-<span class=\"number\">9</span>//<span class=\"number\">5</span>)         <span class=\"comment\"># -2</span></span><br><span class=\"line\"><span class=\"comment\"># 向下取整</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">3</span> / <span class=\"number\">2</span>))    <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(-<span class=\"number\">3</span> / <span class=\"number\">2</span>))   <span class=\"comment\"># -1</span></span><br><span class=\"line\"><span class=\"comment\"># 四舍五入</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">3</span> / <span class=\"number\">2</span>))  <span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">3</span> / <span class=\"number\">2</span>)) <span class=\"comment\"># -2</span></span><br><span class=\"line\"><span class=\"comment\"># 还有其他区别</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">14</span> - <span class=\"number\">3</span> / <span class=\"number\">2</span>))  <span class=\"comment\"># 12 (14-1.5=12.5 -&gt; 12)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">14</span> - <span class=\"number\">3</span> // <span class=\"number\">2</span>)) <span class=\"comment\"># 13 (14-1=13)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(- <span class=\"number\">3</span> / <span class=\"number\">2</span>))     <span class=\"comment\"># -1 (-1.5 -&gt; -1)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(-<span class=\"number\">3</span> // <span class=\"number\">2</span>))     <span class=\"comment\"># -2</span></span><br></pre></td></tr></table></figure>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"借物表\">借物表</h2>\n<p><a name='cite_note-0' href='#cite_ref-0'>[0]</a>: <a href=\"https://github.com/Weidows-projects/public-post/\">✔️ 仓库地址</a></p>\n<p><a name='cite_note-1' href='#cite_ref-1'>[1]</a>: <a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiang-jiao-lian-biao-by-leetcode-solutio-a8jn/\">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiang-jiao-lian-biao-by-leetcode-solutio-a8jn/</a></p>\n<p><a name='cite_note-2' href='#cite_ref-2'>[2]</a>: <a href=\"https://leetcode-cn.com/problems/majority-element/solution/duo-shu-yuan-su-by-leetcode-solution/\">https://leetcode-cn.com/problems/majority-element/solution/duo-shu-yuan-su-by-leetcode-solution/</a></p>\n<p><a name='cite_note-3' href='#cite_ref-3'>[3]</a>: <a href=\"https://blog.csdn.net/u013834525/article/details/80421684\">https://blog.csdn.net/u013834525/article/details/80421684</a></p>\n<p><a name='cite_note-4' href='#cite_ref-4'>[4]</a>: <a href=\"http://www.manongjc.com/detail/16-qngebjtzewkyzmi.html\">jdk8 下 ArrayList 与 LinedList 排序效率对比</a></p>\n<p><a name='cite_note-5' href='#cite_ref-5'>[5]</a>: <a href=\"https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/zui-chang-hui-wen-zi-xu-lie-by-leetcode-hcjqp/\">https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/zui-chang-hui-wen-zi-xu-lie-by-leetcode-hcjqp/</a></p>\n<p><a name='cite_note-6' href='#cite_ref-6'>[6]</a>: <a href=\"https://blog.csdn.net/qq_39705793/article/details/81237005\">异或的用途</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "算法",
                "LeetCode",
                "数据结构",
                "面试"
            ]
        }
    ]
}