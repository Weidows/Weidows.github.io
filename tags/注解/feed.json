{
    "version": "https://jsonfeed.org/version/1",
    "title": "⭐️齐下无贰⭐️ • All posts by \"注解\" tag",
    "description": "May all the beauty be bless.✨",
    "home_page_url": "https://blog.weidows.tech",
    "items": [
        {
            "id": "https://blog.weidows.tech/post/lang/Java/MyBatis/3/",
            "url": "https://blog.weidows.tech/post/lang/Java/MyBatis/3/",
            "title": "MyBatis~(贰)",
            "date_published": "2021-05-16T03:18:27.000Z",
            "content_html": "<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2023-04-20 18:16:49\n * @FilePath: \\Blog-private\\source\\_posts\\Java\\MyBatis\\3.md\n * @Description:\n * @!: *********************************************************************\n-->\n<ul>\n<li><a href=\"#%E7%AC%94%E8%AE%B0%E4%BB%A3%E7%A0%81\">笔记代码</a></li>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B\">面向接口编程</a></li>\n<li><a href=\"#%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91\">注解开发</a>\n<ul>\n<li><a href=\"#%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B\">简单上手</a></li>\n<li><a href=\"#%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90\">原理分析</a></li>\n<li><a href=\"#crud\">CRUD</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB\">对应关系</a>\n<ul>\n<li><a href=\"#%E5%A4%9A%E5%AF%B9%E4%B8%80\">多对一</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"笔记代码\"><a href=\"https://github.com/Weidows/Weidows/blob/09b2ed9b8e2b87709f36228e0ce46fe977534ce9/MyBatis/\">笔记代码</a></h2>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"面向接口编程\">面向接口编程</h2>\n<ul>\n<li>\n<p>主要目的就是<code>解耦</code>,分层开发中,上层业务不用管具体的实现.</p>\n</li>\n<li>\n<p>使得 <code>规范</code> 和 <code>实现</code> 两部分分离,接口作为项目骨架.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"注解开发\">注解开发</h2>\n<h3 id=\"简单上手\">简单上手</h3>\n<ul>\n<li>\n<p>接口上直接注解 SQL 语句</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Select(&quot;select * from mybatis.user&quot;)</span></span><br><span class=\"line\">  List&lt;User&gt; <span class=\"title function_\">getUsers</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>绑定接口</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--之前是用xml绑定的--&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--&lt;mapper resource=&quot;Mappers/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--这里换成绑定接口--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dao.UserMapper&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>实现原理: 通过<code>反射机制</code>获取接口中的信息,然后用<code>动态代理</code>实现业务.</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GV4Pvb.png\" alt=\"代理模式.drawio\" />\n</li>\n<li>\n<p>调试</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVSSqb.png\" alt=\"20210522000831\" />\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h3 id=\"原理分析\">原理分析</h3>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_38270106/article/details/93398694\">mybatis 的执行流程</a></p>\n</blockquote>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GViQrb.png\" alt=\"MyBatis流程.drawio\" />\n<hr>\n<h3 id=\"CRUD\">CRUD</h3>\n<ul>\n<li>\n<p><code>UserMapper</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pojo.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Select(&quot;select * from mybatis.user&quot;)</span></span><br><span class=\"line\">  List&lt;User&gt; <span class=\"title function_\">getUsers</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    基本类型的参数或者String类型，需要加上</span></span><br><span class=\"line\"><span class=\"comment\">    引用类型不需要加</span></span><br><span class=\"line\"><span class=\"comment\">    如果只有一个基本类型的话，可以忽略，但是建议都加上</span></span><br><span class=\"line\"><span class=\"comment\">    我们在SQL中引用的就是我们这里的@Param()中设定的属性名</span></span><br><span class=\"line\"><span class=\"comment\">    重要: 这里方法不能重载! 两个同名方法会使MyBatis运行报错(开发时JDK不会报错)</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"meta\">@Select(&quot;select * from mybatis.user where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">  User <span class=\"title function_\">getUserById</span><span class=\"params\">(<span class=\"type\">int</span> id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 多个参数的情况下,必须加上@Param注解</span></span><br><span class=\"line\">  <span class=\"meta\">@Select(&quot;select * from mybatis.user where id = #&#123;id&#125; and name = #&#123;name&#125;&quot;)</span></span><br><span class=\"line\">  User <span class=\"title function_\">getUserByIdAndName</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;id&quot;)</span> <span class=\"type\">int</span> id, <span class=\"meta\">@Param(&quot;name&quot;)</span> String name)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Insert(&quot;insert into mybatis.user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)&quot;)</span></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">addUser</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//注意SQL格式,set 和 where顺序不能颠倒</span></span><br><span class=\"line\">  <span class=\"meta\">@Update(&quot;update mybatis.user set name = #&#123;name&#125;,pwd = #&#123;pwd&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Delete(&quot;delete from mybatis.user where id = #&#123;id&#125;&quot;)</span></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">deleteUserById</span><span class=\"params\">(<span class=\"type\">int</span> id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>test</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> utils.MyBatisUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserMapperTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> MyBatisUtils.getSqlSession();</span><br><span class=\"line\">    <span class=\"type\">UserMapper</span> <span class=\"variable\">userMapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">    List&lt;User&gt; userList = userMapper.getUsers();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (User user : userList) &#123;</span><br><span class=\"line\">      System.out.println(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sqlSession.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetUserById</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> MyBatisUtils.getSqlSession();</span><br><span class=\"line\">    <span class=\"type\">UserMapper</span> <span class=\"variable\">userMapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userMapper.getUserById(<span class=\"number\">1</span>);</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">    sqlSession.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getUserById</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> MyBatisUtils.getSqlSession();</span><br><span class=\"line\">    <span class=\"type\">UserMapper</span> <span class=\"variable\">userMapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userMapper.getUserByIdAndName(<span class=\"number\">1</span>, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">    sqlSession.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> MyBatisUtils.getSqlSession();</span><br><span class=\"line\">    <span class=\"type\">UserMapper</span> <span class=\"variable\">userMapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> userMapper.addUser(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">7</span>, <span class=\"string\">&quot;七七&quot;</span>, <span class=\"string\">&quot;45648&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      sqlSession.commit();</span><br><span class=\"line\">    sqlSession.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> MyBatisUtils.getSqlSession();</span><br><span class=\"line\">    <span class=\"type\">UserMapper</span> <span class=\"variable\">userMapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> userMapper.updateUser(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">7</span>, <span class=\"string\">&quot;七七&quot;</span>, <span class=\"string\">&quot;12345678&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      sqlSession.commit();</span><br><span class=\"line\">    sqlSession.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUserById</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> MyBatisUtils.getSqlSession();</span><br><span class=\"line\">    <span class=\"type\">UserMapper</span> <span class=\"variable\">userMapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (userMapper.deleteUserById(<span class=\"number\">7</span>) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      sqlSession.commit();</span><br><span class=\"line\">    sqlSession.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"对应关系\">对应关系</h2>\n<ul>\n<li>SQL初始化:</li>\n</ul>\n<h3 id=\"多对一\">多对一</h3>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "Java",
                "MyBatis",
                "数据库",
                "注解"
            ]
        },
        {
            "id": "https://blog.weidows.tech/post/lang/Java/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/2/",
            "url": "https://blog.weidows.tech/post/lang/Java/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/2/",
            "title": "🔥Java注解与反射复习~(贰)",
            "date_published": "2021-02-27T09:31:03.000Z",
            "content_html": "<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2023-04-20 18:15:52\n * @FilePath: \\Blog-private\\source\\_posts\\Java\\注解与反射\\2.md\n * @Description:\n * @!: *********************************************************************\n-->\n<ul>\n<li><a href=\"#%E6%93%8D%E4%BD%9C-class-%E5%AF%B9%E8%B1%A1\">操作 Class 对象</a></li>\n<li><a href=\"#%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90\">性能分析</a></li>\n<li><a href=\"#%E5%8F%8D%E5%B0%84%E6%93%8D%E4%BD%9C%E6%B3%9B%E5%9E%8B\">反射操作泛型</a></li>\n<li><a href=\"#%E5%8F%8D%E5%B0%84%E6%93%8D%E4%BD%9C%E6%B3%A8%E8%A7%A3\">反射操作注解</a></li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"操作-Class-对象\">操作 Class 对象</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo6</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获得class对象</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> User.class;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建一个对象</span></span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> (User) c1.newInstance();<span class=\"comment\">//本质是调用了类的无参构造器</span></span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过构造器创建对象</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;============================&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> c1.getDeclaredConstructor(String.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user2</span> <span class=\"operator\">=</span> (User) constructor.newInstance(<span class=\"string\">&quot;打爆&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">    System.out.println(user2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过反射获取一个方法</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;============================&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">setName</span> <span class=\"operator\">=</span> c1.getDeclaredMethod(<span class=\"string\">&quot;setName&quot;</span>, String.class);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * invoke: 激活</span></span><br><span class=\"line\"><span class=\"comment\">     * invoke(执行方法的对象+原方法的参数1+原方法的参数2+...)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    setName.invoke(user, <span class=\"string\">&quot;Weidows&quot;</span>);</span><br><span class=\"line\">    System.out.println(user.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过反射操作属性</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;============================&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user3</span> <span class=\"operator\">=</span> (User) c1.newInstance();</span><br><span class=\"line\">    <span class=\"type\">Field</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> c1.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//不能直接操作私有属性，我们需要关闭程序的安全监测，属性或方法的setAccessible(true)</span></span><br><span class=\"line\">    name.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    name.set(user3, <span class=\"string\">&quot;齐下无贰&quot;</span>);</span><br><span class=\"line\">    System.out.println(user3.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      twenty_one.reflection.User@59f95c5d</span></span><br><span class=\"line\"><span class=\"comment\">      ============================</span></span><br><span class=\"line\"><span class=\"comment\">      twenty_one.reflection.User@5c8da962</span></span><br><span class=\"line\"><span class=\"comment\">      ============================</span></span><br><span class=\"line\"><span class=\"comment\">      Weidows</span></span><br><span class=\"line\"><span class=\"comment\">      ============================</span></span><br><span class=\"line\"><span class=\"comment\">      齐下无贰</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"性能分析\">性能分析</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PerformanceInfluence</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    test1();</span><br><span class=\"line\">    test2();</span><br><span class=\"line\">    test3();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      普通方式执行4ms</span></span><br><span class=\"line\"><span class=\"comment\">      反射方式,开启检测执行2794ms</span></span><br><span class=\"line\"><span class=\"comment\">      反射方式,关闭检测执行1771ms</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000000</span>; i++) &#123;</span><br><span class=\"line\">      user.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;普通方式执行&quot;</span> + (end - start) + <span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> user.getClass();</span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">getName</span> <span class=\"operator\">=</span> c1.getDeclaredMethod(<span class=\"string\">&quot;getName&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000000</span>; i++) &#123;</span><br><span class=\"line\">      getName.invoke(user, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;反射方式,开启检测执行&quot;</span> + (end - start) + <span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> user.getClass();</span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">getName</span> <span class=\"operator\">=</span> c1.getDeclaredMethod(<span class=\"string\">&quot;getName&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    getName.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000000000</span>; i++) &#123;</span><br><span class=\"line\">      getName.invoke(user, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;反射方式,关闭检测执行&quot;</span> + (end - start) + <span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可见使用<code>反射方式执行效率远远远远低于正常执行</code>,关闭访问权限检测也只能降低部分性能损耗</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"反射操作泛型\">反射操作泛型</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.ParameterizedType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Type;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Generic</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">(Map&lt;String, User&gt; map, List&lt;User&gt; list)</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Map&lt;String, User&gt; <span class=\"title function_\">test02</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取参数(map,list)的泛型参数(String,User)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> Generic.class.getMethod(<span class=\"string\">&quot;test01&quot;</span>, Map.class, List.class);</span><br><span class=\"line\">    Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;范型参数&quot;</span> + genericParameterType);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (genericParameterType <span class=\"keyword\">instanceof</span> ParameterizedType) &#123;</span><br><span class=\"line\">        Type[] actualTypeAnguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Type actualTypeAngument : actualTypeAnguments) &#123;</span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;  实际参数范型&quot;</span> + actualTypeAngument);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;--------------------------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取返回值的泛型参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">method1</span> <span class=\"operator\">=</span> Generic.class.getMethod(<span class=\"string\">&quot;test02&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"type\">Type</span> <span class=\"variable\">getGenericReturnType</span> <span class=\"operator\">=</span> method1.getGenericReturnType();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getGenericReturnType <span class=\"keyword\">instanceof</span> ParameterizedType) &#123;</span><br><span class=\"line\">      Type[] actualTypeArguments = ((ParameterizedType) getGenericReturnType).getActualTypeArguments();</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;返回值范型&quot;</span> + actualTypeArgument);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    范型参数java.util.Map&lt;java.lang.String, twenty_one.reflection.User&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    实际参数范型class java.lang.String</span></span><br><span class=\"line\"><span class=\"comment\">    实际参数范型class twenty_one.reflection.User</span></span><br><span class=\"line\"><span class=\"comment\">    范型参数java.util.List&lt;twenty_one.reflection.User&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    实际参数范型class twenty_one.reflection.User</span></span><br><span class=\"line\"><span class=\"comment\">    --------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">    返回值范型class java.lang.String</span></span><br><span class=\"line\"><span class=\"comment\">    返回值范型class twenty_one.reflection.User</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"反射操作注解\">反射操作注解</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Annotation</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchFieldException, SecurityException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// * 通过反射获取注解</span></span><br><span class=\"line\">    java.lang.annotation.Annotation[] annotations = Student1.class.getAnnotations();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (java.lang.annotation.Annotation annotation : annotations) &#123;</span><br><span class=\"line\">      System.out.println(annotation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// * 获取注解的value</span></span><br><span class=\"line\">    <span class=\"type\">Table</span> <span class=\"variable\">annotation</span> <span class=\"operator\">=</span> Student1.class.getAnnotation(Table.class); <span class=\"comment\">//获取Student1类上Table类型的注解</span></span><br><span class=\"line\">    System.out.println(annotation.value());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// * 获取指定的value</span></span><br><span class=\"line\">    java.lang.reflect.<span class=\"type\">Field</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> Student1.class.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Field</span> <span class=\"variable\">annotation1</span> <span class=\"operator\">=</span> f.getAnnotation(Field.class);</span><br><span class=\"line\">    System.out.println(annotation1.columnName() + <span class=\"string\">&quot;\\t&quot;</span> + annotation1.type() + <span class=\"string\">&quot;\\t&quot;</span> + annotation1.length());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    <span class=\"doctag\">@twenty</span>_one.reflection.Table(value=&quot;db_student&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">    db_student</span></span><br><span class=\"line\"><span class=\"comment\">    db_name varchar 3</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Table(value = &quot;db_student&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student1</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Field(columnName = &quot;db_id&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">  <span class=\"meta\">@Field(columnName = &quot;db_age&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">  <span class=\"meta\">@Field(columnName = &quot;db_name&quot;, type = &quot;varchar&quot;, length = 3)</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Student1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Student1</span><span class=\"params\">(<span class=\"type\">int</span> id, <span class=\"type\">int</span> age, String name)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student [age=&quot;</span> + age + <span class=\"string\">&quot;, id=&quot;</span> + id + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ! 类名的注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> Table &#123;</span><br><span class=\"line\">  String <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ! 属性的注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.FIELD)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> Field &#123;</span><br><span class=\"line\">  String <span class=\"title function_\">columnName</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  String <span class=\"title function_\">type</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">length</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "笔记",
                "Java",
                "注解",
                "反射"
            ]
        },
        {
            "id": "https://blog.weidows.tech/post/lang/Java/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/1/",
            "url": "https://blog.weidows.tech/post/lang/Java/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/1/",
            "title": "🔥Java注解与反射复习~(壹)",
            "date_published": "2021-02-25T03:20:20.000Z",
            "content_html": "<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2023-04-20 18:15:08\n * @FilePath: \\Blog-private\\source\\_posts\\Java\\注解与反射\\1.md\n * @Description:\n * @!: *********************************************************************\n-->\n<ul>\n<li><a href=\"#%E5%86%85%E7%BD%AE%E6%B3%A8%E8%A7%A3\">内置注解</a></li>\n<li><a href=\"#%E5%85%83%E6%B3%A8%E8%A7%A3\">元注解</a></li>\n<li><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3\">自定义注解</a></li>\n<li><a href=\"#%E5%8F%8D%E5%B0%84\">反射</a>\n<ul>\n<li><a href=\"#class-%E7%B1%BB\">Class 类</a></li>\n<li><a href=\"#%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B\">类的加载过程</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AE%9E%E4%BE%8B%E5%8C%96%E4%B8%8E-static-%E5%8A%A0%E8%BD%BD\">实例化与 static 加载</a>\n<ul>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E5%8F%91%E7%94%9F%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96\">什么时候会发生类初始化?</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8\">类加载器</a></li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"内置注解\">内置注解</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Anno1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"comment\">//重写方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.toString();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Deprecated</span> <span class=\"comment\">//表示弃用方法,但仍可使用</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@SuppressWarnings(&quot;all&quot;)</span> <span class=\"comment\">//抑制警告</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">    test01();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"元注解\">元注解</h2>\n<ul>\n<li>\n<p><code>作用于其他注解的注解</code></p>\n</li>\n<li>\n<p>在 java.lang.annotation 包中可以找到.( @ Target , @Retention，@Documented , @Inherited )</p>\n<ul>\n<li>@Target :用于描述注解的使用范围(即:被描述的注解可以用在什么地方)</li>\n<li>@Retention :表示需要在什么级别保存该注释信息,用于描述注解的生命周期(SOURCE &lt; CLASS &lt; RUNTIME)</li>\n<li>@Document:说明该注解将被包含在 javadoc 中</li>\n<li>@Inherited: 说明子类可以继承父类中的该注解</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@MyAnnotation</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Anno2</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@MyAnnotation</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Target 表示我们的注解可以用在哪些地方.</span></span><br><span class=\"line\"><span class=\"meta\">@Target(value = &#123; ElementType.METHOD, ElementType.TYPE &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Retention表示我们的注解在什么地方还有效。runtime&gt;class&gt;sources</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Documented表示是否将我们的注解生成在Javadoc中</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Inherited子类可以继承父类的注解</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@interface</span> MyAnnotation &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"自定义注解\">自定义注解</h2>\n<ul>\n<li>使用@interface 自定义注解时,自动继承了 java.lang .annotation.Annotation 接口</li>\n<li>@interface 用来声明一个注解,格式: public @ interface 注解名{定义内容}\n<ol>\n<li>其中的每一个方法实际上是声明了一个配置参数.</li>\n<li>方法的名称就是参数的名称.</li>\n<li>返回值类型就是参数的类型(返回值只能是基本类型,Class , String , enum ).</li>\n<li>可以通过 default 来声明参数的默认值</li>\n<li>如果只有一个参数成员, 一般参数名为 value</li>\n<li>注解元素必须要有值，我们定义注解元素时,经常使用空字符串，0 作为默认值.</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Anno3</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//注解可以显示赋值，如果没有默认值 ，我们就必须给注解赋值</span></span><br><span class=\"line\">  <span class=\"meta\">@MyAnnotation2(name = &#123;&quot;Weidows&quot;, &quot;齐下无贰&quot;&#125;, age = 21)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@MyAnnotation3(&quot;Weidows&quot;)</span> <span class=\"comment\">//参数只有一个，且参数名为value</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> MyAnnotation2 &#123;</span><br><span class=\"line\">  <span class=\"comment\">//注解的参数:参数类型+参数名();</span></span><br><span class=\"line\">  String[] name() <span class=\"keyword\">default</span> &#123;<span class=\"string\">&quot;&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">age</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">id</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> -<span class=\"number\">1</span>; <span class=\"comment\">// 如果默认值为-1,代表不存在。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  String <span class=\"title function_\">schools</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;家里蹲大学&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Target</span>(value = &#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class=\"line\"><span class=\"comment\"> * 只有一个参数时可以省略参数名,多个参数时不可省略</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> MyAnnotation3 &#123;</span><br><span class=\"line\">  <span class=\"comment\">//只有一个参数时，参数名为value时，使用时不需参数名</span></span><br><span class=\"line\">  String <span class=\"title function_\">value</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>现在,注解定义和使用结束了,下面结合反射来读取注解数据.</p>\n</blockquote>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"反射\">反射</h2>\n<ul>\n<li>可以在运行时实现动态创建对象和编译,有很大的灵活性,但会影响一定性能</li>\n</ul>\n<h3 id=\"Class-类\">Class 类</h3>\n<ul>\n<li>\n<p>Class 类时反射机制的根源,常用方法如下:</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVmAfm.png\" alt=\"20210226151038\" />\n</li>\n<li>\n<p>获取 Class 类的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo1</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//方式一：通过对象获取</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>().getClass();</span><br><span class=\"line\">    System.out.println(c1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方式二：通过forname获取</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;twenty_one.reflection.Person&quot;</span>);</span><br><span class=\"line\">    System.out.println(c2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过类名.class获得(最可靠,高效)</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> Student.class;</span><br><span class=\"line\">    System.out.println(c3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方式四：基本内置类型的包装类都有一个TYPE属性</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c4</span> <span class=\"operator\">=</span> Integer.TYPE;</span><br><span class=\"line\">    System.out.println(c4);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Person&#123;&quot;</span> + <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> + <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;Student&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Teacher</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;Teacher&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>Class 对象类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Object.class; <span class=\"comment\">//类</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> Runnable.class; <span class=\"comment\">//接口</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> String[].class; <span class=\"comment\">//- -维数组</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c4</span> <span class=\"operator\">=</span> <span class=\"type\">int</span>[][].class; <span class=\"comment\">//二维数组</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c5</span> <span class=\"operator\">=</span> Override.class; <span class=\"comment\">//注解</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c6</span> <span class=\"operator\">=</span> ElementType.class; <span class=\"comment\">//枚举</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c7</span> <span class=\"operator\">=</span> Integer.class; <span class=\"comment\">//基本数据类型</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c8</span> <span class=\"operator\">=</span> <span class=\"keyword\">void</span>.class; <span class=\"comment\">//void</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">c9</span> <span class=\"operator\">=</span> Class.class; <span class=\"comment\">//Class</span></span><br><span class=\"line\">    System.out.println(c1);<span class=\"comment\">//class java.lang.Object</span></span><br><span class=\"line\">    System.out.println(c2);<span class=\"comment\">//interface java.lang.Comparable</span></span><br><span class=\"line\">    System.out.println(c3);<span class=\"comment\">//class [Ljava.lang.String;</span></span><br><span class=\"line\">    System.out.println(c4);<span class=\"comment\">//class [[I</span></span><br><span class=\"line\">    System.out.println(c5);<span class=\"comment\">//interface java.lang.Override</span></span><br><span class=\"line\">    System.out.println(c6);<span class=\"comment\">//class java.lang.annotation.ElementType</span></span><br><span class=\"line\">    System.out.println(c7);<span class=\"comment\">//class java.lang.Integer</span></span><br><span class=\"line\">    System.out.println(c8);<span class=\"comment\">//void</span></span><br><span class=\"line\">    System.out.println(c9);<span class=\"comment\">//class java.lang.Class</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h3 id=\"类的加载过程\">类的加载过程</h3>\n<ol>\n<li>\n<p>加载: 首先类加载器读取.class 字节码文件到方法区内存,转换数据结构为运行时,并生成 java.lang.Class 对象.</p>\n<ul>\n<li>在反射中获取 Class 对象并不是创建,而是从内存中获取.</li>\n</ul>\n</li>\n<li>\n<p>链接:将 Java 类的二进制代码合并到 JVM 的运行状态之中的过程。</p>\n<ul>\n<li>验证:确保加载的类信息符合 JVM 规范，没有安全方面的问题</li>\n<li>准备:正式为类变量(static) 分配内存并设置类变量默认初始值的阶段,这些内存都将在方法区中进行分配。</li>\n<li>解析:虚拟机常量池内的符号引用(常量名)替换为直接引用(地址)的过程。</li>\n</ul>\n</li>\n<li>\n<p>初始化:</p>\n<ul>\n<li>执行类构造器&lt; clinit&gt; ()方法的过程。<code>类构造器&lt; clinit&gt; ()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。</code>(类构造 器是构造类信息的，不是构造该类对象的构造器)。</li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>\n<li>虚拟机会保证一 个类的 ()方法在多线程环境中被正确加锁和同步。</li>\n</ul>\n<hr>\n</li>\n</ol>\n<ul>\n<li>\n<p>例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">    System.out.println(A.m);<span class=\"comment\">//300</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      1.加载到内存，产生一个类对应Class对象</span></span><br><span class=\"line\"><span class=\"comment\">      2.链接，链接结束后m=◎</span></span><br><span class=\"line\"><span class=\"comment\">      3.初始化</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;clinit&gt;()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">          m=100;</span></span><br><span class=\"line\"><span class=\"comment\">          System.out.println( &quot;A类静态代码块初始化&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">          m = 300;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// * 1.1</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// * 1.2</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;A类静态代码块初始化&quot;</span>);</span><br><span class=\"line\">    m = <span class=\"number\">300</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// * 2</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">A</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;A类的构造初始化&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVmSeh.png\" alt=\"20210226172346\" />\n</li>\n</ul>\n<hr>\n<h2 id=\"实例化与-static-加载\">实例化与 static 加载</h2>\n<ul>\n<li>\n<p>尝试下实例化与否对 static 资源调用的影响</p>\n</li>\n<li>\n<p>实例化+调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">    System.out.println(A.m);<span class=\"comment\">//300</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">A</span>类静态代码块初始化</span><br><span class=\"line\"><span class=\"selector-tag\">A</span>类的构造初始化</span><br><span class=\"line\"><span class=\"number\">300</span></span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>实例化+不调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">A</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(A.m);//300</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">A</span>类静态代码块初始化</span><br><span class=\"line\"><span class=\"selector-tag\">A</span>类的构造初始化</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>不实例化+调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// A a = new A();</span></span><br><span class=\"line\">    System.out.println(A.m);<span class=\"comment\">//300</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">A</span>类静态代码块初始化</span><br><span class=\"line\"><span class=\"number\">300</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>可以发现在实例化对象之后调用 static 资源,并不会再次执行静态代码块</p>\n<ul>\n<li>如果没实例化的情况下调取 static 资源,类会加载,但不会执行构造器</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"什么时候会发生类初始化\">什么时候会发生类初始化?</h3>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVmbFr.png\" alt=\"20210226172913\" />\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo4</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;main类被加载&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.主动引用</span></span><br><span class=\"line\">    <span class=\"comment\">// Son son = new Son();</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * main类被加载</span></span><br><span class=\"line\"><span class=\"comment\">    * 父类被加载</span></span><br><span class=\"line\"><span class=\"comment\">    * 子类被加载</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//反射也会产生主动引用</span></span><br><span class=\"line\">    <span class=\"comment\">// Class.forName(&quot;twenty_one.reflection.Son&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * main类被加载</span></span><br><span class=\"line\"><span class=\"comment\">     * 父类被加载</span></span><br><span class=\"line\"><span class=\"comment\">     * 子类被加载</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//不会产生类的引用的方法</span></span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(Son.b);</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * main类被加载</span></span><br><span class=\"line\"><span class=\"comment\">    * 父类被加载</span></span><br><span class=\"line\"><span class=\"comment\">    * 2</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//只会main类被加载</span></span><br><span class=\"line\">    <span class=\"comment\">// System.out.println(Son.M);</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * main类被加载</span></span><br><span class=\"line\"><span class=\"comment\">     * 1</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//全加载</span></span><br><span class=\"line\">    System.out.println(Son.m);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * main类被加载</span></span><br><span class=\"line\"><span class=\"comment\">     * 父类被加载</span></span><br><span class=\"line\"><span class=\"comment\">     * 子类被加载</span></span><br><span class=\"line\"><span class=\"comment\">     * 100</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Father</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;父类被加载&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Father</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;子类被加载&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">M</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"类加载器\">类加载器</h2>\n<ul>\n<li>\n<p>作用</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVmlnT.png\" alt=\"20210227171646\" />\n</li>\n<li>\n<p>分类</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVmM71.png\" alt=\"20210227172006\" />\n<hr>\n</li>\n<li>\n<p>操作类加载器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo5</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取系统的类加载器</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">systemClassLoader</span> <span class=\"operator\">=</span> ClassLoader.getSystemClassLoader();</span><br><span class=\"line\">    System.out.println(systemClassLoader);<span class=\"comment\">//jdk.internal.loader.ClassLoaders$AppClassLoader@4459eb14</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取系统类加载器的父类加载器--&gt;扩展类加载器</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">parent</span> <span class=\"operator\">=</span> systemClassLoader.getParent();</span><br><span class=\"line\">    System.out.println(parent);<span class=\"comment\">//jdk.internal.loader.ClassLoaders$PlatformClassLoader@7960847b</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取扩展类加载器的父类加载器--&gt;根加载器(C/C++)</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">grantparent</span> <span class=\"operator\">=</span> parent.getParent();</span><br><span class=\"line\">    System.out.println(grantparent);<span class=\"comment\">//null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//测试当前类是哪个加载器加载的</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> Demo5.class.getClassLoader();</span><br><span class=\"line\">    System.out.println(classLoader);<span class=\"comment\">//jdk.internal.loader.ClassLoaders$AppClassLoader@4459eb14</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//测试JDK内置的类是谁加载的</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class=\"line\">    System.out.println(classLoader1);<span class=\"comment\">//null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如何获得系统类加载器可以加载的路径</span></span><br><span class=\"line\">    System.out.println(System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>));<span class=\"comment\">//D:\\Game\\Weidows\\Java\\target\\classes;D:\\Game\\Scoop\\persist\\maven\\mvn-repository\\commons-io\\commons-io\\2.8.0\\commons-io-2.8.0.jar</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "笔记",
                "Java",
                "注解",
                "反射"
            ]
        }
    ]
}