{
    "version": "https://jsonfeed.org/version/1",
    "title": "⭐️齐下无贰⭐️ • All posts by \"扩展\" tag",
    "description": "May all the beauty be bless.✨",
    "home_page_url": "https://weidows.github.io",
    "items": [
        {
            "id": "https://weidows.github.io/post/Web/get-resources/",
            "url": "https://weidows.github.io/post/Web/get-resources/",
            "title": "🌏媒体资源加密-and-解密获取",
            "date_published": "2022-02-22T11:49:20.000Z",
            "content_html": "<h1>媒体资源加密-and-解密获取</h1>\n<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2024-08-06 15:36:23\n * @FilePath: \\Blog-private\\source\\_posts\\Web\\get-resources.md\n * @Description:\n * @!: *********************************************************************\n-->\n<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li><a href=\"#%E5%AA%92%E4%BD%93%E8%B5%84%E6%BA%90%E5%8A%A0%E5%AF%86-and-%E8%A7%A3%E5%AF%86%E8%8E%B7%E5%8F%96\">媒体资源加密-and-解密获取</a>\n<ul>\n<li><a href=\"#token-%E9%98%B2%E7%9B%97%E9%93%BE\">token-防盗链</a></li>\n<li><a href=\"#ffmpeg-hls-aes_128_cbc\">FFmpeg-HLS-AES_128_CBC</a>\n<ul>\n<li><a href=\"#%E5%88%86%E7%89%87\">分片</a></li>\n<li><a href=\"#%E5%88%86%E7%89%87%E4%BD%9C%E7%94%A8-%E5%BC%95%E5%AD%90\">分片作用-引子</a></li>\n<li><a href=\"#%E8%8A%B1%E6%B4%BB\">花活</a></li>\n<li><a href=\"#%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%B5%81%E7%A8%8B%E5%9B%BE\">加解密流程图</a></li>\n<li><a href=\"#openssl-%E6%89%8B%E5%8A%A8%E5%8A%A0%E5%AF%86\">openssl-手动加密</a>\n<ul>\n<li><a href=\"#encrypt-without-iv\">encrypt-without-iv</a></li>\n<li><a href=\"#encrypt-with-iv\">encrypt-with-iv</a></li>\n</ul>\n</li>\n<li><a href=\"#ffmpeg-%E5%88%86%E7%89%87%E5%8A%A0%E5%AF%86%E4%B8%80%E6%9D%A1%E9%BE%99\">FFmpeg-分片加密一条龙</a></li>\n<li><a href=\"#%E8%A7%A3%E5%AF%86-%E5%90%88%E5%B9%B6\">解密-合并</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96\">获取</a>\n<ul>\n<li><a href=\"#%E8%A7%86%E9%A2%91\">视频</a></li>\n<li><a href=\"#%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87\">网页图片</a></li>\n<li><a href=\"#qq-%E7%BE%A4%E5%9B%BE%E7%89%87\">QQ-群图片</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%80%9F%E7%89%A9%E8%A1%A8\">借物表</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p>各类平台网页中的视频通常会被 <code>加密处理</code> 以防止别人拿走; 防盗技术还是有很多种的:<sup id='cite_ref-3'><a href=\"#cite_note-3\">[3]</a></sup></p>\n<ol>\n<li>FFmpeg-HLS-AES_128_CBC 加密</li>\n<li>url 中加入 token 验证</li>\n<li>验证用户身份再给链接(session,cookie)</li>\n<li>视频加水印</li>\n<li>限制跨域访问</li>\n<li>…etc</li>\n</ol>\n</li>\n</ul>\n<p>下面只摸一下技术层面的 <code>1.和2.</code></p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"token-防盗链\">token-防盗链</h2>\n<p>如 <code>http://xxxxxx.com/m3u8/hunan/desc.m3u8?stream_id=hunan&lt;m=1410595018&amp;lkey=8bc1e0fe35f6321ef560f8ccffb70e5d&amp;path=59.49.42.14,58.59.3.9,58.59.3.51&amp;platid=10&amp;splatid=1015&amp;tag=live&amp;cips=127.0.0.1&amp;ext=m3u8&amp;sign=live_tv</code> <sup id='cite_ref-8'><a href=\"#cite_note-8\">[8]</a></sup></p>\n<p>在 url 加上 时间戳,ip 地址,平台 id,splatid,tag,cips,ext,sign 等参数, 可以让服务器鉴别是否被其他网站/客户端请求, 并作出 403 响应</p>\n<p>同一参数的 url 无法被复用, 但是仍可以通过动态调整参数来绕过服务器的检测</p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"FFmpeg-HLS-AES-128-CBC\">FFmpeg-HLS-AES_128_CBC</h2>\n<ul>\n<li>\n<p>这么一坨 💩,什么意思嘛?</p>\n<p>FFmpeg 是最强大的视频编解码器, 可以把输入的视频处理成符合 HLS 规范的流媒体, 同时通过 AES-128-CBC 格式的秘钥加密视频</p>\n<p>浅入深出,别急慢慢吃… 下面结合这个库动动手就明白了:<sup id='cite_ref-4'><a href=\"#cite_note-4\">[4]</a></sup></p>\n<hr>\n</li>\n</ul>\n<h3 id=\"分片\">分片</h3>\n<ul>\n<li>\n<p>分片的方式比较简单,这里我们准备好一个 <code>demo.mp4</code>, 丢给 FFmpeg 下面的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i demo.mp4 -codec copy -f segment -segment_list index.m3u8 -segment_time 30 %d.ts</span><br></pre></td></tr></table></figure>\n<p>执行完会出来下面这些东西,这些 ts 文件就是分成片的小段视频,此处没加密可以直接播放</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRd0R.png\" alt=\"\"></p>\n<p>有些播放器支持的话 index.m3u8 也是可以播放的, 其实就是引用的这些 ts</p>\n<hr>\n</li>\n<li>\n<p>上面命令中 <code>index.m3u8</code> 这个文件是分片的索引文件, 指明了 ts 文件的先后顺序,时长,版本和加密等信息</p>\n<blockquote>\n<ul>\n<li>TS: MPEG2-Transport Stream,高清相机拍摄视频的封装格式;特点就是要求从视频流的任一片段开始都是可以独立解码的</li>\n<li>m3u8: HTTP Live Streaming（HLS） 协议格式的基础,Unicode 版本的 M3U，此文件用 UTF-8 编码<sup id='cite_ref-01'><a href=\"#cite_note-01\">[1]</a></sup> <br>\n下图 index 就是 m3u8,作用就是索引 ts<br>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRc4n.png\" alt=\"\"></li>\n</ul>\n</blockquote>\n<hr>\n</li>\n<li>\n<p>喏,index.m3u8 文件内容应该能看懂</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#EXTM3U</span><br><span class=\"line\">#EXT-X-VERSION:3</span><br><span class=\"line\">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class=\"line\">#EXT-X-ALLOW-CACHE:YES</span><br><span class=\"line\">#EXT-X-TARGETDURATION:32</span><br><span class=\"line\">#EXTINF:30.720000,</span><br><span class=\"line\">0.ts</span><br><span class=\"line\">#EXTINF:29.280000,</span><br><span class=\"line\">1.ts</span><br><span class=\"line\">#EXTINF:31.880000,</span><br><span class=\"line\">2.ts</span><br><span class=\"line\">#EXTINF:29.040000,</span><br><span class=\"line\">3.ts</span><br><span class=\"line\">#EXTINF:29.320000,</span><br><span class=\"line\">4.ts</span><br><span class=\"line\">#EXTINF:6.280000,</span><br><span class=\"line\">5.ts</span><br><span class=\"line\">#EXT-X-ENDLIST</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n</ul>\n<h3 id=\"分片作用-引子\">分片作用-引子</h3>\n<ol>\n<li>\n<p>分段加载视频而不是一口气加载到底</p>\n<p>大部分视频用户不会完完整整的看,分段加载减轻服务器压力,也使用户体验好</p>\n<p>(好几 G 的电影,一口气加载到底, 内存/缓存遭不住…)</p>\n</li>\n<li>\n<p>分片可以让用户无法<code>直接通过链接</code>在浏览器获取<code>完整的 mp4 视频</code></p>\n<p>但,可以通过获取所有 ts 文件合并为 mp4</p>\n<p>插件市场的一些插件可以通过 .m3u8 获取并合并.ts 间接获取完整的 .MP4</p>\n</li>\n</ol>\n<p>于是为了反破解出现了 <code>某些花活</code> 和 <code>视频加密</code></p>\n<hr>\n<h3 id=\"花活\">花活</h3>\n<ol>\n<li>\n<p>把 .m3u8 文件伪装成 .mp4, 可以让大部分没有伪装识别能力的爬虫找不着北 (比如 CoCocut)</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRSwv.png\" alt=\"\"><br>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRTHM.png\" alt=\"\"></p>\n</li>\n<li>\n<p>m3u8 中多层嵌套 m3u8 (套娃), 有些爬虫是支持的, 有的 G 了</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">#EXTM3U</span><br><span class=\"line\">#EXT-X-STREAM-<span class=\"keyword\">INF</span>:<span class=\"keyword\">PROGRAM</span>-ID=1,BANDWIDTH=1064000</span><br><span class=\"line\">1000kbps.m3u8</span><br><span class=\"line\">#EXT-X-STREAM-<span class=\"keyword\">INF</span>:<span class=\"keyword\">PROGRAM</span>-ID=1,BANDWIDTH=564000</span><br><span class=\"line\">500kbps.m3u8</span><br><span class=\"line\">#EXT-X-STREAM-<span class=\"keyword\">INF</span>:<span class=\"keyword\">PROGRAM</span>-ID=1,BANDWIDTH=282000</span><br><span class=\"line\">250kbps.m3u8</span><br><span class=\"line\">#EXT-X-STREAM-<span class=\"keyword\">INF</span>:<span class=\"keyword\">PROGRAM</span>-ID=1,BANDWIDTH=2128000</span><br><span class=\"line\">2000kbps.m3u8</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>…etc</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"加解密流程图\">加解密流程图</h3>\n<p>原创哦,转载请标记</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRvhz.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"openssl-手动加密\">openssl-手动加密</h3>\n<h4 id=\"encrypt-without-iv\">encrypt-without-iv</h4>\n<p>此处通过 shell 脚本分析,墙裂建议结合仓库学习:<sup id='cite_ref-4'><a href=\"#cite_note-4\">[4]</a></sup></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">workPath=&quot;2.encrypted-without-iv&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清除原先的</span></span><br><span class=\"line\">rm -rf $workPath/*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">分片</span></span><br><span class=\"line\">ffmpeg -i demo.mp4 -codec copy -f segment -segment_list $workPath/index.m3u8 -segment_time 30 $workPath/%d.ts</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取加密秘钥</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">openssl rand 16</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  随机生成 16B 二进制数据 (16*8=128 位, 对应AES-128-CBC名称)</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># tee -a $workPath/enc.key</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  将生成的数据输出到秘钥文件 enc.key, 同时把数据交给 hexdump 处理</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># hexdump -e &#x27;16/1 &quot;%02x&quot;&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  hexdump -e <span class=\"string\">&#x27;a/b format1 format2&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    a个字节/8位 -&gt; format2 (a可省,默认为1)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    b个字节/8位 -&gt; format1</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    详见: https://blog.csdn.net/bytxl/article/details/43738103</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\">#   每1字节/8位 -&gt; %02x -&gt; 2位16进制</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    也就是二进制转16进制,每4位合1位, 128/4=32位16进制</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  每16字节的结果为1行, 那去掉这个16可以吗?</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    应该是不行的,结果会出错,例如:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    4a6afd460c84c498b8a817ad66392ef2 √</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    46fd6a4a98c4840cad17a8b8f22e3966 ×</span></span><br><span class=\"line\">encryptionKey=`openssl rand 16 | tee -a $workPath/enc.key | hexdump -e &#x27;16/1 &quot;%02x&quot;&#x27;`</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ts 文件数</span></span><br><span class=\"line\">numberOfTsFiles=`ls $workPath/*.ts | wc -l`</span><br><span class=\"line\"></span><br><span class=\"line\">for ((i=0; i&lt;$numberOfTsFiles; i ++)) do</span><br><span class=\"line\">    # without-iv也就是默认iv为32位文件序列号</span><br><span class=\"line\">    #   如 5.ts -&gt; 00000000000000000000000000000005</span><br><span class=\"line\">    initializationVector=`printf &#x27;%032x&#x27; $i`</span><br><span class=\"line\"></span><br><span class=\"line\">    # 对每个分片加密</span><br><span class=\"line\">    openssl aes-128-cbc -e -in $workPath/$i.ts -out $workPath/enc_$i.ts -nosalt -iv $initializationVector -K $encryptionKey</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">寻找并添加加密方法和秘钥URL</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  找 <span class=\"string\">&quot;#EXT-X-TARGETDURATION:&quot;</span> 这一段,并在下一行添加</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  <span class=\"comment\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;enc.key&quot;</span></span></span><br><span class=\"line\">sed &#x27;/#EXT-X-TARGETDURATION:/a #EXT-X-KEY:METHOD=AES-128,URI=&quot;enc.key&quot;&#x27; $workPath/index.m3u8 &gt; $workPath/index_new.m3u8</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">覆盖</span></span><br><span class=\"line\">mv $workPath/index_new.m3u8 $workPath/index.m3u8</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>如图,加密后的 ts 就不能直接播放了</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRzam.png\" alt=\"\"></p>\n</li>\n</ul>\n<hr>\n<h4 id=\"encrypt-with-iv\">encrypt-with-iv</h4>\n<p>这个 iv (initialisation vector,初始化向量) 有点迷, 作用是增强随机性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">workPath=&quot;3.encrypted-with-iv&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf $workPath/*</span><br><span class=\"line\"></span><br><span class=\"line\">ffmpeg -i demo.mp4 -codec copy -f segment -segment_list $workPath/index.m3u8 -segment_time 30 $workPath/%d.ts</span><br><span class=\"line\"></span><br><span class=\"line\">encryptionKey=`openssl rand 16 | tee -a $workPath/enc.key | hexdump -e &#x27;16/1 &quot;%02x&quot;&#x27;`</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ivKey 偏移量,32位16进制数据,如: f86b5decdb6359cb1023e308651dccfb</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不需要另存文件, 只需要写在 m3u8 文件里</span></span><br><span class=\"line\">ivKey=`openssl rand -hex 16`</span><br><span class=\"line\"></span><br><span class=\"line\">numberOfTsFiles=`ls $workPath/*.ts | wc -l`</span><br><span class=\"line\"></span><br><span class=\"line\">for ((i=0; i&lt;$numberOfTsFiles; i ++)) do</span><br><span class=\"line\">    openssl aes-128-cbc -e -in $workPath/$i.ts -out $workPath/enc_$i.ts -nosalt -iv $ivKey -K $encryptionKey</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下面 <span class=\"variable\">$&#123;ivKey&#125;</span> 需要获取变量,所以字符串要用<span class=\"string\">&quot;&quot;</span>而不能是<span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\">sed &quot;/#EXT-X-TARGETDURATION:/a #EXT-X-KEY:METHOD=AES-128,URI=\\&quot;enc.key\\&quot;,IV=0x$&#123;ivKey&#125;&quot; $workPath/index.m3u8 &gt; $workPath/index_new.m3u8</span><br><span class=\"line\"></span><br><span class=\"line\">mv $workPath/index_new.m3u8 $workPath/index.m3u8</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"FFmpeg-分片加密一条龙\">FFmpeg-分片加密一条龙</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">workPath=&quot;4.encrypt-with-FFmpeg&quot;</span><br><span class=\"line\">urlPrefix=&quot;weidows.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf $workPath/*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">enc.keyinfo</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  写到 m3u8 里的 keyURL | https://hlsbook.net/enc.key</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  加密用的 key 文件地址  | enc.key</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  IV值 (可选)          | ecd0d06eaf884d8226c33928e87efa33</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  详见: https://hlsbook.net/how-to-encrypt-hls-video-with-ffmpeg/</span></span><br><span class=\"line\"></span><br><span class=\"line\">openssl rand 16 &gt; $workPath/enc.key</span><br><span class=\"line\"></span><br><span class=\"line\">tmpfile=`mktemp`</span><br><span class=\"line\">echo $urlPrefix/enc.key &gt; $tmpfile</span><br><span class=\"line\">echo $workPath/enc.key &gt;&gt; $tmpfile</span><br><span class=\"line\">echo `openssl rand -hex 16` &gt;&gt; $tmpfile</span><br><span class=\"line\">mv $tmpfile $workPath/enc.keyinfo</span><br><span class=\"line\"></span><br><span class=\"line\">ffmpeg -y -i demo.mp4 -c copy -hls_time 30 -hls_key_info_file $workPath/enc.keyinfo -hls_playlist_type vod -hls_segment_filename $workPath/enc_%d.ts $workPath/index.m3u8</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>index.m3u8</p>\n<p>可见生成的没什么问题,而且可以通过下面的方法正常解密</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#EXTM3U</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXT-X-VERSION</span>:<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXT-X-TARGETDURATION</span>:<span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXT-X-MEDIA-SEQUENCE</span>:<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXT-X-PLAYLIST-TYPE</span>:VOD</span><br><span class=\"line\"><span class=\"selector-id\">#EXT-X-KEY</span>:METHOD=AES-<span class=\"number\">128</span>,URI=<span class=\"string\">&quot;./enc.key&quot;</span>,IV=<span class=\"number\">0</span>x2b5cc8a84648ed8ce5f64e5845d3cb7c</span><br><span class=\"line\"><span class=\"selector-id\">#EXTINF</span>:<span class=\"number\">30.720000</span>,</span><br><span class=\"line\">enc_0<span class=\"selector-class\">.ts</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXTINF</span>:<span class=\"number\">29.280000</span>,</span><br><span class=\"line\">enc_1<span class=\"selector-class\">.ts</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXTINF</span>:<span class=\"number\">31.880000</span>,</span><br><span class=\"line\">enc_2<span class=\"selector-class\">.ts</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXTINF</span>:<span class=\"number\">29.040000</span>,</span><br><span class=\"line\">enc_3<span class=\"selector-class\">.ts</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXTINF</span>:<span class=\"number\">29.320000</span>,</span><br><span class=\"line\">enc_4<span class=\"selector-class\">.ts</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXTINF</span>:<span class=\"number\">6.280000</span>,</span><br><span class=\"line\">enc_5<span class=\"selector-class\">.ts</span></span><br><span class=\"line\">#EXT-X-ENDLIST</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"解密-合并\">解密-合并</h3>\n<p>上面加密会了的话,解密就简单了,完全就是反过来</p>\n<p>合并方法取自: <sup id='cite_ref-6'><a href=\"#cite_note-6\">[6]</a></sup></p>\n<p>这篇文章<sup id='cite_ref-5'><a href=\"#cite_note-5\">[5]</a></sup>简单介绍了下如何手动解密,其文中把 key 和 iv 位数标错为 16 了,别误解</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">inputPath=<span class=\"string\">&quot;2.encrypted-without-iv&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ivKey=<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">inputPath=<span class=\"string\">&quot;3.encrypted-with-iv&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ivKey=<span class=\"string\">&quot;0d5cce6d9fbfae9dcc86cb3f12d4eb4b&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加密 enc_*.ts 输入路径</span></span><br><span class=\"line\">inputPath=&quot;4.encrypt-with-FFmpeg&quot;</span><br><span class=\"line\">ivKey=&quot;36bb7a1e43e1d3d88b779243817a67bc&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解密 dec_*.ts 和合并后 mp4 输出路径</span></span><br><span class=\"line\">outputPath=&quot;5.decrypt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf $outputPath/*</span><br><span class=\"line\"></span><br><span class=\"line\">encryptionKey=$(hexdump -e &#x27;16/1 &quot;%02x&quot;&#x27; $inputPath/enc.key)</span><br><span class=\"line\"></span><br><span class=\"line\">numberOfTsFiles=`ls $inputPath/enc_*.ts | wc -l`</span><br><span class=\"line\"></span><br><span class=\"line\">for ((i=0; i&lt;$numberOfTsFiles; i ++)) do</span><br><span class=\"line\">    if [[ $ivKey == &quot;&quot; ]]; then</span><br><span class=\"line\">        ivKey=$(printf &#x27;%032x&#x27; $i)</span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">    openssl aes-128-cbc -d -in $inputPath/enc_$i.ts -out $outputPath/dec_$i.ts -nosalt -iv $ivKey -K $encryptionKey</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">合并</span></span><br><span class=\"line\">ffmpeg -allowed_extensions ALL -i $inputPath/index.m3u8 -acodec copy -vcodec copy -f mp4 $outputPath/combine.mp4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>如图 <code>dec_*.ts</code> 为解密后的文件,可以直接播放了</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVR0xA.png\" alt=\"\"></p>\n<p>可以看项目中的 <code>5.</code>, 合并后的 mp4 也没有问题</p>\n<p>但 原视频 != 分片加解密合并后的视频, 大小差不多但是会有差异 (9.87MB vs 9.95MB)</p>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"获取\">获取</h2>\n<p>下面就是对资源获取方式的 <code>推荐</code> 了</p>\n<h3 id=\"视频\">视频</h3>\n<blockquote>\n<p>CoCocut: 这个插件官方直接说了不支持爬加密视频,但是大部分平台用起来<s>还是很棒的</s>,插件中最棒的<br>\n有个小弊病, 它不开会员的话是超慢的单线程下载… 我常用它获取 m3u8 地址让下面这伙计下载</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/nilaoda/N_m3u8DL-CLI\">N_m3u8DL-CLI</a>: 这家伙可以通过 m3u8 下载加密视频; 支持多线程,很快 <img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVct49.png\" alt=\"\"><br>\n可以手动破解加密视频 <sup id='cite_ref-7'><a href=\"#cite_note-7\">[7]</a></sup></p>\n</blockquote>\n<blockquote>\n<p>QQ 浏览器手机 app, 直接进对应网页就可以爬下来视频,加密的也可以,速度拉满 (小母牛倒立 🐄🍺</p>\n</blockquote>\n<hr>\n<h3 id=\"网页图片\">网页图片</h3>\n<ul>\n<li>\n<p>下面两个差不多,都是把页面现有的图片都扒下来, <code>按域名分类</code>,很容易筛选出来</p>\n<p>这方法并不适用于获取视频.</p>\n<blockquote>\n<p>梦想资源下载器</p>\n</blockquote>\n<blockquote>\n<p>网页右键另存为<br>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRbW9.png\" alt=\"\"></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>Picviewer CE+</p>\n</blockquote>\n<hr>\n<h3 id=\"QQ-群图片\">QQ-群图片</h3>\n<p>经常有老哥在群里发图,苦于一张张保存手抽筋,发现了此方法:</p>\n<ol>\n<li>\n<p>打开电脑版消息管理器,找到那些聊天记录</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRQg0.png\" alt=\"\"></p>\n</li>\n<li>\n<p>选择,复制</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRN95.png\" alt=\"\"></p>\n</li>\n<li>\n<p>发送给 <code>我的手机</code></p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVR7Hh.png\" alt=\"\"></p>\n</li>\n<li>\n<p>然后就无了, 这手段对于保存好几十/上百张图十分便利</p>\n</li>\n</ol>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"借物表\">借物表</h2>\n<p><a name='cite_note-01' href='#cite_ref-01'>[1]</a>: <a href=\"https://www.jianshu.com/p/426425cad08a\">HLS 协议介绍</a></p>\n<p><a name='cite_note-2' href='#cite_ref-2'>[2]</a>: <a href=\"https://github.com/fftt2017/hls-m3u8-sample\">https://github.com/fftt2017/hls-m3u8-sample</a></p>\n<p><a name='cite_note-3' href='#cite_ref-3'>[3]</a>: <a href=\"https://zhuanlan.zhihu.com/p/32014463\">在线教育类网站视频加密视频安全的一些方法</a></p>\n<p><a name='cite_note-4' href='#cite_ref-4'>[4]</a>: <a href=\"https://github.com/Weidows-projects/hls-m3u8-sample\">https://github.com/Weidows-projects/hls-m3u8-sample</a>, 此库是在<sup id='cite_ref-2'><a href=\"#cite_note-2\">[2]</a></sup>的基础上改进的</p>\n<p><a name='cite_note-5' href='#cite_ref-5'>[5]</a>: <a href=\"https://www.52pojie.cn/thread-971265-1-1.html\">解密 m3u8 文件, ts 文件解密, hls 解密.</a></p>\n<p><a name='cite_note-6' href='#cite_ref-6'>[6]</a>: <a href=\"https://blog.csdn.net/Yao_2333/article/details/82910560\">ffmpeg-简单 AES 加解密记录</a></p>\n<p><a name='cite_note-7' href='#cite_ref-7'>[7]</a>: <a href=\"https://www.appinn.com/download-video-30482/\">恕我直言，再难下载的视频，手搓大佬终究还是有办法</a></p>\n<p><a name='cite_note-8' href='#cite_ref-8'>[8]</a>: <a href=\"https://www.zhihu.com/question/20697986/answer/128433075\">HLS 如何实现加密 ？</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "推荐",
                "浏览器",
                "扩展",
                "FFmpeg",
                "算法",
                "hexdump",
                "HLS",
                "openssl",
                "shell",
                "密码学",
                "QQ"
            ]
        }
    ]
}