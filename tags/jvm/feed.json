{
    "version": "https://jsonfeed.org/version/1",
    "title": "⭐️齐下无贰⭐️ • All posts by \"jvm\" tag",
    "description": "May all the beauty be bless.✨",
    "home_page_url": "https://weidows.github.io",
    "items": [
        {
            "id": "https://weidows.github.io/post/Java/jvm_model/",
            "url": "https://weidows.github.io/post/Java/jvm_model/",
            "title": "JVM 内存模型",
            "date_published": "2020-08-25T11:14:35.000Z",
            "content_html": "<!--\n * @Author: Weidows\n * @Date: 2020-08-25 19:14:35\n * @LastEditors: Weidows\n * @LastEditTime: 2021-12-20 21:19:30\n * @FilePath: \\Blog-private\\source\\_posts\\Java\\jvm_model.md\n-->\n<ul>\n<li><a href=\"#%E5%AD%90%E7%88%B6%E7%B1%BB%E5%8A%A0%E8%BD%BD\">子父类加载</a></li>\n<li><a href=\"#jvm-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B\">JVM 内存模型</a>\n<ul>\n<li><a href=\"#%E5%A0%86heap\"><code>堆 heap</code>:</a></li>\n<li><a href=\"#%E6%A0%88stack\"><code>栈 stack</code>:</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E5%8C%BAmethod\"><code>方法区 method</code>:</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90\">举个栗子</a></li>\n<li><a href=\"#%E9%87%8D%E7%82%B9\"><code>重点!</code></a>\n<ul>\n<li><a href=\"#%E5%9C%A8-student-stu--new-student-%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E8%BF%87%E7%A8%8B\">在 Student stu = new Student(); 过程中, 子类对象的实例化过程:</a></li>\n<li><a href=\"#java-%E5%BC%95%E7%94%A8%E5%8F%98%E9%87%8F%E6%9C%89%E4%B8%A4%E4%B8%AA%E7%B1%BB%E5%9E%8B%E7%BC%96%E8%AF%91%E6%97%B6%E7%B1%BB%E5%9E%8B--%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E5%9E%8B\">Java 引用变量有两个类型:<code>编译时类型 </code> &amp;&amp; <code> 运行时类型</code></a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%99%9A%E6%8B%9F%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E4%BE%8B%E5%AD%90\">虚拟方法调用例子</a></li>\n<li><a href=\"#jvm-errors\">JVM Errors</a>\n<ul>\n<li><a href=\"#1awt-%E9%94%99%E8%AF%AF\">1.AWT 错误</a></li>\n<li><a href=\"#2jvm-%E9%94%99%E8%AF%AF\">2.JVM 错误</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%B7%B1%E6%B5%85-clone\">深浅 -clone</a></li>\n</ul>\n<h2 id=\"子父类加载\">子父类加载</h2>\n<ul>\n<li>\n<p>最近发现的一个知识漏洞</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/zxcoder/p/12250210.html\">Java 多态之 Father f=new Son();</a></p>\n</blockquote>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"JVM- 内存模型\">JVM 内存模型</h2>\n<h3 id=\"堆 heap\"><code>堆 heap</code>:</h3>\n<p>所有的对象(包括定义的对象和字符串对象)</p>\n<h3 id=\"栈 stack\"><code>栈 stack</code>:</h3>\n<p>基础数据类型, 以及对象的引用(对象在堆内部的地址)</p>\n<h3 id=\"方法区 method\"><code>方法区 method</code>:</h3>\n<p>所有的 class 和 static 变量</p>\n<hr>\n<h2 id=\"举个栗子\">举个栗子</h2>\n<p>Person p = new Person();<br>\n栈里面存的就是 p, 这个 p 指向堆里面 new Person()出来的那个对象地址</p>\n<hr>\n<h2 id=\"重点\"><code>重点!</code></h2>\n<h3 id=\"在 -Student-stu-new-Student- 过程中 - 子类对象的实例化过程\">在 Student stu = new Student(); 过程中, 子类对象的实例化过程:</h3>\n<ul>\n<li>\n<p><code>方法区</code>:</p>\n<ol>\n<li>先加载 Person.class, 然后是 Student.class (先父类后子类)</li>\n</ol>\n</li>\n<li>\n<p><code>堆内存</code>:</p>\n<ol start=\"3\">\n<li>\n<p>开辟对象空间, 分配地址</p>\n</li>\n<li>\n<p>在对象空间对对象的属性 (包括父类的属性) 进行默认初始化</p>\n</li>\n<li>\n<p>显示初始化父类属性</p>\n</li>\n<li>\n<p>显示初始化子类属性</p>\n</li>\n</ol>\n</li>\n<li>\n<p><code>栈内存</code>:</p>\n<ol start=\"2\">\n<li>\n<p>申请空间, 声明变量 stu</p>\n</li>\n<li>\n<p>子类构造函数方法进栈</p>\n</li>\n<li>\n<p>父类构造方法进栈, 执行后出栈</p>\n</li>\n<li>\n<p>初始化完毕后, 将堆内存中的地址赋给引用变量, 子类构造方法出栈</p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Java- 引用变量有两个类型 - 编译时类型 - 运行时类型\">Java 引用变量有两个类型:<code>编译时类型 </code> &amp;&amp; <code> 运行时类型</code></h3>\n<ul>\n<li>编译时类型有声明该变量是使用的类型决定</li>\n<li>运行时类型由实际赋给该变量的对象决定</li>\n<li>如果二者类型不一致, 就出现 (对象的) 多态\n<ul>\n<li>子类的对象可以替代父类的对象使用</li>\n<li>一个引用类型变量可以指向不同类型的对象</li>\n</ul>\n</li>\n<li>成员变量: 不具备多态性, 只看引用变量所属的类 (其指向的堆内的具体对象) 是否存在该成员</li>\n</ul>\n<hr>\n<h2 id=\"虚拟方法调用例子\">虚拟方法调用例子</h2>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person e = <span class=\"keyword\">new</span> <span class=\"constructor\">Student()</span>;</span><br><span class=\"line\">e.get<span class=\"constructor\">Info()</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译时 e 为 Person 类型, 调用时是用的 Student 类的(动态绑定)</li>\n</ul>\n<hr>\n<h2 id=\"JVM-Errors\">JVM Errors</h2>\n<h4 id=\"1-AWT- 错误\">1.AWT 错误</h4>\n<h4 id=\"2-JVM- 错误\">2.JVM 错误</h4>\n<ul>\n<li>StackOverflow</li>\n<li>OutOfMemory</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"深浅 -clone\">深浅 -clone</h2>\n<img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/post/8tr6DhL5wZeK4V3.png\" alt=\"20211220211918\" />\n<img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/post/bFRma1xAZhJWpKT.png\" alt=\"20211220211958\" />\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "java",
                "jvm"
            ]
        }
    ]
}