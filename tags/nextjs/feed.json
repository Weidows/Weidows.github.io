{
    "version": "https://jsonfeed.org/version/1",
    "title": "⭐️齐下无贰⭐️ • All posts by \"nextjs\" tag",
    "description": "May all the beauty be bless.✨",
    "home_page_url": "https://blog.weidows.tech",
    "items": [
        {
            "id": "https://blog.weidows.tech/post/lang/ts/nextjs/",
            "url": "https://blog.weidows.tech/post/lang/ts/nextjs/",
            "title": "fullstack-matters-next-全栈框架搭建过程中遇到的问题记录",
            "date_published": "2024-08-21T16:53:57.000Z",
            "content_html": "<h1>fullstack-matters-next-全栈框架搭建过程中遇到的问题记录</h1>\n<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2024-08-28 02:32:58\n * @FilePath: \\Blog-private\\source\\_posts\\lang\\ts\\nextjs.md\n * @Description:\n * @:\n * ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⠻⣄\n * ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⣀⡾⠀⠀⣿\n * ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡶⠟⠛⠉⠉⠀⠀⠀⠀⠀⠀⠉⠉⠛⠻⠿⣤⣀⣠⡴⠋\n * ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⠂⠀⠀⠀⠀⠀⠀⠀⠀⠙⢶⣀\n * ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠉⠀⠀⠀⠀⠀⠀⡴⠁⠀⠀⠀⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄\n * ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⠋⠀⠀⠀⠀⠀⠀⢠⠏⠀⠀⠀⠀⡾⠀⠀⠀⠀⠀⠀⠀⠀⢰⠀⠀⠀⠀⠀⠀⠈⢷⡀\n * ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡿⠀⠀⠀⠀⠀⠀⠀⣠⠃⠀⠀⠀⠀⢰⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠙⣄\n * ⠀⠀⠀⠀⠀⠀⠀⠀⠀⡿⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⣀⣿⢠⠀⠀⠀⠀⠀⠀⠀⠀⣶⠀⣧⠀⠀⠀⠀⠀⠀⠀⠈⣆\n * ⠀⠀⠀⠀⠀⠀⠀⠀⣼⠁⠀⣰⠀⠀⠀⠀⣾⢸⣿⣀⣤⣶⡛⠁⣿⠘⡄⠀⠀⠀⠀⢀⠀⠀⣿⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠸\n * ⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⡟⠀⠀⠀⠀⣿⡈⡏⠀⠀⠀⠀⠙⡜⡄⢿⠀⠀⠀⠀⣾⣧⣾⢸⠀⢸⠀⠀⡇⠀⠀⠀⠀⠀⠀⡇\n * ⠀⠀⠀⠀⠀⠀⠀⢀⡇⠀⠀⣇⠀⠀⠀⠀⣷⣿⣿⣶⣦⣀⠀⠀⠀⠹⡘⣿⡀⠀⠀⢹⣿⠃⢸⠀⣿⠀⢠⣿⠀⠀⠀⠀⠀⣄⣧\n * ⠀⠀⠀⠀⠀⠀⠀⣼⠀⠀⠀⣿⠀⠀⠀⠀⢿⠉⠉⠉⠻⣿⣷⡀⠀⠀⠈⠁⠙⢦⣀⣸⠋⠈⣸⣼⢻⠀⣾⡿⠀⠀⠀⠀⢸⢸⣿\n * ⠀⠀⠀⠀⠀⠀⠀⣿⠀⣿⠀⠸⡄⣤⠀⠀⠀⣧⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⠀⣿⣿⠇⠀⠀⠀⠀⣾⢸⣿\n * ⠀⠀⠀⠀⠀⠀⢰⡇⠀⣿⠀⠀⠙⠿⣿⠛⠒⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣦⡀⡿⠀⠀⠀⠀⠀⣿⣿⣿\n * ⠀⠀⠀⠀⠀⠀⣿⠀⣴⠋⠙⣦⠀⠀⠀⣇⠀⠀⠀⠀⠀⠀⣼⠉⠙⠳⠦⣤⡀⠀⠀⠀⠀⠀⠀⠈⠻⡿⠀⠀⠀⠀⠀⠀⣿⣿⣿\n * ⠀⠀⠀⠀⠀⠀⣿⢤⠇⣀⡀⣼⠀⠀⠀⢹⠀⠀⠀⠀⠀⢸⠁⠀⠀⠀⠀⢰⠁⠀⠀⠀⠀⠀⠀⣠⠟⠀⠀⠀⠀⠀⠀⢠⣯⣿⣿\n * ⠀⠀⠀⠀⣠⠋⣠⠟⠁⠀⠈⠛⣄⠀⠀⠀⣇⠀⠀⠀⠀⢹⠀⠀⠀⠀⢀⠟⠀⠀⠀⠀⠀⠀⢾⣁⠀⠀⠀⠀⢀⣾⣤⡏⠉⠉⣿\n * ⠀⠀⢀⣞⠤⣴⠁⠀⠀⠀⠀⠀⠀⣧⠀⠀⢿⠉⠳⣤⡀⠀⠁⠀⠠⠶⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠧⣴⣾⣿⣿⠟⡇⠀⠀⢸\n * ⣠⠚⠁⢀⠏⣿⠀⠀⠀⠀⠀⠀⠀⠸⡀⠀⠈⡏⠛⠶⣤⡉⠛⠶⢤⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⣀⡴⣿⣿⠟⠁⠀⠀⡇⠀⠀⢸\n * ⠀⠀⠀⢸⠀⠘⡄⠀⠀⠀⠀⠀⢹⠀⡿⡄⠀⣿⠀⠀⠀⠀⠙⠲⣤⡀⠙⢦⠉⠉⠉⠉⠉⠉⠁⠀⠀⣿⠀⠀⠀⠀⠀⡇⠀⠀⢸\n * ⠀⠀⠀⠘⡄⠀⣿⠀⠀⠀⠀⠀⣸⠛⡄⢻⠀⠸⡀⠀⠀⠀⠀⠀⠀⠈⠛⢦⡉⢦⡀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⢰⠇⠀⠀⢸\n * ⠀⠀⠀⠀⢿⠀⠈⠙⢦⣄⣠⠴⠃⢠⠃⠀⡇⠀⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢾⣦⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⣼⠀⠀⠀⠀⡇\n * ⠀⠀⠀⠀⠀⠙⢤⠀⠀⠀⠀⠀⡴⠋⠀⠀⡇⠀⢿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⠀⠀⠀⡿⠀⠀⠀⠀⡿⠀⠀⠀⠀⡇\n * ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡇⠀⠘⣿⣿⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠳⠀⠀⡇⠀⠀⠀⢰⠁⠀⠀⠀⠀⡇\n * ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠀⠀⠀⣿⣿⣿⣿⣷⣶⣶⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⢸⠁⠀⠀⠀⡿⠀⠀⠀⠀⠀⣷\n *\n * @!: *********************************************************************\n-->\n<blockquote class=\"pullquote mindmap mindmap-sm\"><ul>\n<li><a href=\"#fullstack-matters-next-%E5%85%A8%E6%A0%88%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95\">fullstack-matters-next-全栈框架搭建过程中遇到的问题记录</a>\n<ul>\n<li><a href=\"#config\">config</a>\n<ul>\n<li><a href=\"#image\">Image</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\">usage</a>\n<ul>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-upload-file-image\">文件上传-upload-file-image</a>\n<ul>\n<li><a href=\"#form-data-parse\">form-data-parse</a></li>\n<li><a href=\"#image-to-buffer2string\">image-to-Buffer2string</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#deployments\">deployments</a>\n<ul>\n<li><a href=\"#vercel-file-read-write\">vercel-file-read-write</a>\n<ul>\n<li><a href=\"#jimp-watermark-%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0\">Jimp-watermark-添加水印</a></li>\n</ul>\n</li>\n<li><a href=\"#aliyun-%E7%99%BE%E7%82%BC%E6%8D%A2%E8%A3%85\">aliyun-百炼换装</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%80%9F%E7%89%A9%E8%A1%A8\">借物表</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"config\">config</h2>\n<h3 id=\"Image\">Image</h3>\n<blockquote>\n<p>⚠ The “images.domains” configuration is deprecated. Please use “images.remotePatterns” configuration instead.</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">const config = <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  webpack<span class=\"punctuation\">:</span> (config<span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span> isServer <span class=\"punctuation\">&#125;</span>) =&gt; <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// https://nextjs.org/docs/messages/next-image-unconfigured-host</span></span><br><span class=\"line\">  <span class=\"comment\">// https://stackoverflow.com/questions/71235874/how-to-allow-all-domains-for-image-nextjs-config</span></span><br><span class=\"line\">  images<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    remotePatterns<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span> protocol<span class=\"punctuation\">:</span> <span class=\"string\">&quot;https&quot;</span><span class=\"punctuation\">,</span> hostname<span class=\"punctuation\">:</span> <span class=\"string\">&quot;**&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#123;</span> protocol<span class=\"punctuation\">:</span> <span class=\"string\">&quot;https&quot;</span><span class=\"punctuation\">,</span> hostname<span class=\"punctuation\">:</span> <span class=\"string\">&quot;xxx.com&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// deprecated</span></span><br><span class=\"line\">    <span class=\"comment\">// domains: [&quot;&quot;],</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span>;</span><br></pre></td></tr></table></figure>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"usage\">usage</h2>\n<h3 id=\"文件上传-upload-file-image\">文件上传-upload-file-image</h3>\n<p>如何实现图片/文件上传操作</p>\n<p>使用 t3app 创建的项目, 其中用到了 tRPC, 但很难受的是它对文件传输不支持</p>\n<p>只能用 next 原生 API router 去写 RESTFUL <sup id='cite_ref-1'><a href=\"#cite_note-1\">[1]</a></sup></p>\n<h4 id=\"form-data-parse\">form-data-parse</h4>\n<p>next 后端如何解析 form 格式带文件的请求</p>\n<p>一开始是想用 form 直接上传图片文件, 但是解析过程中有问题 (用到的是 formidable )</p>\n<p>不知道哪里的问题, 解析出来的文件会在 fields 里 (string 形式, 很奇怪), files 为空</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"attr\">api</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 需要禁用默认的</span></span><br><span class=\"line\">    <span class=\"attr\">bodyParser</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 form.parse 封装在一个 Promise 中</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parseForm</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"attr\">req</span>: <span class=\"title class_\">NextApiRequest</span></span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Promise</span>&lt;&#123; <span class=\"attr\">fields</span>: <span class=\"title class_\">Fields</span>; <span class=\"attr\">files</span>: <span class=\"title class_\">Files</span> &#125;&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> form = <span class=\"keyword\">new</span> <span class=\"title class_\">IncomingForm</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">allowEmptyFiles</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">multiples</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">maxFileSize</span>: <span class=\"number\">50</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>, <span class=\"comment\">// 增加文件大小限制, 单位为字节</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    form.<span class=\"title function_\">parse</span>(req, <span class=\"function\">(<span class=\"params\">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(err); <span class=\"comment\">// 如果解析出错，reject 这个 promise</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(&#123; fields, files &#125;); <span class=\"comment\">// 如果成功，resolve 这个 promise，返回解析后的数据</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"image-to-Buffer2string\">image-to-Buffer2string</h4>\n<p>转为使用 string 去传递图片</p>\n<p>前端, 先从事件拿到 File 对象, 转为 ArrayBuffer, 再转为 binary 格式的 Buffer</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleImageChange</span> = (<span class=\"params\"><span class=\"attr\">event</span>: <span class=\"title class_\">React</span>.<span class=\"title class_\">ChangeEvent</span>&lt;<span class=\"title class_\">HTMLInputElement</span>&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> file = event.<span class=\"property\">target</span>.<span class=\"property\">files</span>?.[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!file) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  file</span><br><span class=\"line\">    .<span class=\"title function_\">arrayBuffer</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> textData = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(data).<span class=\"title function_\">toString</span>(<span class=\"string\">&quot;binary&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>后端:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ResData</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">file</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// API路由处理程序</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handler</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"attr\">req</span>: <span class=\"title class_\">NextApiRequest</span>,</span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"attr\">res</span>: <span class=\"title class_\">NextApiResponse</span></span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (req.<span class=\"property\">method</span> !== <span class=\"string\">&quot;POST&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">405</span>).<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">error</span>: <span class=\"string\">&quot;Method not allowed&quot;</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(req.<span class=\"property\">body</span> <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">ResData</span>;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(data);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将接收到的字符串转为 Buffer</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> buffer = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(data.<span class=\"property\">file</span>, <span class=\"string\">&quot;binary&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 保存或者处理 Buffer</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">status</span>: <span class=\"string\">&quot;ok&quot;</span> &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 捕获解析过程中可能发生的错误</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">error</span>: <span class=\"string\">&quot;Error parsing form data&quot;</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"deployments\">deployments</h2>\n<h3 id=\"vercel-file-read-write\">vercel-file-read-write</h3>\n<p>用了之后才深刻知道 vercel 是个 serverless 平台, 也就是代码里不能用 “fs”</p>\n<p>当然也不是完全不能用, 是只读状态 (申请写入会报错: <code>EROFS: read-only file system</code>)</p>\n<p>文件引入也比较苛刻 (通过 <code>../</code> 这种导入很容易出现 file not found) <sup id='cite_ref-2'><a href=\"#cite_note-2\">[2]</a></sup></p>\n<p><a href=\"https://vercel.com/guides/how-can-i-use-files-in-serverless-functions\">按官方建议</a> 是这种:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\">path.<span class=\"title function_\">join</span>(process.<span class=\"title function_\">cwd</span>(), <span class=\"string\">&quot;/public/img/xxx.png&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>如果真遇到需要 <code>临时</code> 写入的情况, 可以用 <code>/tmp</code> 这个路径</p>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/70924414/vercel-read-only-file-system-chmod\">vercel read-only file system, chmod</a></p>\n</blockquote>\n<p>另外更建议的做法是用 Buffer 传递, 一般主流第三方库的输入输入都适配了 (比如我用到了 Jimp)</p>\n<h4 id=\"Jimp-watermark-添加水印\">Jimp-watermark-添加水印</h4>\n<figure class=\"highlight ts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> srcImg = <span class=\"keyword\">await</span> <span class=\"title class_\">Jimp</span>.<span class=\"title function_\">read</span>(</span><br><span class=\"line\">  <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(<span class=\"title function_\">await</span>(<span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(data.<span class=\"property\">output</span>.<span class=\"property\">image_url</span> ?? <span class=\"string\">&quot;&quot;</span>)).<span class=\"title function_\">arrayBuffer</span>())</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 水印加到左下角</span></span><br><span class=\"line\">srcImg.<span class=\"title function_\">composite</span>(</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title class_\">Jimp</span>.<span class=\"title function_\">read</span>(path.<span class=\"title function_\">join</span>(process.<span class=\"title function_\">cwd</span>(), <span class=\"string\">&quot;/public/img/watermark.png&quot;</span>)),</span><br><span class=\"line\">  <span class=\"number\">10</span>,</span><br><span class=\"line\">  srcImg.<span class=\"title function_\">getHeight</span>() - <span class=\"number\">100</span>,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"title class_\">Jimp</span>.<span class=\"property\">BLEND_SOURCE_OVER</span>,</span><br><span class=\"line\">    <span class=\"attr\">opacitySource</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">opacityDest</span>: <span class=\"number\">0.8</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> resultBuffer = <span class=\"keyword\">await</span> srcImg.<span class=\"title function_\">getBufferAsync</span>(<span class=\"title class_\">Jimp</span>.<span class=\"property\">MIME_JPEG</span>);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"aliyun-百炼换装\">aliyun-百炼换装</h3>\n<blockquote>\n<p>Download the media resource timed out during the data inspection process.</p>\n</blockquote>\n<p>这问题是由于资源链接离上海有点远/太大, 获取超时了, 把文件服务换到 ap-shanghai</p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"借物表\">借物表</h2>\n<p><a name='cite_note-1' href='#cite_ref-1'>[1]</a>: <a href=\"https://stackoverflow.com/questions/76105855/send-blob-image-from-frontend-to-backend-with-nextjs-and-trpc-t3-stack\">https://stackoverflow.com/questions/76105855/send-blob-image-from-frontend-to-backend-with-nextjs-and-trpc-t3-stack</a></p>\n<p><a name='cite_note-2' href='#cite_ref-2'>[2]</a>: <a href=\"https://medium.com/@nksCodingLearnings/how-to-read-and-write-files-in-next-js-on-a-vercel-deployed-website-c1e9ea606cb6\">How to Read and Write Files in Next.js on a Vercel Deployed Website</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "nextjs",
                "fullstack",
                "vercel",
                "阿里云",
                "jimp",
                "typescript"
            ]
        }
    ]
}