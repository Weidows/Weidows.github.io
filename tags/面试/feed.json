{
    "version": "https://jsonfeed.org/version/1",
    "title": "⭐️齐下无贰⭐️ • All posts by \"面试\" tag",
    "description": "May all the beauty be bless.✨",
    "home_page_url": "https://weidows.github.io",
    "items": [
        {
            "id": "https://weidows.github.io/post/public-post/LeetCode/1/",
            "url": "https://weidows.github.io/post/public-post/LeetCode/1/",
            "title": "😵‍💫跟力扣斗智斗勇-log-1",
            "date_published": "2022-03-09T05:20:05.000Z",
            "content_html": "<h1>跟力扣斗智斗勇-log</h1>\n<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2022-03-16 22:25:58\n * @FilePath: \\Blog-private\\source\\_posts\\public-post\\LeetCode\\1.md\n * @Description:\n * @!: *********************************************************************\n--><blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li><a href=\"#%E8%B7%9F%E5%8A%9B%E6%89%A3%E6%96%97%E6%99%BA%E6%96%97%E5%8B%87-log\">跟力扣斗智斗勇-log</a>\n<ul>\n<li><a href=\"#%E9%A2%98%E8%A7%A3\">题解</a>\n<ul>\n<li><a href=\"#1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C\">1. 两数之和</a></li>\n<li><a href=\"#15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C\">15. 三数之和</a></li>\n<li><a href=\"#21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8\">21. 合并两个有序链表</a></li>\n<li><a href=\"#26-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9\">26. 删除有序数组中的重复项</a></li>\n<li><a href=\"#27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0\">27. 移除元素</a></li>\n<li><a href=\"#82-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-ii\">82. 删除排序链表中的重复元素 II</a></li>\n<li><a href=\"#111-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6\">111. 二叉树的最小深度</a></li>\n<li><a href=\"#155-%E6%9C%80%E5%B0%8F%E6%A0%88\">155. 最小栈</a></li>\n<li><a href=\"#160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8\">160. 相交链表</a></li>\n<li><a href=\"#231-2-%E7%9A%84%E5%B9%82\">231. 2 的幂</a></li>\n<li><a href=\"#680-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2-%E2%85%B1\">680. 验证回文字符串 Ⅱ</a></li>\n<li><a href=\"#844-%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2\">844. 比较含退格的字符串</a></li>\n<li><a href=\"#977-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9\">977. 有序数组的平方</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%96%B9%E6%B3%95\">方法</a>\n<ul>\n<li><a href=\"#%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95\">投票算法</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%80%9F%E7%89%A9%E8%A1%A8\">借物表</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><a href=\"https://weidows.github.io/post/public-post/LeetCode/1/\">⏩ 文章地址</a> | <a href=\"https://github.com/Weidows-projects/public-post\">✔️ 仓库地址</a> 欢迎提交 pr !</p>\n<p>一题二写，三数之和，题解四瞅五瞄六瞧，水平还七上八下九流，十分辣鸡<br>\n十天九考，八皇会面，题干七页六道五问，答案仅四行三言两语，一点不会</p>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"题解\">题解</h2>\n<h3 id=\"1-两数之和\">1. 两数之和</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">twoSum</span>(<span class=\"params\">self, nums, target</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type target: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)) :</span><br><span class=\"line\">                <span class=\"keyword\">if</span> nums[i] + nums[j] == target:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> [i, j]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"15-三数之和\">15. 三数之和</h3>\n<p>下面这第一种方法是行不通的,二可以</p>\n<ul>\n<li>\n<p>一</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">l</span> -&gt;</span>       &lt;-r</span><br><span class=\"line\">    | <span class=\"function\"><span class=\"title\">m</span>-&gt;</span> |</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">threeSum</span>(<span class=\"params\">self, nums</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        nums.sort()</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        l, r = <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> l &lt; r:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[l] &gt; <span class=\"number\">0</span>: <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">            m = l + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> m &lt; r:</span><br><span class=\"line\">                <span class=\"built_in\">sum</span> = nums[l] + nums[m] + nums[r]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">sum</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                        res.index([nums[l], nums[m], nums[r]])</span><br><span class=\"line\">                    <span class=\"keyword\">except</span>:  <span class=\"comment\"># 报错就说明没有,为了去重</span></span><br><span class=\"line\">                        res.append([nums[l], nums[m], nums[r]])</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> <span class=\"built_in\">sum</span> &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> m == l + <span class=\"number\">1</span>:</span><br><span class=\"line\">                    r -= <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                m += <span class=\"number\">1</span></span><br><span class=\"line\">            l += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>二</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">i</span> -&gt;</span></span><br><span class=\"line\">    | <span class=\"function\"><span class=\"title\">m</span>-&gt;</span>  &lt;-r |</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">threeSum</span>(<span class=\"params\">self, nums</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        nums.sort()</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums) - <span class=\"number\">2</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == <span class=\"number\">0</span> <span class=\"keyword\">or</span> nums[i] &gt; nums[i - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                l, r = i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> l &lt; r:</span><br><span class=\"line\">                    s = nums[i] + nums[l] + nums[r]</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> s &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                        l += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> s &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                        r -= <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        res.append([nums[i], nums[l], nums[r]])</span><br><span class=\"line\">                        <span class=\"comment\"># 去除</span></span><br><span class=\"line\">                        <span class=\"keyword\">while</span> l &lt; r <span class=\"keyword\">and</span> nums[l] == nums[l + <span class=\"number\">1</span>]:</span><br><span class=\"line\">                            l += <span class=\"number\">1</span></span><br><span class=\"line\">                        <span class=\"keyword\">while</span> l &lt; r <span class=\"keyword\">and</span> nums[r] == nums[r - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                            r -= <span class=\"number\">1</span></span><br><span class=\"line\">                        l += <span class=\"number\">1</span></span><br><span class=\"line\">                        r -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"21-合并两个有序链表\">21. 合并两个有序链表</h3>\n<p>链表节点不能直接通过 <code>ret = list1</code> 这种形式传递</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, next=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = next</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeTwoLists</span>(<span class=\"params\">self, list1, list2</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type list1: Optional[ListNode]</span></span><br><span class=\"line\"><span class=\"string\">        :type list2: Optional[ListNode]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: Optional[ListNode]</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> list1 <span class=\"keyword\">is</span> <span class=\"literal\">None</span>: <span class=\"keyword\">return</span> list2</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> list2 <span class=\"keyword\">is</span> <span class=\"literal\">None</span>: <span class=\"keyword\">return</span> list1</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> list1.val &lt; list2.val:</span><br><span class=\"line\">            list1.<span class=\"built_in\">next</span> = self.mergeTwoLists(list1.<span class=\"built_in\">next</span>, list2)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list1</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            list2.<span class=\"built_in\">next</span> = self.mergeTwoLists(list1, list2.<span class=\"built_in\">next</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"26-删除有序数组中的重复项\">26. 删除有序数组中的重复项</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">removeDuplicates</span>(<span class=\"params\">self, nums</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 起点, 终点, 步幅</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] == nums[i - <span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">del</span> nums[i]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(nums)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">removeDuplicates</span>(<span class=\"params\">self, nums</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 起点, 终点, 步幅 (前两个可省略)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums[::-<span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums.count(i) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                nums.remove(i)</span><br></pre></td></tr></table></figure>\n<h3 id=\"27-移除元素\">27. 移除元素</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">removeElement</span>(<span class=\"params\">self, nums, val</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums[::-<span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == val:</span><br><span class=\"line\">                nums.remove(i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(nums)</span><br></pre></td></tr></table></figure>\n<h3 id=\"82-删除排序链表中的重复元素-II\">82. 删除排序链表中的重复元素 II</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, next=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = next</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deleteDuplicates</span>(<span class=\"params\">self, head, prev=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type head: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> head <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prev <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> head.val == prev) <span class=\"keyword\">or</span> (head.<span class=\"built_in\">next</span></span><br><span class=\"line\">                                           <span class=\"keyword\">and</span> head.val == head.<span class=\"built_in\">next</span>.val):</span><br><span class=\"line\">            head = self.deleteDuplicates(head.<span class=\"built_in\">next</span>, head.val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            head.<span class=\"built_in\">next</span> = self.deleteDuplicates(head.<span class=\"built_in\">next</span>, head.val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"111-二叉树的最小深度\">111. 二叉树的最小深度</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = left</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = right</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minDepth</span>(<span class=\"params\">self, root</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 当前节点为空返回0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 叶子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> root.right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 左空,返回右+1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> root.left:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span> + self.minDepth(root.right)</span><br><span class=\"line\">        <span class=\"comment\"># 右空,返回左+1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> root.right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span> + self.minDepth(root.left)</span><br><span class=\"line\">        <span class=\"comment\"># 都非空,返回左右最小+1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span> + <span class=\"built_in\">min</span>(self.minDepth(root.right), self.minDepth(root.left))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"155-最小栈\">155. 最小栈</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinStack</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.stack = []</span><br><span class=\"line\">        self.minstack = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self, val</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.stack.append(val)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 判断是否为空,防止报错</span></span><br><span class=\"line\">        <span class=\"comment\"># stack=[]</span></span><br><span class=\"line\">        <span class=\"comment\"># if stack:</span></span><br><span class=\"line\">        <span class=\"comment\">#   print(stack[-1])</span></span><br><span class=\"line\">        self.minstack.append(</span><br><span class=\"line\">            <span class=\"built_in\">min</span>(self.minstack[-<span class=\"number\">1</span>],</span><br><span class=\"line\">                val)) <span class=\"keyword\">if</span> self.minstack <span class=\"keyword\">else</span> self.minstack.append(val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: None</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.minstack.pop()</span><br><span class=\"line\">        self.stack.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMin</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.minstack[-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"160-相交链表\">160. 相交链表</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getIntersectionNode</span>(<span class=\"params\">self, headA, headB</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type head1, head1: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        hash_set = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> headA:</span><br><span class=\"line\">            hash_set.add(headA)</span><br><span class=\"line\">            headA = headA.<span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> headB:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> headB <span class=\"keyword\">in</span> hash_set:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> headB</span><br><span class=\"line\">            headB = headB.<span class=\"built_in\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>此方法简单描述就是交叉接尾<br>\n<sup id='cite_ref-1'><a href=\"#cite_note-1\">[1]</a></sup></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getIntersectionNode</span>(<span class=\"params\">self, headA, headB</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type head1, head1: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        p, q = headA, headB</span><br><span class=\"line\">        <span class=\"keyword\">while</span> p != q:</span><br><span class=\"line\">            p = p.<span class=\"built_in\">next</span> <span class=\"keyword\">if</span> p <span class=\"keyword\">else</span> headB</span><br><span class=\"line\">            q = q.<span class=\"built_in\">next</span> <span class=\"keyword\">if</span> q <span class=\"keyword\">else</span> headA</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://www.helloimg.com/images/2022/03/09/RCFKPP.png\" alt=\"\"></p>\n<p><img src=\"https://www.helloimg.com/images/2022/03/09/RCFg7n.png\" alt=\"\"></p>\n<p>当前链表结尾后接上对方链表的头, 同时以两链表头为起点, 可以发现都走了 7 步后在交叉绿点相遇</p>\n</li>\n</ul>\n<h3 id=\"231-2-的幂\">231. 2 的幂</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isPowerOfTwo</span>(<span class=\"params\">self, n</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        a = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> a &lt; n:</span><br><span class=\"line\">            a = a &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a == n</span><br></pre></td></tr></table></figure>\n<h3 id=\"680-验证回文字符串-Ⅱ\">680. 验证回文字符串 Ⅱ</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validPalindrome</span>(<span class=\"params\">self, s</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isPalindrome</span>(<span class=\"params\">s</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> s == s[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        index = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> s[index] == s[-index - <span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index &lt; <span class=\"built_in\">len</span>(s) / <span class=\"number\">2</span>:</span><br><span class=\"line\">                index += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">        is1 = isPalindrome(</span><br><span class=\"line\">            s[index + <span class=\"number\">1</span>:-index]) <span class=\"keyword\">if</span> index != <span class=\"number\">0</span> <span class=\"keyword\">else</span> isPalindrome(s[index + <span class=\"number\">1</span>:])</span><br><span class=\"line\">        is2 = isPalindrome(s[index:-index - <span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> is1 <span class=\"keyword\">or</span> is2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"844-比较含退格的字符串\">844. 比较含退格的字符串</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backspaceCompare</span>(<span class=\"params\">self, s, t</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :type t: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        s_stack = []</span><br><span class=\"line\">        t_stack = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == <span class=\"string\">&#x27;#&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> s_stack:</span><br><span class=\"line\">                    s_stack.pop()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                s_stack.append(i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == <span class=\"string\">&#x27;#&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> t_stack:</span><br><span class=\"line\">                    t_stack.pop()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                t_stack.append(i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s_stack == t_stack</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"977-有序数组的平方\">977. 有序数组的平方</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sortedSquares</span>(<span class=\"params\">self, nums</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            nums[i] = nums[i] * nums[i]</span><br><span class=\"line\"></span><br><span class=\"line\">        nums.sort()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"方法-2\">方法</h2>\n<h3 id=\"投票算法\">投票算法</h3>\n<p>可以看一下多数元素的题解 <sup id='cite_ref-2'><a href=\"#cite_note-2\">[2]</a></sup></p>\n<p>对于出现次数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>大于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>的元素,能抵消其他元素还有余量,最后 candidate 必然是众数</p>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"借物表-28\">借物表</h2>\n<p><a name='cite_note-1' href='#cite_ref-1'>[1]</a>: <a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiang-jiao-lian-biao-by-leetcode-solutio-a8jn/\">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiang-jiao-lian-biao-by-leetcode-solutio-a8jn/</a></p>\n<p><a name='cite_note-2' href='#cite_ref-2'>[2]</a>: <a href=\"https://leetcode-cn.com/problems/majority-element/solution/duo-shu-yuan-su-by-leetcode-solution/\">https://leetcode-cn.com/problems/majority-element/solution/duo-shu-yuan-su-by-leetcode-solution/</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "算法",
                "面试",
                "leetcode",
                "数据结构"
            ]
        },
        {
            "id": "https://weidows.github.io/post/Web/JavaScript/CORS/",
            "url": "https://weidows.github.io/post/Web/JavaScript/CORS/",
            "title": "😡一次解决CORS经验记录.",
            "date_published": "2021-07-08T09:48:32.000Z",
            "content_html": "<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2021-07-11 19:49:07\n * @FilePath: \\Weidowsd:\\Game\\Github\\Blog-private\\source\\_posts\\Web\\JavaScript\\CORS.md\n * @Description:\n * @!: *********************************************************************\n-->\n<ul>\n<li><a href=\"#%E5%85%B3%E8%81%94%E9%A1%B9%E7%9B%AE\">关联项目</a></li>\n<li><a href=\"#%E7%AE%80%E4%BB%8B\">简介</a></li>\n<li><a href=\"#%E5%89%96%E6%9E%90%E5%8E%9F%E6%96%99\">剖析原料</a></li>\n<li><a href=\"#%E9%97%AE%E9%A2%98%E5%B1%95%E7%A4%BA\">问题展示</a>\n<ul>\n<li><a href=\"#%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA\">图片显示</a></li>\n<li><a href=\"#fetch-%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\">fetch 获取数据</a></li>\n<li><a href=\"#canvas-%E6%93%8D%E4%BD%9C\">Canvas 操作</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%9C%80%E6%B1%82\">需求</a></li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">解决方案</a></li>\n<li><a href=\"#%E6%94%B6%E5%B0%BE\">收尾</a></li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"关联项目\"><a href=\"https://github.com/Weidows/awesome-image-collector\">关联项目</a></h2>\n<h2 id=\"简介-8\">简介</h2>\n<p>跨域资源共享 CORS (Cross-origin resource sharing)</p>\n<p>从一个 <code>协议-子域名-主域名</code> 访问另一个 <code>协议-子域名-主域名</code> 下的资源就是 CORS,这三项有任何一项不同就判定为跨域.</p>\n<ul>\n<li>\n<p>下面的主角是 <code>图片</code>,从三个层次剖析,逐渐变难.</p>\n<ol>\n<li>图片显示</li>\n<li>fetch 获取数据</li>\n<li>canvas 操作</li>\n</ol>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"剖析原料\">剖析原料</h2>\n<ul>\n<li>\n<p>现在我这有两个网站,每个网站对应一个图片域名</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">网站\\域名</th>\n<th style=\"text-align:center\">主站域名</th>\n<th style=\"text-align:center\">图片域名</th>\n<th style=\"text-align:center\">图片跨域访问</th>\n<th style=\"text-align:center\">access-control-allow-origin</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://SM.MS\">SM.MS</a></td>\n<td style=\"text-align:center\"><a href=\"http://sm.ms\">sm.ms</a></td>\n<td style=\"text-align:center\"><a href=\"http://i.loli.net\">i.loli.net</a></td>\n<td style=\"text-align:center\">✔</td>\n<td style=\"text-align:center\">*</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">网页版 QQ 收藏</td>\n<td style=\"text-align:center\"><a href=\"http://sharechain.qq.com\">sharechain.qq.com</a></td>\n<td style=\"text-align:center\"><a href=\"http://shp.qpic.cn\">shp.qpic.cn</a></td>\n<td style=\"text-align:center\">❌</td>\n<td style=\"text-align:center\">❌</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>如何查看图片域名是否允许跨域,以及允许跨域域名范围</p>\n<ol>\n<li>\n<p>在主站域名网页下打开<code>控制台-网页</code> 然后刷新网页,找到图片的请求</p>\n</li>\n<li>\n<p>然后看请求的标头 -&gt; 响应头,是否含有 <code>access-control-allow-origin</code> 这一项</p>\n</li>\n<li>\n<p>没有的话就是没开启 CORS,有的话右面的参数就是允许 CORS 的域名范围.</p>\n</li>\n</ol>\n<img src=\"https://www.helloimg.com/images/2022/02/27/GVLBQT.png\" alt=\"20210709232207\" />\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"问题展示-2\">问题展示</h2>\n<h3 id=\"图片显示\">图片显示</h3>\n<ul>\n<li>\n<p>图片显示不受 CORS 是否开启影响,这两个图片域名在任何域名下都可以显示</p>\n<p>如图本地域名可以显示这两个域名下的图片 (各一张) 🥵</p>\n<img src=\"https://www.helloimg.com/images/2022/02/27/GV4xFQ.png\" alt=\"20210709222815\" />\n</li>\n</ul>\n<h3 id=\"fetch-获取数据\">fetch 获取数据</h3>\n<ul>\n<li>\n<p><code>i.loli.net</code> 这个域名开启了 CORS</p>\n<p>并允许任何域名都可以跨域获取数据 (access-control-allow-origin: *)</p>\n</li>\n<li>\n<p>如下,在两个主站域名测试都可以得到如下结果:</p>\n<img src=\"https://www.helloimg.com/images/2022/02/27/GVPMJn.png\" alt=\"20210709221705\" />\n</li>\n<li>\n<p>变个卦:</p>\n<p>如果服务端修改 access-control-allow-origin 为 <code>https://sm.ms</code></p>\n<p>这个情况下,只能在 <a href=\"https://sm.ms\">https://sm.ms</a> 网页内可以 fetch 成功.</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>服务端没开启 CORS 的 <code>shp.qpic.cn</code></p>\n<p>除了本身域名 <a href=\"http://shp.qpic.cn\">shp.qpic.cn</a>,任何域名都 <code>没有权限获取数据</code> (可以显示但是无法 fetch)</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Access</span> <span class=\"keyword\">to</span> image at <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">from</span> origin <span class=\"string\">&#x27;xxx&#x27;</span> has been blocked <span class=\"keyword\">by</span> CORS <span class=\"keyword\">policy</span>: <span class=\"keyword\">No</span> <span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class=\"keyword\">header</span> <span class=\"keyword\">is</span> present <span class=\"keyword\">on</span> the requested resource.</span><br></pre></td></tr></table></figure>\n<img src=\"https://www.helloimg.com/images/2022/02/27/GV4Jzu.png\" alt=\"20210709222317\" />\n</li>\n</ul>\n<hr>\n<h3 id=\"Canvas-操作\">Canvas 操作</h3>\n<ul>\n<li>\n<p>Canvas 操作 img 要求最严格</p>\n<ol>\n<li>\n<p>要求图片域名开启 CORS,并在 CORS 允许的域名下,服务端才可以响应数据</p>\n</li>\n<li>\n<p>img 标签设置属性 <code>crossorigin='anonymous'</code>,表示想要跨域,否则会报错 canvas 被污染</p>\n</li>\n</ol>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"需求-2\">需求</h2>\n<ul>\n<li>\n<p>现在有一个需求:</p>\n<p>在 <code>sharechain.qq.com</code> 下获取 <code>shp.qpic.cn</code> 的图片数据并通过 canvas 处理</p>\n<p>-&gt; 跨域,而且服务端不允许 CORS</p>\n<p>-&gt; 需要解决 canvas 跨域污染.</p>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"解决方案-3\">解决方案</h2>\n<ul>\n<li>\n<p>寻找了很多资料,这里贴上优秀文章</p>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000011145364\">前端常见跨域解决方案（全）</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://t.zoukankan.com/goloving-p-12857575.html\">将在线图片转换成 base64 踩坑记录及静态资源跨域及缓存的处理</a></p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>最终答案:</p>\n<p><code>纯前端无法解决跨域资源获取问题</code></p>\n<p>最快捷方案还是需要服务端开启… (显然是不可能)</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p><code>但是</code>,找到了捷径: 浏览器插件可以直接解决跨域问题</p>\n<blockquote>\n<p><a href=\"https://microsoftedge.microsoft.com/addons/detail/cors-unblock/hkjklmhkbkdhlgnnfbbcihcajofmjgbh?hl=zh-CN\">CORS Unblock</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://microsoftedge.microsoft.com/addons/detail/allow-cors-accesscontro/bhjepjpgngghppolkjdhckmnfphffdag?hl=zh-CN\">Allow CORS: Access-Control-Allow-Origin</a></p>\n</blockquote>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"收尾-2\">收尾</h2>\n<p>现在,可以成功 fetch 跨域图片数据了,再把 img 设置 crossorigin=&quot;anonymous&quot;就完事了 <code>\\&gt;A&lt;/</code></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "javascript",
                "大前端",
                "爬虫",
                "cors",
                "面试"
            ]
        }
    ]
}