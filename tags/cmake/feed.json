{
    "version": "https://jsonfeed.org/version/1",
    "title": "⭐️齐下无贰⭐️ • All posts by \"cmake\" tag",
    "description": "May all the beauty be bless.✨",
    "home_page_url": "https://weidows.github.io",
    "items": [
        {
            "id": "https://weidows.github.io/post/others/cpp/C_Configuration/",
            "url": "https://weidows.github.io/post/others/cpp/C_Configuration/",
            "title": "👌茅塞顿开之C/C++-VScode-xmake",
            "date_published": "2020-10-03T14:46:17.000Z",
            "content_html": "<!--\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2022-02-07 01:04:03\n * @FilePath: \\Blog-private\\source\\_posts\\others\\cpp\\C_Configuration.md\n-->\n<ul>\n<li><a href=\"#%E7%BC%96%E8%AF%91%E5%99%A8%E4%BB%8B%E7%BB%8D\">编译器介绍</a></li>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85\">环境安装</a></li>\n<li><a href=\"#%E5%A4%9A%E7%A7%8D%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F\">多种运行方式</a>\n<ul>\n<li><a href=\"#%E6%89%80%E7%94%A8%E4%BB%A3%E7%A0%81\">所用代码</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E4%B8%80\">方法一</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C\">方法二</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E4%B8%89\">方法三</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E5%9B%9B\">方法四</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8F%82%E8%80%83-%E6%8E%A8%E8%8D%90\">参考-推荐</a>\n<ul>\n<li><a href=\"#cc%E5%BC%80%E5%8F%91%E6%A8%A1%E6%9D%BF\">C/C++开发模板</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"编译器介绍\">编译器介绍</h2>\n<p>C/C++编译器好多种(因为编译依赖平台),而且名字起得特别扭,列几个常见的理理思路.</p>\n<blockquote>\n<p>有一定基础的话可以根据此网页了解,并且推荐下此编译器集合: <a href=\"https://winlibs.com/\">WinLibs standalone build of GCC and MinGW-w64 for Windows</a></p>\n</blockquote>\n<ul>\n<li>\n<p>gcc + MinGW-w64</p>\n<ul>\n<li>\n<p><code>gcc</code>(GNU Compiler Collection),多种语言(C/C++,Object-c,Fortran,D)的编译器</p>\n</li>\n<li>\n<p>gdb(GNU Project debugger),调试器</p>\n</li>\n<li>\n<p>MinGW , <code>MinGW-w64</code> (常叫做 <code>MinGW64</code>),win 平台的 C 库</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MinGW-w64是一套可自由使用和自由发布的Windows特定头文件和使用GNU工具集导入库的集合，它支持GCC编译器在Windows系统上创建的。它有分叉的。<span class=\"number\">2007</span>年，为了支持<span class=\"number\">64</span>位和新的api，此后被广泛使用和分布。</span><br><span class=\"line\"></span><br><span class=\"line\">MinGW 的全称是：Minimalist GNU <span class=\"keyword\">on</span> Windows 。它实际上是将经典的开源 C语言 编译器 GCC 移植到了 Windows 平台下，并且包含了 Win32API ，因此可以将源代码编译为可在 Windows 中运行的可执行程序。而且还可以使用一些 Windows 不具备的，Linux平台下的开发工具。一句话来概括：MinGW 就是 GCC 的 Windows 版本</span><br><span class=\"line\"></span><br><span class=\"line\">以上是 MinGW 的介绍，MinGW-w64 与 MinGW 的区别在于 MinGW 只能编译生成<span class=\"number\">32</span>位可执行程序，而 MinGW-w64 则可以编译生成 <span class=\"number\">64</span>位 或 <span class=\"number\">32</span>位 可执行程序。</span><br><span class=\"line\"></span><br><span class=\"line\">正因为如此，MinGW 现已被 MinGW-w64 所取代，且 MinGW 也早已停止了更新</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这几个结合起来就是 win 平台的 gcc 编译器了,一般在网上找的 mingw64 编译器会包含上面的三个 (你可以在 Dev C++中找到 mingw64 编译器)</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>llvm</p>\n<ul>\n<li>Clang</li>\n<li>LLDB</li>\n<li>OpenMP</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LLVM 是伊利诺伊大学的一个开源项目，LLVM 提供了完整的 C<span class=\"regexp\">/C++工具链，Clang 属于其中的一个子项目，是 LLVM 原生的 ” C/</span>C++/Objective-C” 编译器前端，Clang 负责完成词法分析和语法分析，并将分析结果转换为 Abstract Syntax Tree ( 抽象语法树 ) ，最后使用 LLVM 作为后端代码的生成器。</span><br><span class=\"line\"></span><br><span class=\"line\">Clang 的开发目标是提供一个可以替代 GCC 的前端编译器。与 GCC 相比，Clang 是一个重新设计的编译器前端，具有一系列优点，例如模块化，代码简单易懂，占用内存小以及容易扩展和重用等。由于 Clang 在设计上的优异性，使得 Clang 非常适合用于设计源代码级别的分析和转化工具。Clang 也已经被应用到一些重要的开发领域，如 Static Analysis 是一个基于 Clang 的静态代码分析工具。还有 vim 中的插件 YouCompleteMe 就是利用 Clang 完成语法分析并给出精确的自动补全和语法错误提示（即静态分析）。</span><br><span class=\"line\"></span><br><span class=\"line\">作者：衣介书生</span><br><span class=\"line\">链接：https:<span class=\"regexp\">//</span>www.jianshu.com<span class=\"regexp\">/p/</span><span class=\"number\">861</span>c1a630059</span><br><span class=\"line\">来源：简书</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>msvc</p>\n<p>微软家的编译器, visual studio 内置的,通用性不强.</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>到这里再提一嘴这个工具: <a href=\"https://winlibs.com/\">WinLibs standalone build of GCC and MinGW-w64 for Windows</a></p>\n<p>它内置了上面提到的 gcc/llvm 等工具,比较大所以库很丰富</p>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"环境安装\">环境安装</h2>\n<p>可以先去看下面的<code>多种运行方式</code>,再来找合适的环境.</p>\n<ul>\n<li>\n<p>编译器</p>\n<p>安装上面提到的 <code>winlibs</code> 或者 <code>mingw64 / msvc / llvm</code>…</p>\n<p>太过基础,不会百度.</p>\n</li>\n<li>\n<p>编译工具</p>\n<p>这里选用 <code>xmake</code>,不用 cmake</p>\n<p>依赖管理工具用 xmake 自带的 xrepo,需要的话可以另装 <code>vcpkg</code></p>\n</li>\n<li>\n<p>VScode 内插件</p>\n<p>必须: <code>C/C++</code></p>\n<p>方法二: <code>Code Runner</code></p>\n<p>方法四: <code>xmake</code></p>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"多种运行方式\">多种运行方式</h2>\n<p>排序: 简单 -&gt; 困难</p>\n<h3 id=\"所用代码\">所用代码</h3>\n<ul>\n<li>\n<p>单文件 <code>main.cpp</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>多文件</p>\n<ul>\n<li>\n<p><code>0.cpp</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>0.h</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>1.cpp</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;0.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello-1,我,%d&quot;</span>, <span class=\"built_in\">a</span>());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"方法一-2\">方法一</h3>\n<p>最原始的运行方式,用不着解释:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ <span class=\"selector-tag\">main</span><span class=\"selector-class\">.cpp</span> -o <span class=\"selector-tag\">main</span>.exe</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"方法二-2\">方法二</h3>\n<ul>\n<li>\n<p>上面的虽简单但是繁琐</p>\n<p>于是 vscode 里有个插件 <code>code runner</code> 可以自动产生上面的命令,而且可以自定义,下面逐步讲解完善:</p>\n<hr>\n</li>\n<li>\n<p>比如中文乱码问题:</p>\n<p>win 系统中终端默认按照 GBK 编码显示,但是程序输出是 UTF-8 编码的(除非源文件是 GBK 编码,但是不建议这么做)</p>\n<p>可以在代码运行前把终端编码页转到 utf-8 就行了</p>\n<p>修改 vscode 配置文件,<code>chcp 65001</code>就是转到 utf-8 页</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;code-runner.executorMap&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;c&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; ./$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;cpp&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; ./$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>转移生成文件</p>\n<p>默认生成的 xxx.exe 在同级目录,很影响观瞻,把它挪到 <code>workspaceRoot/build/</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;code-runner.executorMap&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;c&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; gcc $fileName -o $workspaceRoot\\\\build\\\\$fileNameWithoutExt &amp;&amp; $workspaceRoot\\\\build\\\\$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;cpp&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; g++ $fileName -o $workspaceRoot\\\\build\\\\$fileNameWithoutExt &amp;&amp; $workspaceRoot\\\\build\\\\$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>再如多文件编译链接问题:</p>\n<p>默认的 Code Runner 执行的命令只能编译运行一个 C/C++源文件</p>\n<p>但是很多情况下需要编译链接多文件的项目,可以修改成这样:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;code-runner.executorMap&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;c&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; gcc *.c -I . -o $workspaceRoot\\\\build\\\\$fileNameWithoutExt &amp;&amp; $workspaceRoot\\\\build\\\\$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;cpp&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; g++ *.cpp -I . -o $workspaceRoot\\\\build\\\\$fileNameWithoutExt &amp;&amp; $workspaceRoot\\\\build\\\\$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意修改后目录下所有源文件都参与编译(不管项目是不是需要它)</p>\n</li>\n<li>\n<p>再如编译时链接库 (可以这么干,但是并不好)</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;code-runner.executorMap&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;c&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; gcc *.c -I . -l glut32 -l glu32 -l opengl32 -o $workspaceRoot\\\\build\\\\$fileNameWithoutExt &amp;&amp; $workspaceRoot\\\\build\\\\$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;cpp&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; g++ *.cpp -I . -l glut32 -l glu32 -l opengl32 -o $workspaceRoot\\\\build\\\\$fileNameWithoutExt &amp;&amp; $workspaceRoot\\\\build\\\\$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>此项配置适用性很广</p>\n<p>文件堆放可以随意,文件名/目录名中<code>可以含有中文</code></p>\n<p>缺点是无法调试,对需要依赖库的工程性项目不友好</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"方法三-2\">方法三</h3>\n<ul>\n<li>\n<p>通过 vscode 本身,也是可以 run/debug 的</p>\n<p>在 vscode 内右键文件内容,有个<code>生成和调试活动文件</code>,不用动回车几下</p>\n<p>会生成下面两个文件,然后应该就能 run/debug 了</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">|&gt; .vscode</span></span><br><span class=\"line\">  <span class=\"string\">|&gt; launch.json</span></span><br><span class=\"line\">  <span class=\"string\">|&gt; task.json</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<details>\n  <summary> 默认生成文件内容 </summary>\n<hr>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 IntelliSense 了解相关属性。</span></span><br><span class=\"line\">  <span class=\"comment\">// 悬停以查看现有属性的描述。</span></span><br><span class=\"line\">  <span class=\"comment\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;g++.exe - 生成和调试活动文件&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppdbg&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\build\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">&quot;stopAtEntry&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;environment&quot;</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">&quot;externalConsole&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;MIMode&quot;</span>: <span class=\"string\">&quot;gdb&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;miDebuggerPath&quot;</span>: <span class=\"string\">&quot;gdb.exe&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;setupCommands&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;为 gdb 启用整齐打印&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;ignoreFailures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">&quot;preLaunchTask&quot;</span>: <span class=\"string\">&quot;C/C++: g++.exe 生成活动文件&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;tasks&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppbuild&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;C/C++: g++.exe 生成活动文件&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;D:\\\\Game\\\\Scoop\\\\apps\\\\winlibs-mingw-llvm\\\\current\\\\bin\\\\g++.exe&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;-fdiagnostics-color=always&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;-g&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;-o&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">&quot;options&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;problemMatcher&quot;</span>: [<span class=\"string\">&quot;$gcc&quot;</span>],</span><br><span class=\"line\">      <span class=\"attr\">&quot;group&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;kind&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;isDefault&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;detail&quot;</span>: <span class=\"string\">&quot;调试器生成的任务。&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.0.0&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n</li>\n</ul>\n</li>\n<li>\n<p>介绍一下其调用流程:</p>\n<p>按 F5 调试 -&gt; launch.json -&gt; preLaunchTask -&gt; tasks.json -&gt; g++ -&gt; main.cpp -&gt; main.exe</p>\n<p>反过来看,最先执行的是 task.json 里的 g++.exe (看 args 那里跟上面的第二种运行方式里很像)</p>\n<p>g++ 生成了 main.exe 文件,然后 launch.JSON 中的 gdb.exe 接过来 main.exe 开始调试</p>\n</li>\n<li>\n<p>跟上面方法二类似,可以修改参数来添加功能</p>\n</li>\n<li>\n<p>launch.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 IntelliSense 了解相关属性。</span></span><br><span class=\"line\">  <span class=\"comment\">// 悬停以查看现有属性的描述。</span></span><br><span class=\"line\">  <span class=\"comment\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;g++.exe - 生成和调试活动文件&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppdbg&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\build\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">&quot;stopAtEntry&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;environment&quot;</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">&quot;externalConsole&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;MIMode&quot;</span>: <span class=\"string\">&quot;gdb&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;miDebuggerPath&quot;</span>: <span class=\"string\">&quot;gdb.exe&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;setupCommands&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;为 gdb 启用整齐打印&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;ignoreFailures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">&quot;preLaunchTask&quot;</span>: <span class=\"string\">&quot;C/C++: g++.exe 生成活动文件&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>tasks.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;tasks&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppbuild&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;C/C++: g++.exe 生成活动文件&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;g++&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;-g&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;*.cpp&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;-I&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;-o&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\build\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">&quot;options&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;problemMatcher&quot;</span>: [<span class=\"string\">&quot;$gcc&quot;</span>],</span><br><span class=\"line\">      <span class=\"attr\">&quot;group&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;kind&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;isDefault&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>再介绍一下利弊</p>\n<p>比第二个方法自定义性更强,<code>可以直接输出中文不乱码</code></p>\n<p>缺点也很上头,<code>源文件名字/路径中不能带中文</code> (不信可以试试,直接报错)</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"方法四\">方法四</h3>\n<ul>\n<li>\n<p>上面的几个方法比较面向小 demo,最后这个是<code>面向工程性</code>的 (需要一定能力基础)</p>\n<p>使用 <code>xmake.lua</code> 替换了上面方法中的拼接参数行为,而且可以通过 xmake 管理链接库/编译器等,比如:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 引用.lib形式的静态库会报错,所以要用shared动态链接库版本</span></span><br><span class=\"line\">add_requires(<span class=\"string\">&quot;freeglut&quot;</span>,&#123;configs = &#123;shared = <span class=\"literal\">true</span>&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 全局添加依赖</span></span><br><span class=\"line\">add_packages(<span class=\"string\">&quot;freeglut&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 同一 target 只能有一个 main(),否则需要另起名字</span></span><br><span class=\"line\">target(<span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">    set_kind(<span class=\"string\">&quot;binary&quot;</span>)</span><br><span class=\"line\">    add_files(<span class=\"string\">&quot;src/test/*.cpp&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 单个添加依赖,当已经全局添加时,会产生歧义,添加静态版本</span></span><br><span class=\"line\">    add_packages(<span class=\"string\">&quot;freeglut&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 更改编译器,比如 gcc/clang/msvc...</span></span><br><span class=\"line\">    add_toolchains(<span class=\"string\">&quot;gcc&quot;</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>深入过程中试过其他的工具链: cmake / vcpkg / conan, 为什么选用的 <code>xmake + xrepo + vcpkg</code> ? 对比一下吧</p>\n<p>cmake 语法很怪,学习成本高配置难,尤其是与其搭配的 vcpkg/conan 安装的依赖引入比较棘手,网上对它的诟病很多</p>\n<p>conan 库少,而且结合 cmake 体验起来并不如 xmake+xrepo</p>\n<p>xmake 自带 xrepo,而且 xrepo 可以装 vcpkg/conan/brew 的库,而且支持中文路径/文件名</p>\n<p>再装个 vcpkg 用来搜索库以及提供给 xrepo 调用安装库 (这个需要安装 visualstudio buildtools 英文版本)</p>\n</li>\n<li>\n<p>坏处</p>\n<p>网上用 cmake 的人/项目很多,对于 xmake 的教程还是比较稀缺</p>\n<p>不过能走到这步的大都可以自行探索了…</p>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"借物表-22\">借物表</h2>\n<h3 id=\"C-C-开发模板\"><a href=\"https://github.com/Weidows/C--\">C/C++开发模板</a></h3>\n<p>参考了很多文章/教程,迭代了数个版本,下面是脚印</p>\n<blockquote>\n<p><a href=\"https://tboox.org/cn/2019/12/13/quickstart-10-target-deps/\">xmake 从入门到精通 10：多个子工程目标的依赖配置</a><br>\n<a href=\"https://www.bilibili.com/video/BV1fy4y1b7TC?p=23\">基于 VSCode 和 CMake 实现 C/C++开发 | Linux 篇</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/67854244\">xmake vs cmake 对比分析</a><br>\n<a href=\"https://github.com/SFUMECJF/cmake-examples-Chinese\">SFUMECJF/cmake-examples-Chinese</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/79872095\">打包一沓开源的 C/C++ 包管理工具送给你！</a></p>\n</blockquote>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "vscode",
                "备忘录",
                "c",
                "cmake"
            ]
        }
    ]
}