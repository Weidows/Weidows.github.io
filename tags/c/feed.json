{
    "version": "https://jsonfeed.org/version/1",
    "title": "⭐️齐下无贰⭐️ • All posts by \"c\" tag",
    "description": "May all the beauty be bless.✨",
    "home_page_url": "https://weidows.github.io",
    "items": [
        {
            "id": "https://weidows.github.io/post/experience/basic/OpenGL/",
            "url": "https://weidows.github.io/post/experience/basic/OpenGL/",
            "title": "🥵OpenGL-xmake- 蚌埠住了",
            "date_published": "2021-09-19T14:37:25.000Z",
            "content_html": "<h1>OpenGL-xmake- 蚌埠住了</h1>\n<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2022-02-23 03:21:58\n * @FilePath: \\Blog-private\\source\\_posts\\experience\\basic\\OpenGL.md\n * @Description:\n * @!: *********************************************************************\n--><blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li><a href=\"#opengl-xmake-%E8%9A%8C%E5%9F%A0%E4%BD%8F%E4%BA%86\">OpenGL-xmake- 蚌埠住了</a>\n<ul>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93\">代码仓库</a></li>\n<li><a href=\"#python\">Python</a>\n<ul>\n<li><a href=\"#%E6%8A%A5%E9%94%99\">报错</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95\">测试</a></li>\n</ul>\n</li>\n<li><a href=\"#c\">C</a>\n<ul>\n<li><a href=\"#xmake-%E5%BC%95%E5%85%A5%E5%BA%93\">xmake- 引入库</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95-1\">测试</a></li>\n<li><a href=\"#%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81%E5%BA%93\">实例代码库</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p>学校开了图形学这门课程, 让我们配置下环境</p>\n<p>老师给的是 VS + OpenGL + C/C++ + 复制库文件 的方式</p>\n</li>\n<li>\n<p>转路</p>\n<ol>\n<li>\n<p><code>VScode + Python + pyopengl 库</code></p>\n</li>\n<li>\n<p><code>Vscode + C++ + xmake(需要 VisualStudio) + 各种库</code> (推荐方法)</p>\n</li>\n</ol>\n<hr>\n</li>\n<li>\n<p>网上找了找, 并不是能很顺畅的捅下来 (因为依赖项比较杂)</p>\n</li>\n</ul>\n<h2 id=\"代码仓库\"><a href=\"https://github.com/Weidows/C--/tree/master/src/OpenGL\">代码仓库</a></h2>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"Python-3\">Python</h2>\n<ul>\n<li>\n<p>先装 vscode 和 Python / anaconda, 这俩没问题</p>\n</li>\n<li>\n<p>通过 pip (conda 不行) 安装 <code>pyopengl</code> 库</p>\n<ul>\n<li>\n<p>有的教程装的是 <code>pyglet</code>, 这个库官方解释是 “pyglet is a cross-platform games and multimedia package.”</p>\n</li>\n<li>\n<p>虽然 <a href=\"http://pyglet.gl\">pyglet.gl</a> 可以调 OpenGL API, 但是鉴于 Ctrl CV 工作, 还是老老实实用 pyopengl 库吧</p>\n</li>\n</ul>\n<hr>\n</li>\n</ul>\n<h3 id=\"报错 -2\">报错</h3>\n<p>直接通过 pip 在线安装的话是装的 32 位的库, 在 64 位机子上跑不起来</p>\n<blockquote>\n<p>报错 <a href=\"https://blog.csdn.net/feilong_csdn/article/details/61421002\">“OpenGL.error.NullFunctionError: Attempt to call an undefined function”解决方案</a></p>\n</blockquote>\n<p>必须去下载适合本机的离线包安装: <a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyopengl\">下载地址</a></p>\n<p>比如我是 win_64,py_3.8 ; 需要下载的是: <code>PyOpenGL-3.1.5-cp38-cp38-win_amd64.whl</code>, 然后安装</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把之前的版本先卸载, 否则安装也无效</span></span><br><span class=\"line\"><span class=\"attribute\">pip</span> uninstall pyopengl</span><br><span class=\"line\"><span class=\"attribute\">pip</span> install PyOpenGL-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">5</span>-cp<span class=\"number\">38</span>-cp<span class=\"number\">38</span>-win_amd<span class=\"number\">64</span>.whl</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"测试 -2\">测试</h3>\n<p>画个静态茶壶, 就是文章封面图</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GL <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLU <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLUT <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drawFunc</span>():</span></span><br><span class=\"line\">    glClear(GL_COLOR_BUFFER_BIT)</span><br><span class=\"line\">    glutWireTeapot(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    glFlush()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">glutInit()</span><br><span class=\"line\">glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA)</span><br><span class=\"line\">glutInitWindowSize(<span class=\"number\">400</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数为 b 类型而不是 string</span></span><br><span class=\"line\">glutCreateWindow(<span class=\"string\">b&quot;Teapot&quot;</span>)</span><br><span class=\"line\">glutDisplayFunc(drawFunc)</span><br><span class=\"line\">glutMainLoop()</span><br></pre></td></tr></table></figure>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"C\">C</h2>\n<p>如果你喜欢 VScode 调试 C/C++, 而不想用比较复杂的 Visual Studio</p>\n<p>如果你想通过简单的配置就让 VScode 能调试 OpenGL</p>\n<p>恭喜, 马上就好!</p>\n<p>首先, 按照我另一篇文章: <a href=\"../../../others/cpp/C_Configuration\">👌 茅塞顿开之 C/C+±VScode-xmake</a> 配置好 <code>vscode + C/C++</code> 的开发环境</p>\n<hr>\n<h3 id=\"xmake- 引入库\">xmake- 引入库</h3>\n<p>xmake 自带的 xrepo 可以安装 xrepo/vcpkg/conan 的库</p>\n<ul>\n<li>\n<p>需要注意一下:</p>\n<p>虽然我这里使用 vscode + xmake, 但是安装依赖时仍需要调用 visualstudio, 必须安装</p>\n<p>需要安装的有两个: <code>buildtools + visualstudio community</code></p>\n<img src=\"https://www.helloimg.com/images/2022/02/27/GVLoVo.png\" alt=\"20211120115814\" />\n<p>buildtools 也就是生成工具只有那一个, 裸装就好, 里面的东西不用装</p>\n<p>visualstudio community 的话什么版本都行,xmake 都支持了, 它里面必须装 <code>C++ 桌面开发</code>, 不能装成其他的</p>\n<img src=\"https://www.helloimg.com/images/2022/02/27/GVA21S.png\" alt=\"20211120115909\" />\n<p>语言包记得选中 + 英! 不然识别不到</p>\n<img src=\"https://www.helloimg.com/images/2022/02/27/GVSD4n.png\" alt=\"20211120120254\" />\n</li>\n</ul>\n<hr>\n<h3 id=\"测试 -3\">测试</h3>\n<ul>\n<li>\n<p>xmake.lua</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 引用.lib 形式的静态库会报错, 所以要用 shared 动态链接库版本</span></span><br><span class=\"line\">add_requires(<span class=\"string\">&quot;freeglut&quot;</span>,&#123;configs = &#123;shared = <span class=\"literal\">true</span>&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 全局添加依赖</span></span><br><span class=\"line\">add_packages(<span class=\"string\">&quot;freeglut&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">target(<span class=\"string\">&quot;MazeGame&quot;</span>)</span><br><span class=\"line\">    set_kind(<span class=\"string\">&quot;binary&quot;</span>)</span><br><span class=\"line\">    add_files(<span class=\"string\">&quot;test.cpp&quot;</span>)</span><br><span class=\"line\">target_end()</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>test.cpp</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;GL/glut.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Initial</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  glMatrixMode(GL_PROJECTION); <span class=\"comment\">// 设置投影参数，表示下面进行投影变换。若改 GL_PROJECTION 为 GL_MODEVIEW 则进行视图变换。</span></span><br><span class=\"line\">  glLoadIdentity();            <span class=\"comment\">// 通常我们在需要进行投影变换时要把当前矩形设置为单位矩阵，即 glLoadIdentity()</span></span><br><span class=\"line\">  gluOrtho2D(<span class=\"number\">0.0</span>, <span class=\"number\">200.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">200.0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  glClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">  glPushMatrix(); <span class=\"comment\">// 操作矩阵堆栈, 调用函数，相当于把矩阵放到堆栈上 </span></span><br><span class=\"line\">  glColor3f(<span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">  glTranslated(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  glTranslated(<span class=\"number\">70</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  glRotated(<span class=\"number\">-90</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  glScaled(<span class=\"number\">0.25</span>, <span class=\"number\">0.25</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">  glTranslated(<span class=\"number\">-100</span>, <span class=\"number\">-100</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  glBegin(GL_POLYGON);</span><br><span class=\"line\">  glVertex2f(<span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">  glVertex2f(<span class=\"number\">150</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">  glVertex2f(<span class=\"number\">100</span>, <span class=\"number\">150</span>);</span><br><span class=\"line\">  glEnd();</span><br><span class=\"line\">  glPopMatrix();</span><br><span class=\"line\"></span><br><span class=\"line\">  glBegin(GL_POLYGON); <span class=\"comment\">//opengl 要求指定顶点的位置必须在 glBegin() 后面，同时在 glEnd()后面。</span></span><br><span class=\"line\">  glVertex2f(<span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">  glVertex2f(<span class=\"number\">150</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">  glVertex2f(<span class=\"number\">100</span>, <span class=\"number\">150</span>);</span><br><span class=\"line\">  glEnd();</span><br><span class=\"line\">  glFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  glutInit(&amp;argc, argv);</span><br><span class=\"line\">  glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); <span class=\"comment\">// 使用单缓存模式，如果 GLUT_DOUBLE 则为双缓存模式</span></span><br><span class=\"line\">  glutInitWindowSize(<span class=\"number\">600</span>, <span class=\"number\">600</span>);                <span class=\"comment\">// 设置窗口大小</span></span><br><span class=\"line\">  glutInitWindowPosition(<span class=\"number\">100</span>, <span class=\"number\">100</span>);            <span class=\"comment\">// 设置窗口位置</span></span><br><span class=\"line\">  glutCreateWindow(<span class=\"string\">&quot;Triangle&quot;</span>);</span><br><span class=\"line\">  glutDisplayFunc(Display);</span><br><span class=\"line\">  Initial();</span><br><span class=\"line\">  glutMainLoop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"实例代码库\"><a href=\"https://github.com/Weidows/C--\">实例代码库</a></h3>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "python",
                "opengl",
                "c",
                "conan"
            ]
        },
        {
            "id": "https://weidows.github.io/post/others/cpp/C_Configuration/",
            "url": "https://weidows.github.io/post/others/cpp/C_Configuration/",
            "title": "👌茅塞顿开之 C/C++-VScode-xmake",
            "date_published": "2020-10-03T14:46:17.000Z",
            "content_html": "<!--\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2022-02-07 01:04:03\n * @FilePath: \\Blog-private\\source\\_posts\\others\\cpp\\C_Configuration.md\n-->\n<ul>\n<li><a href=\"#%E7%BC%96%E8%AF%91%E5%99%A8%E4%BB%8B%E7%BB%8D\">编译器介绍</a></li>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85\">环境安装</a></li>\n<li><a href=\"#%E5%A4%9A%E7%A7%8D%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F\">多种运行方式</a>\n<ul>\n<li><a href=\"#%E6%89%80%E7%94%A8%E4%BB%A3%E7%A0%81\">所用代码</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E4%B8%80\">方法一</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C\">方法二</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E4%B8%89\">方法三</a></li>\n<li><a href=\"#%E6%96%B9%E6%B3%95%E5%9B%9B\">方法四</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8F%82%E8%80%83-%E6%8E%A8%E8%8D%90\">参考 - 推荐</a>\n<ul>\n<li><a href=\"#cc%E5%BC%80%E5%8F%91%E6%A8%A1%E6%9D%BF\">C/C++ 开发模板</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"编译器介绍\">编译器介绍</h2>\n<p>C/C++ 编译器好多种(因为编译依赖平台), 而且名字起得特别扭, 列几个常见的理理思路.</p>\n<blockquote>\n<p>有一定基础的话可以根据此网页了解, 并且推荐下此编译器集合: <a href=\"https://winlibs.com/\">WinLibs standalone build of GCC and MinGW-w64 for Windows</a></p>\n</blockquote>\n<ul>\n<li>\n<p>gcc + MinGW-w64</p>\n<ul>\n<li>\n<p><code>gcc</code>(GNU Compiler Collection), 多种语言 (C/C++,Object-c,Fortran,D) 的编译器</p>\n</li>\n<li>\n<p>gdb(GNU Project debugger), 调试器</p>\n</li>\n<li>\n<p>MinGW , <code>MinGW-w64</code> (常叫做 <code>MinGW64</code>),win 平台的 C 库</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MinGW-w64 是一套可自由使用和自由发布的 Windows 特定头文件和使用 GNU 工具集导入库的集合，它支持 GCC 编译器在 Windows 系统上创建的。它有分叉的。<span class=\"number\">2007</span>年，为了支持 <span class=\"number\">64</span> 位和新的 api，此后被广泛使用和分布。</span><br><span class=\"line\"></span><br><span class=\"line\">MinGW 的全称是：Minimalist GNU <span class=\"keyword\">on</span> Windows 。它实际上是将经典的开源 C 语言 编译器 GCC 移植到了 Windows 平台下，并且包含了 Win32API ，因此可以将源代码编译为可在 Windows 中运行的可执行程序。而且还可以使用一些 Windows 不具备的，Linux 平台下的开发工具。一句话来概括：MinGW 就是 GCC 的 Windows 版本 </span><br><span class=\"line\"></span><br><span class=\"line\"> 以上是 MinGW 的介绍，MinGW-w64 与 MinGW 的区别在于 MinGW 只能编译生成 <span class=\"number\">32</span> 位可执行程序，而 MinGW-w64 则可以编译生成 <span class=\"number\">64</span>位 或 <span class=\"number\">32</span>位 可执行程序。</span><br><span class=\"line\"></span><br><span class=\"line\">正因为如此，MinGW 现已被 MinGW-w64 所取代，且 MinGW 也早已停止了更新</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>这几个结合起来就是 win 平台的 gcc 编译器了, 一般在网上找的 mingw64 编译器会包含上面的三个 (你可以在 Dev C++ 中找到 mingw64 编译器)</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>llvm</p>\n<ul>\n<li>Clang</li>\n<li>LLDB</li>\n<li>OpenMP</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LLVM 是伊利诺伊大学的一个开源项目，LLVM 提供了完整的 C<span class=\"regexp\">/C++ 工具链，Clang 属于其中的一个子项目，是 LLVM 原生的 ” C/</span>C++/Objective-C” 编译器前端，Clang 负责完成词法分析和语法分析，并将分析结果转换为 Abstract Syntax Tree (抽象语法树) ，最后使用 LLVM 作为后端代码的生成器。</span><br><span class=\"line\"></span><br><span class=\"line\">Clang 的开发目标是提供一个可以替代 GCC 的前端编译器。与 GCC 相比，Clang 是一个重新设计的编译器前端，具有一系列优点，例如模块化，代码简单易懂，占用内存小以及容易扩展和重用等。由于 Clang 在设计上的优异性，使得 Clang 非常适合用于设计源代码级别的分析和转化工具。Clang 也已经被应用到一些重要的开发领域，如 Static Analysis 是一个基于 Clang 的静态代码分析工具。还有 vim 中的插件 YouCompleteMe 就是利用 Clang 完成语法分析并给出精确的自动补全和语法错误提示（即静态分析）。</span><br><span class=\"line\"></span><br><span class=\"line\">作者：衣介书生 </span><br><span class=\"line\"> 链接：https:<span class=\"regexp\">//</span>www.jianshu.com<span class=\"regexp\">/p/</span><span class=\"number\">861</span>c1a630059</span><br><span class=\"line\">来源：简书</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>msvc</p>\n<p>微软家的编译器, visual studio 内置的, 通用性不强.</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>到这里再提一嘴这个工具: <a href=\"https://winlibs.com/\">WinLibs standalone build of GCC and MinGW-w64 for Windows</a></p>\n<p>它内置了上面提到的 gcc/llvm 等工具, 比较大所以库很丰富</p>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"环境安装\">环境安装</h2>\n<p>可以先去看下面的 <code> 多种运行方式</code>, 再来找合适的环境.</p>\n<ul>\n<li>\n<p>编译器</p>\n<p>安装上面提到的 <code>winlibs</code> 或者 <code>mingw64 / msvc / llvm</code>…</p>\n<p>太过基础, 不会百度.</p>\n</li>\n<li>\n<p>编译工具</p>\n<p>这里选用 <code>xmake</code>, 不用 cmake</p>\n<p>依赖管理工具用 xmake 自带的 xrepo, 需要的话可以另装 <code>vcpkg</code></p>\n</li>\n<li>\n<p>VScode 内插件</p>\n<p>必须: <code>C/C++</code></p>\n<p>方法二: <code>Code Runner</code></p>\n<p>方法四: <code>xmake</code></p>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"多种运行方式\">多种运行方式</h2>\n<p>排序: 简单 -&gt; 困难</p>\n<h3 id=\"所用代码\">所用代码</h3>\n<ul>\n<li>\n<p>单文件 <code>main.cpp</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>多文件</p>\n<ul>\n<li>\n<p><code>0.cpp</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>0.h</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>1.cpp</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;0.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hello-1, 我,%d&quot;</span>, <span class=\"built_in\">a</span>());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"方法一 -2\">方法一</h3>\n<p>最原始的运行方式, 用不着解释:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ <span class=\"selector-tag\">main</span><span class=\"selector-class\">.cpp</span> -o <span class=\"selector-tag\">main</span>.exe</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"方法二 -2\">方法二</h3>\n<ul>\n<li>\n<p>上面的虽简单但是繁琐</p>\n<p>于是 vscode 里有个插件 <code>code runner</code> 可以自动产生上面的命令, 而且可以自定义, 下面逐步讲解完善:</p>\n<hr>\n</li>\n<li>\n<p>比如中文乱码问题:</p>\n<p>win 系统中终端默认按照 GBK 编码显示, 但是程序输出是 UTF-8 编码的(除非源文件是 GBK 编码, 但是不建议这么做)</p>\n<p>可以在代码运行前把终端编码页转到 utf-8 就行了</p>\n<p>修改 vscode 配置文件,<code>chcp 65001</code>就是转到 utf-8 页</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;code-runner.executorMap&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;c&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; ./$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;cpp&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; ./$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>转移生成文件</p>\n<p>默认生成的 xxx.exe 在同级目录, 很影响观瞻, 把它挪到 <code>workspaceRoot/build/</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;code-runner.executorMap&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;c&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; gcc $fileName -o $workspaceRoot\\\\build\\\\$fileNameWithoutExt &amp;&amp; $workspaceRoot\\\\build\\\\$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;cpp&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; g++ $fileName -o $workspaceRoot\\\\build\\\\$fileNameWithoutExt &amp;&amp; $workspaceRoot\\\\build\\\\$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>再如多文件编译链接问题:</p>\n<p>默认的 Code Runner 执行的命令只能编译运行一个 C/C++ 源文件</p>\n<p>但是很多情况下需要编译链接多文件的项目, 可以修改成这样:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;code-runner.executorMap&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;c&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; gcc *.c -I . -o $workspaceRoot\\\\build\\\\$fileNameWithoutExt &amp;&amp; $workspaceRoot\\\\build\\\\$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;cpp&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; g++ *.cpp -I . -o $workspaceRoot\\\\build\\\\$fileNameWithoutExt &amp;&amp; $workspaceRoot\\\\build\\\\$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意修改后目录下所有源文件都参与编译(不管项目是不是需要它)</p>\n</li>\n<li>\n<p>再如编译时链接库 (可以这么干, 但是并不好)</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;code-runner.executorMap&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;c&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; gcc *.c -I . -l glut32 -l glu32 -l opengl32 -o $workspaceRoot\\\\build\\\\$fileNameWithoutExt &amp;&amp; $workspaceRoot\\\\build\\\\$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;cpp&quot;</span>: <span class=\"string\">&quot;chcp 65001 &amp;&amp; g++ *.cpp -I . -l glut32 -l glu32 -l opengl32 -o $workspaceRoot\\\\build\\\\$fileNameWithoutExt &amp;&amp; $workspaceRoot\\\\build\\\\$fileNameWithoutExt&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>此项配置适用性很广</p>\n<p>文件堆放可以随意, 文件名 / 目录名中 <code> 可以含有中文</code></p>\n<p>缺点是无法调试, 对需要依赖库的工程性项目不友好</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"方法三 -2\">方法三</h3>\n<ul>\n<li>\n<p>通过 vscode 本身, 也是可以 run/debug 的</p>\n<p>在 vscode 内右键文件内容, 有个 <code> 生成和调试活动文件</code>, 不用动回车几下</p>\n<p>会生成下面两个文件, 然后应该就能 run/debug 了</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">|&gt; .vscode</span></span><br><span class=\"line\">  <span class=\"string\">|&gt; launch.json</span></span><br><span class=\"line\">  <span class=\"string\">|&gt; task.json</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<details>\n  <summary> 默认生成文件内容 </summary>\n<hr>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 IntelliSense 了解相关属性。</span></span><br><span class=\"line\">  <span class=\"comment\">// 悬停以查看现有属性的描述。</span></span><br><span class=\"line\">  <span class=\"comment\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;g++.exe - 生成和调试活动文件 &quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppdbg&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\build\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">&quot;stopAtEntry&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;environment&quot;</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">&quot;externalConsole&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;MIMode&quot;</span>: <span class=\"string\">&quot;gdb&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;miDebuggerPath&quot;</span>: <span class=\"string\">&quot;gdb.exe&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;setupCommands&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot; 为 gdb 启用整齐打印 &quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;ignoreFailures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">&quot;preLaunchTask&quot;</span>: <span class=\"string\">&quot;C/C++: g++.exe 生成活动文件 &quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;tasks&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppbuild&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;C/C++: g++.exe 生成活动文件 &quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;D:\\\\Game\\\\Scoop\\\\apps\\\\winlibs-mingw-llvm\\\\current\\\\bin\\\\g++.exe&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;-fdiagnostics-color=always&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;-g&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;-o&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;fileDirname&#125;\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">&quot;options&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;problemMatcher&quot;</span>: [<span class=\"string\">&quot;$gcc&quot;</span>],</span><br><span class=\"line\">      <span class=\"attr\">&quot;group&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;kind&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;isDefault&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;detail&quot;</span>: <span class=\"string\">&quot; 调试器生成的任务。&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.0.0&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n</li>\n</ul>\n</li>\n<li>\n<p>介绍一下其调用流程:</p>\n<p>按 F5 调试 -&gt; launch.json -&gt; preLaunchTask -&gt; tasks.json -&gt; g++ -&gt; main.cpp -&gt; main.exe</p>\n<p>反过来看, 最先执行的是 task.json 里的 g++.exe (看 args 那里跟上面的第二种运行方式里很像)</p>\n<p>g++ 生成了 main.exe 文件, 然后 launch.JSON 中的 gdb.exe 接过来 main.exe 开始调试</p>\n</li>\n<li>\n<p>跟上面方法二类似, 可以修改参数来添加功能</p>\n</li>\n<li>\n<p>launch.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用 IntelliSense 了解相关属性。</span></span><br><span class=\"line\">  <span class=\"comment\">// 悬停以查看现有属性的描述。</span></span><br><span class=\"line\">  <span class=\"comment\">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.2.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;configurations&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;g++.exe - 生成和调试活动文件 &quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppdbg&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;request&quot;</span>: <span class=\"string\">&quot;launch&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;program&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\build\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">&quot;stopAtEntry&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;environment&quot;</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">&quot;externalConsole&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;MIMode&quot;</span>: <span class=\"string\">&quot;gdb&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;miDebuggerPath&quot;</span>: <span class=\"string\">&quot;gdb.exe&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;setupCommands&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot; 为 gdb 启用整齐打印 &quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;text&quot;</span>: <span class=\"string\">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">&quot;ignoreFailures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">&quot;preLaunchTask&quot;</span>: <span class=\"string\">&quot;C/C++: g++.exe 生成活动文件 &quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>tasks.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;2.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;tasks&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;cppbuild&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;label&quot;</span>: <span class=\"string\">&quot;C/C++: g++.exe 生成活动文件 &quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;command&quot;</span>: <span class=\"string\">&quot;g++&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">&quot;args&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;-g&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;*.cpp&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;-I&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;-o&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;$&#123;workspaceRoot&#125;\\\\build\\\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">&quot;options&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">&quot;problemMatcher&quot;</span>: [<span class=\"string\">&quot;$gcc&quot;</span>],</span><br><span class=\"line\">      <span class=\"attr\">&quot;group&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;kind&quot;</span>: <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;isDefault&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>再介绍一下利弊</p>\n<p>比第二个方法自定义性更强,<code>可以直接输出中文不乱码</code></p>\n<p>缺点也很上头,<code>源文件名字 / 路径中不能带中文</code> (不信可以试试, 直接报错)</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"方法四\">方法四</h3>\n<ul>\n<li>\n<p>上面的几个方法比较面向小 demo, 最后这个是 <code> 面向工程性 </code> 的 (需要一定能力基础)</p>\n<p>使用 <code>xmake.lua</code> 替换了上面方法中的拼接参数行为, 而且可以通过 xmake 管理链接库 / 编译器等, 比如:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 引用.lib 形式的静态库会报错, 所以要用 shared 动态链接库版本</span></span><br><span class=\"line\">add_requires(<span class=\"string\">&quot;freeglut&quot;</span>,&#123;configs = &#123;shared = <span class=\"literal\">true</span>&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 全局添加依赖</span></span><br><span class=\"line\">add_packages(<span class=\"string\">&quot;freeglut&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 同一 target 只能有一个 main(), 否则需要另起名字</span></span><br><span class=\"line\">target(<span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">    set_kind(<span class=\"string\">&quot;binary&quot;</span>)</span><br><span class=\"line\">    add_files(<span class=\"string\">&quot;src/test/*.cpp&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 单个添加依赖, 当已经全局添加时, 会产生歧义, 添加静态版本</span></span><br><span class=\"line\">    add_packages(<span class=\"string\">&quot;freeglut&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 更改编译器, 比如 gcc/clang/msvc...</span></span><br><span class=\"line\">    add_toolchains(<span class=\"string\">&quot;gcc&quot;</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n<li>\n<p>深入过程中试过其他的工具链: cmake / vcpkg / conan, 为什么选用的 <code>xmake + xrepo + vcpkg</code> ? 对比一下吧</p>\n<p>cmake 语法很怪, 学习成本高配置难, 尤其是与其搭配的 vcpkg/conan 安装的依赖引入比较棘手, 网上对它的诟病很多</p>\n<p>conan 库少, 而且结合 cmake 体验起来并不如 xmake+xrepo</p>\n<p>xmake 自带 xrepo, 而且 xrepo 可以装 vcpkg/conan/brew 的库, 而且支持中文路径 / 文件名</p>\n<p>再装个 vcpkg 用来搜索库以及提供给 xrepo 调用安装库 (这个需要安装 visualstudio buildtools 英文版本)</p>\n</li>\n<li>\n<p>坏处</p>\n<p>网上用 cmake 的人 / 项目很多, 对于 xmake 的教程还是比较稀缺</p>\n<p>不过能走到这步的大都可以自行探索了…</p>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"参考 - 推荐\">参考 - 推荐</h2>\n<h3 id=\"C-C- 开发模板\"><a href=\"https://github.com/Weidows/C--\">C/C++ 开发模板</a></h3>\n<p>参考了很多文章 / 教程, 迭代了数个版本, 下面是脚印</p>\n<blockquote>\n<p><a href=\"https://tboox.org/cn/2019/12/13/quickstart-10-target-deps/\">xmake 从入门到精通 10：多个子工程目标的依赖配置</a><br>\n<a href=\"https://www.bilibili.com/video/BV1fy4y1b7TC?p=23\">基于 VSCode 和 CMake 实现 C/C++ 开发 | Linux 篇</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/67854244\">xmake vs cmake 对比分析</a><br>\n<a href=\"https://github.com/SFUMECJF/cmake-examples-Chinese\">SFUMECJF/cmake-examples-Chinese</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/79872095\">打包一沓开源的 C/C++ 包管理工具送给你！</a></p>\n</blockquote>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "vscode",
                "备忘录",
                "c",
                "cmake"
            ]
        }
    ]
}