{
    "version": "https://jsonfeed.org/version/1",
    "title": "⭐️齐下无贰⭐️ • All posts by \"opengl\" tag",
    "description": "May all the beauty be bless.✨",
    "home_page_url": "https://blog.weidows.tech",
    "items": [
        {
            "id": "https://blog.weidows.tech/post/lang/python/%E6%9D%82/",
            "url": "https://blog.weidows.tech/post/lang/python/%E6%9D%82/",
            "title": "😑python-mess-code",
            "date_published": "2022-04-22T08:22:34.000Z",
            "content_html": "<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2023-04-20 18:38:53\n * @FilePath: \\Blog-private\\source\\_posts\\python\\杂.md\n * @Description:\n * @!: *********************************************************************\n-->\n<h2 id=\"basic\">basic</h2>\n<h3 id=\"static-method\">static-method</h3>\n<p>python 中并没有像是 Java 里的 static 关键字,取代的是 <code>@classmethod</code> 和 <code>@staticmethod</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    name = <span class=\"string\">&#x27;A&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 至少有一个隐式形参 (本类 cls 对象), 可以访问类属性</span></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">a</span>(<span class=\"params\">cls</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(cls.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 无形参, 也就是说拿不到类属性</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">b</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">A.a()</span><br><span class=\"line\">A.b()</span><br></pre></td></tr></table></figure>\n<pre><code>A\nb\n</code></pre>\n<h3 id=\"multi-condition\">multi-condition</h3>\n<p>if(a||b)当 a 为真时，还会对 b 求值吗?</p>\n<blockquote>\n<p>不会</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calculate</span>(<span class=\"params\">name, t</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;calculating: &quot;</span>, name, <span class=\"string\">&quot;seconds needs: &quot;</span>, t)</span><br><span class=\"line\">    time.sleep(t)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (calculate(<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"number\">2</span>) <span class=\"keyword\">or</span> calculate(<span class=\"string\">&#x27;B&#x27;</span>, <span class=\"number\">2</span>)):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Done&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>calculating:  A seconds needs:  2\nDone\n</code></pre>\n<h3 id=\"下划线\">下划线</h3>\n<p>教程来自: <sup id='cite_ref-4'><a href=\"#cite_note-4\">[4]</a></sup></p>\n<h4 id=\"\">_</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单个 _ 指向最后一次执行表达式 (结果)</span></span><br><span class=\"line\"><span class=\"comment\"># 在 python 命令行中可以跑, 在这里不行</span></span><br><span class=\"line\"><span class=\"comment\"># 1 + 2</span></span><br><span class=\"line\"><span class=\"comment\"># _</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化数字</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">114_514_1919_810</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 类似 golang 的遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(_)</span><br></pre></td></tr></table></figure>\n<pre><code>1145141919810\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre>\n<h4 id=\"xxx\">__xxx__</h4>\n<p>魔术方法 / 魔法函数, 一般作为内置方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">random.__name__</span><br></pre></td></tr></table></figure>\n<pre><code>'random'\n</code></pre>\n<h4 id=\"xxx-2\">_xxx</h4>\n<p>私有化, 仅提供模块内部调用, 类似Java里的 protect</p>\n<h4 id=\"xxx-3\">__xxx</h4>\n<p>也是私有化, 类似 Java 内的 private, 无法直接访问此变量/方法, 但可以间接访问</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, age</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.name = name</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.__age = age</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_age</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.__age</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">me = Person(<span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(me.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(me.age)</span></span><br><span class=\"line\"><span class=\"comment\"># print(me.__age)</span></span><br><span class=\"line\"><span class=\"comment\"># 上面两种都会报错, __age -&gt; _Person__age</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(me._Person__age)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(me.get_age())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">dir</span>(me))</span><br></pre></td></tr></table></figure>\n<pre><code>张三\n18\n18\n['_Person__age', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'get_age', 'name']\n</code></pre>\n<h4 id=\"xxx-xxx\">_xxx__xxx</h4>\n<p>从上面例子可以看到, 能通过这个访问类私有化属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">you = Person(<span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">you._Person__age += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(you.get_age())</span><br></pre></td></tr></table></figure>\n<pre><code>21\n</code></pre>\n<h4 id=\"xxx-4\">xxx_</h4>\n<p>类似转义, 让某些关键词无效化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">max_ = <span class=\"built_in\">max</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(max_)</span><br></pre></td></tr></table></figure>\n<pre><code>3\n</code></pre>\n<h3 id=\"闭包\">闭包</h3>\n<p>听起来挺抽象的, 下面这个例子实现的静态代理的功能, 只不过这种通过函数包裹函数并且回传函数的形式称为闭包</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func_1</span>(<span class=\"params\">func</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">wrapper</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;func&#125;</span> running&#x27;</span>)</span><br><span class=\"line\">        func()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;func&#125;</span> finished&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_func = func_1(<span class=\"keyword\">lambda</span>: <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;hello&#x27;</span>))</span><br><span class=\"line\">my_func()</span><br></pre></td></tr></table></figure>\n<pre><code>&lt;function &lt;lambda&gt; at 0x000002C6132A50D0&gt; running\nhello\n&lt;function &lt;lambda&gt; at 0x000002C6132A50D0&gt; finished\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login_user</span>(<span class=\"params\">username, password</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;login success&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">func</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 这里的 argv 可以直接获取 func 的</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">wrapper</span>(<span class=\"params\">username, password</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> username == <span class=\"string\">&#x27;user&#x27;</span> <span class=\"keyword\">and</span> password == <span class=\"string\">&#x27;password&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(username, password)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;login failed&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">login_user = check(login_user)</span><br><span class=\"line\">login_user(<span class=\"string\">&#x27;user&#x27;</span>, <span class=\"string\">&#x27;password&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>login success\n</code></pre>\n<h3 id=\"装饰器\">装饰器</h3>\n<p>decorator-@, 从Java里叫注解, 上面的例子可写成下面这样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@check</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login_user</span>(<span class=\"params\">username, password</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;login success&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">check</span>(<span class=\"params\">func</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 这里的 argv 可以直接获取 func 的</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">wrapper</span>(<span class=\"params\">username, password</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> username == <span class=\"string\">&#x27;user&#x27;</span> <span class=\"keyword\">and</span> password == <span class=\"string\">&#x27;password&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(username, password)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;login failed&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">login_user(<span class=\"string\">&#x27;user&#x27;</span>, <span class=\"string\">&#x27;password&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>login success\n</code></pre>\n<h2 id=\"modules\">modules</h2>\n<h3 id=\"base64\">base64</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\">username = <span class=\"string\">&#x27;Weidows&#x27;</span></span><br><span class=\"line\">password = <span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">encode = base64.b64encode((username + <span class=\"string\">&quot;:&quot;</span> + password).encode())</span><br><span class=\"line\"><span class=\"comment\"># Basic V2VpZG93czoxMjM0NTY==</span></span><br><span class=\"line\">headers = &#123;<span class=\"string\">&quot;Authorization&quot;</span>: <span class=\"string\">&quot;Basic &quot;</span> + encode.decode()&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(headers)</span><br></pre></td></tr></table></figure>\n<pre><code>&#123;'Authorization': 'Basic V2VpZG93czoxMjM0NTY='&#125;\n</code></pre>\n<h3 id=\"多线程-进程\">多线程-进程</h3>\n<blockquote>\n<p>Python 多线程不能利用 CPU 多核优势，IO 密集型可用多线程，CPU 密集型适合用多进程 <sup id='cite_ref-2'><a href=\"#cite_note-2\">[2]</a></sup></p>\n</blockquote>\n<p>也就是说只有 IO 密集型任务适用多线程,其他情况: <code>多进程 &gt; 不用 &gt; 多线程</code>, API 区别如下:<sup id='cite_ref-3'><a href=\"#cite_note-3\">[3]</a></sup></p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/R9zQZh.png\" alt=\"R9zQZh.png\"></p>\n<p>虽然但是,很多情况下涉及到资源共享, 多进程处理起来比较麻烦,还是多线程舒服.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">multi_num = multiprocessing.cpu_count() * <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">counter</span>(<span class=\"params\">num</span>):</span><br><span class=\"line\">    time.sleep(num)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(threading.currentThread().name, num, end=<span class=\"string\">&#x27;\\t&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> ThreadPoolExecutor(max_workers=multi_num) <span class=\"keyword\">as</span> thread_pool:</span><br><span class=\"line\">        start = time.time()</span><br><span class=\"line\">        thread_pool.<span class=\"built_in\">map</span>(counter, <span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 等待任务执行完再跳回 main</span></span><br><span class=\"line\">        thread_pool.shutdown(wait=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;多线程: &quot;</span>, time.time() - start)</span><br></pre></td></tr></table></figure>\n<pre><code>ThreadPoolExecutor-0_0 0\tThreadPoolExecutor-0_1 1\tThreadPoolExecutor-0_0 2\tThreadPoolExecutor-0_2 3\tThreadPoolExecutor-0_3 4\tThreadPoolExecutor-0_4 5\tThreadPoolExecutor-0_5 6\tThreadPoolExecutor-0_6 7\tThreadPoolExecutor-0_7 8\tThreadPoolExecutor-0_8 9\t多线程:  9.009207010269165\n</code></pre>\n<h2 id=\"opengl\">opengl</h2>\n<h3 id=\"彩色三角形\">彩色三角形</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># quidam_01.py 三维空间的世界坐标系和三角形</span></span><br><span class=\"line\"><span class=\"comment\"># -------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GL <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLUT <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">draw</span>():</span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\">    glBegin(GL_LINES)  <span class=\"comment\"># 开始绘制线段（世界坐标系）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 以红色绘制x轴</span></span><br><span class=\"line\">    glColor4f(<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>)  <span class=\"comment\"># 设置当前颜色为红色不透明</span></span><br><span class=\"line\">    glVertex3f(-<span class=\"number\">0.8</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>)  <span class=\"comment\"># 设置x轴顶点（x轴负方向）</span></span><br><span class=\"line\">    glVertex3f(<span class=\"number\">0.8</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>)  <span class=\"comment\"># 设置x轴顶点（x轴正方向）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 以绿色绘制y轴</span></span><br><span class=\"line\">    glColor4f(<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>)  <span class=\"comment\"># 设置当前颜色为绿色不透明</span></span><br><span class=\"line\">    glVertex3f(<span class=\"number\">0.0</span>, -<span class=\"number\">0.8</span>, <span class=\"number\">0.0</span>)  <span class=\"comment\"># 设置y轴顶点（y轴负方向）</span></span><br><span class=\"line\">    glVertex3f(<span class=\"number\">0.0</span>, <span class=\"number\">0.8</span>, <span class=\"number\">0.0</span>)  <span class=\"comment\"># 设置y轴顶点（y轴正方向）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 以蓝色绘制z轴</span></span><br><span class=\"line\">    glColor4f(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>)  <span class=\"comment\"># 设置当前颜色为蓝色不透明</span></span><br><span class=\"line\">    glVertex3f(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, -<span class=\"number\">0.8</span>)  <span class=\"comment\"># 设置z轴顶点（z轴负方向）</span></span><br><span class=\"line\">    glVertex3f(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.8</span>)  <span class=\"comment\"># 设置z轴顶点（z轴正方向）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    glEnd()  <span class=\"comment\"># 结束绘制线段</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\">    glBegin(GL_TRIANGLES)  <span class=\"comment\"># 开始绘制三角形（z轴负半区）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    glColor4f(<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>)  <span class=\"comment\"># 设置当前颜色为红色不透明</span></span><br><span class=\"line\">    glVertex3f(-<span class=\"number\">0.5</span>, -<span class=\"number\">0.366</span>, -<span class=\"number\">0.5</span>)  <span class=\"comment\"># 设置三角形顶点</span></span><br><span class=\"line\">    glColor4f(<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>)  <span class=\"comment\"># 设置当前颜色为绿色不透明</span></span><br><span class=\"line\">    glVertex3f(<span class=\"number\">0.5</span>, -<span class=\"number\">0.366</span>, -<span class=\"number\">0.5</span>)  <span class=\"comment\"># 设置三角形顶点</span></span><br><span class=\"line\">    glColor4f(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>)  <span class=\"comment\"># 设置当前颜色为蓝色不透明</span></span><br><span class=\"line\">    glVertex3f(<span class=\"number\">0.0</span>, <span class=\"number\">0.5</span>, -<span class=\"number\">0.5</span>)  <span class=\"comment\"># 设置三角形顶点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    glEnd()  <span class=\"comment\"># 结束绘制三角形</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\">    glFlush()  <span class=\"comment\"># 清空缓冲区，将指令送往硬件立即执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    glutInit()  <span class=\"comment\"># 1. 初始化glut库</span></span><br><span class=\"line\">    glutCreateWindow(<span class=\"string\">&#x27;Quidam Of OpenGL&#x27;</span>)  <span class=\"comment\"># 2. 创建glut窗口</span></span><br><span class=\"line\">    glutDisplayFunc(draw)  <span class=\"comment\"># 3. 注册回调函数draw()</span></span><br><span class=\"line\">    glutMainLoop()  <span class=\"comment\"># 4. 进入glut主循环</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"点线抛物线\">点线抛物线</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GL <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLU <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLUT <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">init</span>():</span><br><span class=\"line\">    glClearColor(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>)</span><br><span class=\"line\">    gluOrtho2D(-<span class=\"number\">5.0</span>, <span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span>, <span class=\"number\">5.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">plotfunc</span>():</span><br><span class=\"line\">    glClear(GL_COLOR_BUFFER_BIT)</span><br><span class=\"line\">    glColor3f(<span class=\"number\">1.0</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.6</span>)</span><br><span class=\"line\">    glPointSize(<span class=\"number\">3.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    glBegin(GL_POINTS)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> arange(-<span class=\"number\">5.0</span>, <span class=\"number\">5.0</span>, <span class=\"number\">0.1</span>):  <span class=\"comment\">#from -5.0 to 5.0 plus 0.1 every time</span></span><br><span class=\"line\">        y = x * x</span><br><span class=\"line\">        glVertex2f(x, y)</span><br><span class=\"line\">    glEnd()</span><br><span class=\"line\">    glFlush()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    glutInit(sys.argv)</span><br><span class=\"line\">    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB)</span><br><span class=\"line\">    glutInitWindowPosition(<span class=\"number\">50</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">    glutInitWindowSize(<span class=\"number\">400</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">    glutCreateWindow(<span class=\"string\">&quot;Function Plotter&quot;</span>)</span><br><span class=\"line\">    glutDisplayFunc(plotfunc)</span><br><span class=\"line\"></span><br><span class=\"line\">    init()</span><br><span class=\"line\">    glutMainLoop()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"转动时钟\">转动时钟</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GL <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLU <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLUT <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">h = <span class=\"number\">0</span></span><br><span class=\"line\">m = <span class=\"number\">0</span></span><br><span class=\"line\">s = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Draw</span>():</span><br><span class=\"line\">    PI = <span class=\"number\">3.1415926</span></span><br><span class=\"line\">    R = <span class=\"number\">0.5</span></span><br><span class=\"line\">    TR = R - <span class=\"number\">0.05</span></span><br><span class=\"line\">    glClear(GL_COLOR_BUFFER_BIT)</span><br><span class=\"line\">    glLineWidth(<span class=\"number\">5</span>)</span><br><span class=\"line\">    glBegin(GL_LINE_LOOP)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">        glVertex2f(R * math.cos(<span class=\"number\">2</span> * PI / <span class=\"number\">100</span> * i),</span><br><span class=\"line\">                   R * math.sin(<span class=\"number\">2</span> * PI / <span class=\"number\">100</span> * i))</span><br><span class=\"line\">    glEnd()</span><br><span class=\"line\">    glLineWidth(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">        glBegin(GL_LINES)</span><br><span class=\"line\">        glVertex2f(TR * math.sin(<span class=\"number\">2</span> * PI / <span class=\"number\">12</span> * i),</span><br><span class=\"line\">                   TR * math.cos(<span class=\"number\">2</span> * PI / <span class=\"number\">12</span> * i))</span><br><span class=\"line\">        glVertex2f(R * math.sin(<span class=\"number\">2</span> * PI / <span class=\"number\">12</span> * i),</span><br><span class=\"line\">                   R * math.cos(<span class=\"number\">2</span> * PI / <span class=\"number\">12</span> * i))</span><br><span class=\"line\">        glEnd()</span><br><span class=\"line\">    glLineWidth(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    h_Length = <span class=\"number\">0.2</span></span><br><span class=\"line\">    m_Length = <span class=\"number\">0.3</span></span><br><span class=\"line\">    s_Length = <span class=\"number\">0.4</span></span><br><span class=\"line\">    count = <span class=\"number\">60.0</span></span><br><span class=\"line\">    s_Angle = s / count</span><br><span class=\"line\">    count *= <span class=\"number\">60</span></span><br><span class=\"line\">    m_Angle = (m * <span class=\"number\">60</span> + s) / count</span><br><span class=\"line\">    count *= <span class=\"number\">12</span></span><br><span class=\"line\">    h_Angle = (h * <span class=\"number\">60</span> * <span class=\"number\">60</span> + m * <span class=\"number\">60</span> + s) / count</span><br><span class=\"line\">    glLineWidth(<span class=\"number\">1</span>)</span><br><span class=\"line\">    glBegin(GL_LINES)</span><br><span class=\"line\">    glVertex2f(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>)</span><br><span class=\"line\">    glVertex2f(s_Length * math.sin(<span class=\"number\">2</span> * PI * s_Angle),</span><br><span class=\"line\">               s_Length * math.cos(<span class=\"number\">2</span> * PI * s_Angle))</span><br><span class=\"line\">    glEnd()</span><br><span class=\"line\">    glLineWidth(<span class=\"number\">5</span>)</span><br><span class=\"line\">    glBegin(GL_LINES)</span><br><span class=\"line\">    glVertex2f(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>)</span><br><span class=\"line\">    glVertex2f(h_Length * math.sin(<span class=\"number\">2</span> * PI * h_Angle),</span><br><span class=\"line\">               h_Length * math.cos(<span class=\"number\">2</span> * PI * h_Angle))</span><br><span class=\"line\">    glEnd()</span><br><span class=\"line\">    glLineWidth(<span class=\"number\">3</span>)</span><br><span class=\"line\">    glBegin(GL_LINES)</span><br><span class=\"line\">    glVertex2f(<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>)</span><br><span class=\"line\">    glVertex2f(m_Length * math.sin(<span class=\"number\">2</span> * PI * m_Angle),</span><br><span class=\"line\">               m_Length * math.cos(<span class=\"number\">2</span> * PI * m_Angle))</span><br><span class=\"line\">    glEnd()</span><br><span class=\"line\">    glLineWidth(<span class=\"number\">1</span>)</span><br><span class=\"line\">    glBegin(GL_POLYGON)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">        glVertex2f(<span class=\"number\">0.03</span> * math.cos(<span class=\"number\">2</span> * PI / <span class=\"number\">100</span> * i),</span><br><span class=\"line\">                   <span class=\"number\">0.03</span> * math.sin(<span class=\"number\">2</span> * PI / <span class=\"number\">100</span> * i))</span><br><span class=\"line\">    glEnd()</span><br><span class=\"line\">    glFlush()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Update</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> h, m, s</span><br><span class=\"line\">    t = time.localtime(time.time())</span><br><span class=\"line\">    h = <span class=\"built_in\">int</span>(time.strftime(<span class=\"string\">&#x27;%H&#x27;</span>, t))</span><br><span class=\"line\">    m = <span class=\"built_in\">int</span>(time.strftime(<span class=\"string\">&#x27;%M&#x27;</span>, t))</span><br><span class=\"line\">    s = <span class=\"built_in\">int</span>(time.strftime(<span class=\"string\">&#x27;%S&#x27;</span>, t))</span><br><span class=\"line\">    glutPostRedisplay()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">glutInit()</span><br><span class=\"line\">glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA)</span><br><span class=\"line\">glutInitWindowSize(<span class=\"number\">400</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">glutCreateWindow(<span class=\"string\">&quot;My clock&quot;</span>)</span><br><span class=\"line\">glutDisplayFunc(Draw)</span><br><span class=\"line\">glutIdleFunc(Update)</span><br><span class=\"line\">glutMainLoop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hello-World-pyglet\">Hello-World-pyglet</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pyglet</span><br><span class=\"line\"></span><br><span class=\"line\">window = pyglet.window.Window()</span><br><span class=\"line\"></span><br><span class=\"line\">label = pyglet.text.Label(<span class=\"string\">&#x27;Hello, world&#x27;</span>,</span><br><span class=\"line\">                          font_name=<span class=\"string\">&#x27;Times New Roman&#x27;</span>,</span><br><span class=\"line\">                          font_size=<span class=\"number\">36</span>,</span><br><span class=\"line\">                          x=window.width // <span class=\"number\">2</span>,</span><br><span class=\"line\">                          y=window.height // <span class=\"number\">2</span>,</span><br><span class=\"line\">                          anchor_x=<span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">                          anchor_y=<span class=\"string\">&#x27;center&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@window.event</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">on_draw</span>():</span><br><span class=\"line\">    window.clear()</span><br><span class=\"line\">    label.draw()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pyglet.app.run()</span><br></pre></td></tr></table></figure>\n<h3 id=\"茶壶\">茶壶</h3>\n<h4 id=\"动态\">动态</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GL <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLU <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLUT <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">drawFunc</span>():</span><br><span class=\"line\">    <span class=\"comment\">#清楚之前画面</span></span><br><span class=\"line\">    glClear(GL_COLOR_BUFFER_BIT)</span><br><span class=\"line\">    glRotatef(<span class=\"number\">0.1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>)  <span class=\"comment\">#(角度,x,y,z)</span></span><br><span class=\"line\">    glutWireTeapot(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    <span class=\"comment\">#刷新显示</span></span><br><span class=\"line\">    glFlush()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用glut初始化OpenGL</span></span><br><span class=\"line\">glutInit()</span><br><span class=\"line\"><span class=\"comment\">#显示模式:GLUT_SINGLE无缓冲直接显示|GLUT_RGBA采用RGB(A非alpha)</span></span><br><span class=\"line\">glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA)</span><br><span class=\"line\"><span class=\"comment\">#窗口位置及大小-生成</span></span><br><span class=\"line\">glutInitWindowPosition(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">glutInitWindowSize(<span class=\"number\">400</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\">glutCreateWindow(<span class=\"string\">b&quot;first&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#调用函数绘制图像</span></span><br><span class=\"line\">glutDisplayFunc(drawFunc)</span><br><span class=\"line\">glutIdleFunc(drawFunc)</span><br><span class=\"line\"><span class=\"comment\">#主循环</span></span><br><span class=\"line\">glutMainLoop()</span><br></pre></td></tr></table></figure>\n<h4 id=\"静态\">静态</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GL <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLU <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLUT <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">drawFunc</span>():</span><br><span class=\"line\">    glClear(GL_COLOR_BUFFER_BIT)</span><br><span class=\"line\">    <span class=\"comment\"># 设置为红色</span></span><br><span class=\"line\">    glColor3f(<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>)</span><br><span class=\"line\">    glutWireTeapot(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    glFlush()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">glutInit()</span><br><span class=\"line\">glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA)</span><br><span class=\"line\">glutInitWindowSize(<span class=\"number\">400</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#参数为b类型而不是string</span></span><br><span class=\"line\">glutCreateWindow(<span class=\"string\">b&quot;Teapot&quot;</span>)</span><br><span class=\"line\">glutDisplayFunc(drawFunc)</span><br><span class=\"line\">glutMainLoop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据分析\">数据分析</h2>\n<h3 id=\"numpy\">numpy</h3>\n<h4 id=\"newaxis\">newaxis</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">A = np.array([[<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(A)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;A.shape: &quot;</span>, A.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># new 一个一维数组,然后把 A 整个怼进去</span></span><br><span class=\"line\">B = A[np.newaxis, :]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(B)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;B.shape: &quot;</span>, B.shape)</span><br><span class=\"line\"></span><br><span class=\"line\">C = A[:, np.newaxis]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(C)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;C.shape: &quot;</span>, C.shape)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把每个第二维第四位的元素怼进一个新数组,把原第二位替换为此新数组</span></span><br><span class=\"line\">D = A[:, np.newaxis, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(D)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;D.shape: &quot;</span>, D.shape)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[[2 0 2 1]\n [2 0 2 2]]\nA.shape:  (2, 4)\n[[[2 0 2 1]\n  [2 0 2 2]]]\nB.shape:  (1, 2, 4)\n[[[2 0 2 1]]\n\n [[2 0 2 2]]]\nC.shape:  (2, 1, 4)\n[[1]\n [2]]\nD.shape:  (2, 1)\n</code></pre>\n<h3 id=\"Matplotlib\">Matplotlib</h3>\n<h4 id=\"figure\">figure</h4>\n<p>可以用 figure 对输出的图片进行缩放</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">plt.imshow(plt.imread(<span class=\"string\">&#x27;./_data_set/kitti_000008_pred.png&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<pre><code>&lt;matplotlib.image.AxesImage at 0x22c4640aa90&gt;\n</code></pre>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"%E6%9D%82_files/%E6%9D%82_40_1.png\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">25</span>, <span class=\"number\">20</span>))</span><br><span class=\"line\">plt.imshow(plt.imread(<span class=\"string\">&#x27;./_data_set/kitti_000008_pred.png&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<pre><code>&lt;matplotlib.image.AxesImage at 0x22c4651a1c0&gt;\n</code></pre>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"%E6%9D%82_files/%E6%9D%82_41_1.png\" alt=\"png\"></p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"借物表\">借物表</h2>\n<p><a name='cite_note-1' href='#cite_ref-1'>[1]</a>: <a href=\"https://stackoverflow.com/questions/29241056/how-does-numpy-newaxis-work-and-when-to-use-it\">How does numpy.newaxis work and when to use it?</a></p>\n<p><a name='cite_note-2' href='#cite_ref-2'>[2]</a>: <a href=\"https://blog.csdn.net/gzmgzm_ming/article/details/81783450\">Python threadpool与multiprocessing</a></p>\n<p><a name='cite_note-3' href='#cite_ref-3'>[3]</a>: <a href=\"https://www.bilibili.com/video/BV1yp4y1679u\">Python并发实战，怎样使用多进程multiprocessing加速程序运行</a></p>\n<p><a name='cite_note-4' href='#cite_ref-4'>[4]</a>: <a href=\"https://www.bilibili.com/video/BV1z94y1U7j9?vd_source=bc13275071d678583f4bfdd8d344efda\">Python 中各种下划线的骚操作：_、<em>xx、xx</em>、__xx、<strong>xx</strong>、_classname__xx</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "多线程",
                "人工智能",
                "python",
                "opengl"
            ]
        },
        {
            "id": "https://blog.weidows.tech/post/experience/basic/OpenGL/",
            "url": "https://blog.weidows.tech/post/experience/basic/OpenGL/",
            "title": "🥵OpenGL-xmake-蚌埠住了",
            "date_published": "2021-09-19T14:37:25.000Z",
            "content_html": "<h1>OpenGL-xmake-蚌埠住了</h1>\n<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2024-08-07 13:18:20\n * @FilePath: \\Blog-private\\source\\_posts\\experience\\basic\\OpenGL.md\n * @Description:\n * @!: *********************************************************************\n-->\n<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li><a href=\"#opengl-xmake-%E8%9A%8C%E5%9F%A0%E4%BD%8F%E4%BA%86\">OpenGL-xmake-蚌埠住了</a>\n<ul>\n<li><a href=\"#python\">Python</a>\n<ul>\n<li><a href=\"#%E6%8A%A5%E9%94%99\">报错</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95\">测试</a></li>\n<li><a href=\"#%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81\">实例代码</a></li>\n</ul>\n</li>\n<li><a href=\"#c\">C</a>\n<ul>\n<li><a href=\"#xmake-%E5%BC%95%E5%85%A5%E5%BA%93\">xmake-引入库</a></li>\n<li><a href=\"#%E6%B5%8B%E8%AF%95-1\">测试</a></li>\n<li><a href=\"#%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81-1\">实例代码</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p>学校开了图形学这门课程,让我们配置下环境</p>\n<p>老师给的是 VS + OpenGL + C/C++ + 复制库文件 的方式</p>\n</li>\n<li>\n<p>转路</p>\n<ol>\n<li>\n<p><code>VScode + Python + pyopengl 库</code></p>\n</li>\n<li>\n<p><code>Vscode + C++ + xmake(需要VisualStudio) + 各种库</code> (推荐方法)</p>\n</li>\n</ol>\n<hr>\n</li>\n<li>\n<p>网上找了找,并不是能很顺畅的捅下来 (因为依赖项比较杂)</p>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"Python\">Python</h2>\n<ul>\n<li>\n<p>先装 vscode 和 Python / anaconda,这俩没问题</p>\n</li>\n<li>\n<p>通过 pip (conda 不行) 安装 <code>pyopengl</code> 库</p>\n<ul>\n<li>\n<p>有的教程装的是 <code>pyglet</code>,这个库官方解释是 “pyglet is a cross-platform games and multimedia package.”</p>\n</li>\n<li>\n<p>虽然 <a href=\"http://pyglet.gl\">pyglet.gl</a> 可以调 OpenGL API,但是鉴于 Ctrl CV 工作,还是老老实实用 pyopengl 库吧</p>\n</li>\n</ul>\n<hr>\n</li>\n</ul>\n<h3 id=\"报错\">报错</h3>\n<p>直接通过 pip 在线安装的话是装的 32 位的库,在 64 位机子上跑不起来</p>\n<blockquote>\n<p>报错 <a href=\"https://blog.csdn.net/feilong_csdn/article/details/61421002\">“OpenGL.error.NullFunctionError: Attempt to call an undefined function”解决方案</a></p>\n</blockquote>\n<p>必须去下载适合本机的离线包安装: <a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyopengl\">下载地址</a></p>\n<p>比如我是 win_64,py_3.8 ; 需要下载的是: <code>PyOpenGL-3.1.5-cp38-cp38-win_amd64.whl</code>,然后安装</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把之前的版本先卸载,否则安装也无效</span></span><br><span class=\"line\"><span class=\"attribute\">pip</span> uninstall pyopengl</span><br><span class=\"line\"><span class=\"attribute\">pip</span> install PyOpenGL-<span class=\"number\">3</span>.<span class=\"number\">1</span>.<span class=\"number\">5</span>-cp38-cp38-win_amd64.whl</span><br></pre></td></tr></table></figure>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h3 id=\"测试\">测试</h3>\n<p>画个静态茶壶, 就是文章封面图</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GL <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLU <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> OpenGL.GLUT <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">drawFunc</span>():</span><br><span class=\"line\">    glClear(GL_COLOR_BUFFER_BIT)</span><br><span class=\"line\">    glutWireTeapot(<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    glFlush()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">glutInit()</span><br><span class=\"line\">glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA)</span><br><span class=\"line\">glutInitWindowSize(<span class=\"number\">400</span>, <span class=\"number\">400</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#参数为b类型而不是string</span></span><br><span class=\"line\">glutCreateWindow(<span class=\"string\">b&quot;Teapot&quot;</span>)</span><br><span class=\"line\">glutDisplayFunc(drawFunc)</span><br><span class=\"line\">glutMainLoop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例代码\">实例代码</h3>\n<p><a href=\"../../../lang/python/%E6%9D%82#opengl\">实例代码</a></p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"C\">C</h2>\n<p>如果你喜欢 VScode 调试 C/C++,而不想用比较复杂的 Visual Studio</p>\n<p>如果你想通过简单的配置就让 VScode 能调试 OpenGL</p>\n<p>恭喜,马上就好!</p>\n<p>首先,按照我另一篇文章: <a href=\"../../../lang/cpp/C_Configuration\">👌 茅塞顿开之 C/C+±VScode-xmake</a> 配置好 <code>vscode + C/C++</code> 的开发环境</p>\n<hr>\n<h3 id=\"xmake-引入库\">xmake-引入库</h3>\n<p>xmake 自带的 xrepo 可以安装 xrepo/vcpkg/conan 的库</p>\n<ul>\n<li>\n<p>需要注意一下:</p>\n<p>虽然我这里使用 vscode + xmake,但是安装依赖时仍需要调用 visualstudio,必须安装</p>\n<p>需要安装的有两个: <code>buildtools + visualstudio community</code></p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVLoVo.png\" alt=\"20211120115814\" />\n<p>buildtools 也就是生成工具只有那一个,裸装就好,里面的东西不用装</p>\n<p>visualstudio community 的话什么版本都行,xmake 都支持了,它里面必须装 <code>C++ 桌面开发</code>,不能装成其他的</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVA21S.png\" alt=\"20211120115909\" />\n<p>语言包记得选中+英! 不然识别不到</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVSD4n.png\" alt=\"20211120120254\" />\n</li>\n</ul>\n<hr>\n<h3 id=\"测试-2\">测试</h3>\n<ul>\n<li>\n<p>xmake.lua</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 引用.lib形式的静态库会报错,所以要用shared动态链接库版本</span></span><br><span class=\"line\">add_requires(<span class=\"string\">&quot;freeglut&quot;</span>,&#123;configs = &#123;shared = <span class=\"literal\">true</span>&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 全局添加依赖</span></span><br><span class=\"line\">add_packages(<span class=\"string\">&quot;freeglut&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">target(<span class=\"string\">&quot;MazeGame&quot;</span>)</span><br><span class=\"line\">    set_kind(<span class=\"string\">&quot;binary&quot;</span>)</span><br><span class=\"line\">    add_files(<span class=\"string\">&quot;test.cpp&quot;</span>)</span><br><span class=\"line\">target_end()</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>test.cpp</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GL/glut.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Initial</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  glMatrixMode(GL_PROJECTION); <span class=\"comment\">//设置投影参数，表示下面进行投影变换。若改GL_PROJECTION为GL_MODEVIEW则进行视图变换。</span></span><br><span class=\"line\">  glLoadIdentity();            <span class=\"comment\">//通常我们在需要进行投影变换时要把当前矩形设置为单位矩阵，即glLoadIdentity()</span></span><br><span class=\"line\">  gluOrtho2D(<span class=\"number\">0.0</span>, <span class=\"number\">200.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">200.0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Display</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  glClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">  glPushMatrix(); <span class=\"comment\">//操作矩阵堆栈,调用函数，相当于把矩阵放到堆栈上</span></span><br><span class=\"line\">  glColor3f(<span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">  glTranslated(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  glTranslated(<span class=\"number\">70</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  glRotated(<span class=\"number\">-90</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  glScaled(<span class=\"number\">0.25</span>, <span class=\"number\">0.25</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">  glTranslated(<span class=\"number\">-100</span>, <span class=\"number\">-100</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  glBegin(GL_POLYGON);</span><br><span class=\"line\">  glVertex2f(<span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">  glVertex2f(<span class=\"number\">150</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">  glVertex2f(<span class=\"number\">100</span>, <span class=\"number\">150</span>);</span><br><span class=\"line\">  glEnd();</span><br><span class=\"line\">  glPopMatrix();</span><br><span class=\"line\"></span><br><span class=\"line\">  glBegin(GL_POLYGON); <span class=\"comment\">//opengl要求指定顶点的位置必须在glBegin()后面，同时在glEnd()后面。</span></span><br><span class=\"line\">  glVertex2f(<span class=\"number\">50</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">  glVertex2f(<span class=\"number\">150</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">  glVertex2f(<span class=\"number\">100</span>, <span class=\"number\">150</span>);</span><br><span class=\"line\">  glEnd();</span><br><span class=\"line\">  glFlush();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  glutInit(&amp;argc, argv);</span><br><span class=\"line\">  glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); <span class=\"comment\">//使用单缓存模式，如果GLUT_DOUBLE则为双缓存模式</span></span><br><span class=\"line\">  glutInitWindowSize(<span class=\"number\">600</span>, <span class=\"number\">600</span>);                <span class=\"comment\">//设置窗口大小</span></span><br><span class=\"line\">  glutInitWindowPosition(<span class=\"number\">100</span>, <span class=\"number\">100</span>);            <span class=\"comment\">//设置窗口位置</span></span><br><span class=\"line\">  glutCreateWindow(<span class=\"string\">&quot;Triangle&quot;</span>);</span><br><span class=\"line\">  glutDisplayFunc(Display);</span><br><span class=\"line\">  Initial();</span><br><span class=\"line\">  glutMainLoop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"实例代码-2\">实例代码</h3>\n<p><a href=\"https://github.com/Weidows/C--/tree/master/src/OpenGL\">实例代码</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "Python",
                "OpenGL",
                "C",
                "conan"
            ]
        }
    ]
}