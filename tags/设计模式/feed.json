{
    "version": "https://jsonfeed.org/version/1",
    "title": "⭐️齐下无贰⭐️ • All posts by \"设计模式\" tag",
    "description": "May all the beauty be bless.✨",
    "home_page_url": "https://weidows.github.io",
    "items": [
        {
            "id": "https://weidows.github.io/post/lang/Java/design_pattern/",
            "url": "https://weidows.github.io/post/lang/Java/design_pattern/",
            "title": "Java设计模式",
            "date_published": "2020-09-09T14:53:55.000Z",
            "content_html": "<!--\n * @Author: Weidows\n * @Date: 2020-09-09 22:53:55\n * @LastEditors: Weidows\n * @LastEditTime: 2021-02-13 17:07:54\n * @FilePath: \\Weidowsd:\\Game\\Github\\Blog-private\\source\\_posts\\Java\\design_pattern.md\n-->\n<ul>\n<li><a href=\"#%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\">单例设计模式</a></li>\n</ul>\n<h2 id=\"单例设计模式\">单例设计模式</h2>\n<ul>\n<li>\n<p>设计目的:</p>\n<ul>\n<li>当多个程序读取同一个文件的数据时,可以把配置文件封装为对象,为了使得所有程序获取的是同一个对象的数据,那么就需要保证该对象在内存中是唯一的</li>\n</ul>\n</li>\n<li>\n<p>设计方法:</p>\n<ol>\n<li>\n<p>不开放其他程序实例化此对象的权限</p>\n</li>\n<li>\n<p>在本类中实例化私有对象</p>\n</li>\n<li>\n<p>public 方法来使其他程序获取此对象数据</p>\n</li>\n<li>\n<p>因为 new 对象需要构造器初始化,所以令构造器 private,其他程序就无法 new 对象了</p>\n</li>\n</ol>\n</li>\n<li>\n<p>代码实现:</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 这种会在初始化时就创建好了静态类成员对象</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Single</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single</span>()</span> &#123;</span><br><span class=\"line\">  &#125; <span class=\"comment\">//私有化构造函数。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single s = <span class=\"keyword\">new</span> Single(); <span class=\"comment\">//创建私有并静态的本类对象。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single <span class=\"title\">getInstance</span>()</span> &#123; <span class=\"comment\">//定义公有并静态的方法，返回该对象。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 这种初始化时没调用构造器,对象只是null,在调用getInstance()方法时才会创建对象(懒加载)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Single2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Single2</span>()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Single2 s = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Single2 <span class=\"title\">getInstance</span>()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      s = <span class=\"keyword\">new</span> Single2();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "Java",
                "设计模式"
            ]
        }
    ]
}