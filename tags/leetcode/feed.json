{
    "version": "https://jsonfeed.org/version/1",
    "title": "⭐️齐下无贰⭐️ • All posts by \"leetcode\" tag",
    "description": "May all the beauty be bless.✨",
    "home_page_url": "https://weidows.github.io",
    "items": [
        {
            "id": "https://weidows.github.io/post/public-post/LeetCode/1/",
            "url": "https://weidows.github.io/post/public-post/LeetCode/1/",
            "title": "😵‍💫跟力扣斗智斗勇-log-1",
            "date_published": "2022-03-09T05:20:05.000Z",
            "content_html": "<h1>跟力扣斗智斗勇-log</h1>\n<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2022-03-31 22:39:27\n * @FilePath: \\Blog-private\\source\\_posts\\public-post\\LeetCode\\1.md\n * @Description:\n * @!: *********************************************************************\n--><blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li><a href=\"#%E8%B7%9F%E5%8A%9B%E6%89%A3%E6%96%97%E6%99%BA%E6%96%97%E5%8B%87-log\">跟力扣斗智斗勇-log</a>\n<ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95\">数据结构与算法</a>\n<ul>\n<li><a href=\"#%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC%E9%97%AE%E9%A2%98\">链表反转问题</a></li>\n<li><a href=\"#%E7%B4%A0%E6%95%B0\">素数</a></li>\n<li><a href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86\">二叉树前中后序遍历</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%A2%98%E8%A7%A3\">题解</a>\n<ul>\n<li><a href=\"#160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8\">160. 相交链表</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%96%B9%E6%B3%95\">方法</a>\n<ul>\n<li><a href=\"#%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95\">投票算法</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%9D%91\">坑</a>\n<ul>\n<li><a href=\"#python-%E5%8F%96%E6%95%B4%E4%B8%8E%E6%95%B4%E9%99%A4\">python-取整与整除</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%80%9F%E7%89%A9%E8%A1%A8\">借物表</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><a href=\"https://weidows.github.io/post/public-post/LeetCode/1/\">⏩ 文章地址</a> | <a href=\"https://github.com/Weidows-projects/public-post\">✔️ 仓库地址</a> 欢迎提交 pr !</p>\n<p>一题二写，三数之和，题解四瞅五瞄六瞧，水平还七上八下九流，十分辣鸡<br>\n十天九考，八皇会面，题干七页六道五问，答案仅四行三言两语，一点不会</p>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"数据结构与算法\">数据结构与算法</h2>\n<p>课程: 速览 ing</p>\n<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class=\"bbplayer\"><iframe class=\"bbplayer\" id=\"mmedia-fylkpgkFlyiAXNnt\" src=\"https://player.bilibili.com/player.html?bvid=BV1a54y1b74k&page=1&high_quality=1&danmaku=true\" allowfullscreen=\"allowfullscreen\" scrolling=\"no\" border=\"0\" frameborder=\"0\" framespacing=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups\"></iframe></div><script> document.getElementById(\"mmedia-fylkpgkFlyiAXNnt\").style.height=document.getElementById(\"mmedia-fylkpgkFlyiAXNnt\").scrollWidth*0.76+\"px\";\n    window.onresize = function(){\n      document.getElementById(\"mmedia-fylkpgkFlyiAXNnt\").style.height=document.getElementById(\"mmedia-fylkpgkFlyiAXNnt\").scrollWidth*0.76+\"px\";\n    }; </script>\n<h3 id=\"链表反转问题\">链表反转问题</h3>\n<p><code>迭代(栈)</code> / <code>递归</code></p>\n<p>这问题我面试时问我了,我回答的就是栈,面试官说栈要遍历两次,而递归一次就能出(函数参数添加 prev 节点)</p>\n<hr>\n<h3 id=\"素数\">素数</h3>\n<p>非素数(合数) / 素数(质数) : 都要排除 0 和 1</p>\n<ul>\n<li>\n<p>暴力法: 遍历 2 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.2397em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span></span></span></span> 之前的数字,如果能被整除,那么这个数字不是素数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i * i &lt; x; i++)&#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>埃塞法: 比如找 100 内有多少个素数 (25 个)</p>\n<p>构造 bool[100]</p>\n<p>找到 3 是素数, 那么 3x3=3, 3x4=12, 3x5=15…3x33=99 都不是素数,对应 bool[i]做标记,遍历时跳过</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"二叉树前中后序遍历\">二叉树前中后序遍历</h3>\n<ul>\n<li>\n<p>基本上是递归模板,比如中序遍历 BST 如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>详见这个题解: <a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/173.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8.java\">https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/173.二叉搜索树迭代器.java</a></p>\n</li>\n<li>\n<p>前后序遍历: <sup id='cite_ref-3'><a href=\"#cite_note-3\">[3]</a></sup></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"题解\">题解</h2>\n<h3 id=\"160-相交链表\">160. 相交链表</h3>\n<blockquote>\n<p><a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8.py\">https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/160.相交链表.py</a></p>\n</blockquote>\n<ul>\n<li>\n<p>此方法简单描述就是交叉接尾<br>\n<sup id='cite_ref-1'><a href=\"#cite_note-1\">[1]</a></sup></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getIntersectionNode</span>(<span class=\"params\">self, headA, headB</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type head1, head1: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        p, q = headA, headB</span><br><span class=\"line\">        <span class=\"keyword\">while</span> p != q:</span><br><span class=\"line\">            p = p.<span class=\"built_in\">next</span> <span class=\"keyword\">if</span> p <span class=\"keyword\">else</span> headB</span><br><span class=\"line\">            q = q.<span class=\"built_in\">next</span> <span class=\"keyword\">if</span> q <span class=\"keyword\">else</span> headA</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://www.helloimg.com/images/2022/03/09/RCFKPP.png\" alt=\"\"></p>\n<p><img src=\"https://www.helloimg.com/images/2022/03/09/RCFg7n.png\" alt=\"\"></p>\n<p>当前链表结尾后接上对方链表的头, 同时以两链表头为起点, 可以发现都走了 7 步后在交叉绿点相遇</p>\n</li>\n</ul>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"方法-2\">方法</h2>\n<h3 id=\"投票算法\">投票算法</h3>\n<p>可以看一下多数元素的题解 <sup id='cite_ref-2'><a href=\"#cite_note-2\">[2]</a></sup></p>\n<p>对于出现次数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>大于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>的元素,能抵消其他元素还有余量,最后 candidate 必然是众数</p>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"坑\">坑</h2>\n<h3 id=\"python-取整与整除\">python-取整与整除</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 整除: 对于正数是int(), 对于负数是round()</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span>//<span class=\"number\">2</span>)          <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(-<span class=\"number\">3</span>//<span class=\"number\">2</span>)         <span class=\"comment\"># -2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">9</span>//<span class=\"number\">5</span>)          <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(-<span class=\"number\">9</span>//<span class=\"number\">5</span>)         <span class=\"comment\"># -2</span></span><br><span class=\"line\"><span class=\"comment\"># 向下取整</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">3</span> / <span class=\"number\">2</span>))    <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(-<span class=\"number\">3</span> / <span class=\"number\">2</span>))   <span class=\"comment\"># -1</span></span><br><span class=\"line\"><span class=\"comment\"># 四舍五入</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">3</span> / <span class=\"number\">2</span>))  <span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">3</span> / <span class=\"number\">2</span>)) <span class=\"comment\"># -2</span></span><br><span class=\"line\"><span class=\"comment\"># 还有其他区别</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">14</span> - <span class=\"number\">3</span> / <span class=\"number\">2</span>))  <span class=\"comment\"># 12 (14-1.5=12.5 -&gt; 12)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">14</span> - <span class=\"number\">3</span> // <span class=\"number\">2</span>)) <span class=\"comment\"># 13 (14-1=13)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(- <span class=\"number\">3</span> / <span class=\"number\">2</span>))     <span class=\"comment\"># -1 (-1.5 -&gt; -1)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(-<span class=\"number\">3</span> // <span class=\"number\">2</span>))     <span class=\"comment\"># -2</span></span><br></pre></td></tr></table></figure>\n<p><a><img src=\"https://cdn.jsdelivr.net/gh/Weidows/Images/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"借物表-29\">借物表</h2>\n<p><a name='cite_note-1' href='#cite_ref-1'>[1]</a>: <a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiang-jiao-lian-biao-by-leetcode-solutio-a8jn/\">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiang-jiao-lian-biao-by-leetcode-solutio-a8jn/</a></p>\n<p><a name='cite_note-2' href='#cite_ref-2'>[2]</a>: <a href=\"https://leetcode-cn.com/problems/majority-element/solution/duo-shu-yuan-su-by-leetcode-solution/\">https://leetcode-cn.com/problems/majority-element/solution/duo-shu-yuan-su-by-leetcode-solution/</a></p>\n<p><a name='cite_note-3' href='#cite_ref-3'>[3]</a>: <a href=\"https://blog.csdn.net/u013834525/article/details/80421684\">https://blog.csdn.net/u013834525/article/details/80421684</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "面试",
                "算法",
                "leetcode",
                "数据结构"
            ]
        }
    ]
}