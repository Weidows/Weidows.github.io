{
    "version": "https://jsonfeed.org/version/1",
    "title": "⭐️齐下无贰⭐️ • All posts by \"算法\" tag",
    "description": "May all the beauty be bless.✨",
    "home_page_url": "https://blog.weidows.tech",
    "items": [
        {
            "id": "https://blog.weidows.tech/post/experience/LeetCode/1/",
            "url": "https://blog.weidows.tech/post/experience/LeetCode/1/",
            "title": "😵‍💫跟力扣斗智斗勇-log-1",
            "date_published": "2022-03-09T05:20:05.000Z",
            "content_html": "<h1>跟力扣斗智斗勇-log-1</h1>\n<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2023-04-20 18:25:09\n * @FilePath: \\Blog-private\\source\\_posts\\experience\\LeetCode\\1.md\n * @Description:\n * @!: *********************************************************************\n-->\n<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li><a href=\"#%E8%B7%9F%E5%8A%9B%E6%89%A3%E6%96%97%E6%99%BA%E6%96%97%E5%8B%87-log-1\">跟力扣斗智斗勇-log-1</a>\n<ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95\">数据结构与算法</a>\n<ul>\n<li><a href=\"#%E9%93%BE%E8%A1%A8%E5%8F%8D%E8%BD%AC%E9%97%AE%E9%A2%98\">链表反转问题</a></li>\n<li><a href=\"#%E7%B4%A0%E6%95%B0\">素数</a></li>\n<li><a href=\"#%E5%8C%BA%E5%88%86%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86\">区分二叉树遍历</a>\n<ul>\n<li><a href=\"#%E6%B7%B1%E5%BA%A6-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86\">深度-广度优先遍历</a></li>\n<li><a href=\"#%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86\">前中后序遍历</a></li>\n</ul>\n</li>\n<li><a href=\"#arraylist-linkedlist\">ArrayList-LinkedList</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%A2%98%E8%A7%A3\">题解</a>\n<ul>\n<li><a href=\"#160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8\">160. 相交链表</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E4%B8%AD%E8%90%BD%E5%8D%95%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0\">数组中落单的两个数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%96%B9%E6%B3%95\">方法</a>\n<ul>\n<li><a href=\"#%E6%8A%95%E7%A5%A8%E7%AE%97%E6%B3%95\">投票算法</a></li>\n<li><a href=\"#%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88\">快慢指针</a></li>\n<li><a href=\"#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">动态规划</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%9D%91\">坑</a>\n<ul>\n<li><a href=\"#python-%E5%8F%96%E6%95%B4%E4%B8%8E%E6%95%B4%E9%99%A4\">python-取整与整除</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%80%9F%E7%89%A9%E8%A1%A8\">借物表</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<!-- [⏩ 文章地址](https://weidows.github.io/post/experience/LeetCode/1/) | [✔️ 仓库地址](https://github.com/Weidows-projects/public-post/) 欢迎提交 pr ! -->\n<p>一题二写，三数之和，题解四瞅五瞄六瞧，水平还七上八下九流，十分辣鸡<br>\n十天九考，八皇会面，题干七页六道五问，答案仅四行三言两语，一点不会</p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"数据结构与算法\">数据结构与算法</h2>\n<p>课程: 速览 ing</p>\n<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class=\"bbplayer\"><iframe class=\"bbplayer\" id=\"mmedia-xnAKsoEOLNNXQOPT\" src=\"https://player.bilibili.com/player.html?bvid=BV1a54y1b74k&page=1&high_quality=1&danmaku=true&autoplay=0\" allowfullscreen=\"allowfullscreen\" scrolling=\"no\" border=\"0\" frameborder=\"0\" framespacing=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups\"></iframe></div><script> document.getElementById(\"mmedia-xnAKsoEOLNNXQOPT\").style.height=document.getElementById(\"mmedia-xnAKsoEOLNNXQOPT\").scrollWidth*0.76+\"px\";\n    window.onresize = function(){\n      document.getElementById(\"mmedia-xnAKsoEOLNNXQOPT\").style.height=document.getElementById(\"mmedia-xnAKsoEOLNNXQOPT\").scrollWidth*0.76+\"px\";\n    }; </script>\n<h3 id=\"链表反转问题\">链表反转问题</h3>\n<p><code>迭代(栈)</code> / <code>递归</code></p>\n<p>这问题我面试时问我了,我回答的就是栈,面试官说栈要遍历两次,而递归一次就能出(函数参数添加 prev 节点)</p>\n<hr>\n<h3 id=\"素数\">素数</h3>\n<p>非素数(合数) / 素数(质数) : 都要排除 0 和 1</p>\n<ul>\n<li>\n<p>暴力法: 遍历 2 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding=\"application/x-tex\">\\sqrt{n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.2397em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span></span></span></span> 之前的数字,如果能被整除,那么这个数字不是素数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i * i &lt; x; i++)&#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>埃塞法: 比如找 100 内有多少个素数 (25 个)</p>\n<p>构造 bool[100]</p>\n<p>找到 3 是素数, 那么 3x3=3, 3x4=12, 3x5=15…3x33=99 都不是素数,对应 bool[i]做标记,遍历时跳过</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"区分二叉树遍历\">区分二叉树遍历</h3>\n<h4 id=\"深度-广度优先遍历\">深度-广度优先遍历</h4>\n<ul>\n<li>\n<p>深度优先遍历: <code>递归</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>广度优先遍历: <code>队列</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"前中后序遍历\">前中后序遍历</h4>\n<p>前序也叫先序, 这三种都属于深度优先遍历</p>\n<ul>\n<li>\n<p>基本上是递归模板,比如中序遍历 BST 如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>详见这个题解: <a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/173.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8.java\">https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/173.二叉搜索树迭代器.java</a></p>\n</li>\n<li>\n<p>前后序遍历: <sup id='cite_ref-3'><a href=\"#cite_note-3\">[3]</a></sup></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  inOrder(root.left);</span><br><span class=\"line\">  inOrder(root.right);</span><br><span class=\"line\">  bstQueue.offer(root.val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h3 id=\"ArrayList-LinkedList\">ArrayList-LinkedList</h3>\n<p>顺序遍历时间复杂度相同, n 相同时 LinkedList 空间更大</p>\n<ul>\n<li>\n<p>ArrayList:</p>\n<p>随机查询快, 插入和删除慢(不可随机)</p>\n<blockquote>\n<p>随机指的是对任意指定 index 的操作</p>\n</blockquote>\n<hr>\n</li>\n<li>\n<p>LinkedList:</p>\n<p>随机查询慢, 插入和删除快(可随机)</p>\n<p>linkedlist 排序性能更好,并且较 arraylist 更节省空间 <sup id='cite_ref-4'><a href=\"#cite_note-4\">[4]</a></sup></p>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"题解\">题解</h2>\n<h3 id=\"160-相交链表\">160. 相交链表</h3>\n<blockquote>\n<p><a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/160.%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8.py\">https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/160.相交链表.py</a></p>\n</blockquote>\n<ul>\n<li>\n<p>此方法简单描述就是交叉接尾 <sup id='cite_ref-1'><a href=\"#cite_note-1\">[1]</a></sup></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">getIntersectionNode</span>(<span class=\"params\">self, headA, headB</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type head1, head1: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        p, q = headA, headB</span><br><span class=\"line\">        <span class=\"keyword\">while</span> p != q:</span><br><span class=\"line\">            p = p.<span class=\"built_in\">next</span> <span class=\"keyword\">if</span> p <span class=\"keyword\">else</span> headB</span><br><span class=\"line\">            q = q.<span class=\"built_in\">next</span> <span class=\"keyword\">if</span> q <span class=\"keyword\">else</span> headA</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br></pre></td></tr></table></figure>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/RCFKPP.png\" alt=\"\"></p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/RCFg7n.png\" alt=\"\"></p>\n<p>当前链表结尾后接上对方链表的头, 同时以两链表头为起点, 可以发现都走了 7 步后在交叉绿点相遇</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"数组中落单的两个数\">数组中落单的两个数</h3>\n<blockquote>\n<p>题目：一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。<sup id='cite_ref-6'><a href=\"#cite_note-6\">[6]</a></sup></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/%E6%95%B0%E7%BB%84%E4%B8%AD%E8%90%BD%E5%8D%95%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0.py\">https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/数组中落单的两个数.py</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">findTwoSingleNum</span>(<span class=\"params\">array</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 两个独立数的异或</span></span><br><span class=\"line\">    buff = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> array:</span><br><span class=\"line\">        buff ^= i</span><br><span class=\"line\"></span><br><span class=\"line\">    bias = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 从末尾轮着找为&#x27;1&#x27;的位 (也就是两独立数不同的位)</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (buff &amp; <span class=\"number\">1</span> != <span class=\"number\">1</span>):</span><br><span class=\"line\">        buff &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">        bias += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    res_0, res_1 = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 通过第bias位的0和1分为两个child-array, 分别all-XOR后就是两个结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> array:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;&gt; bias &amp; <span class=\"number\">1</span> == <span class=\"number\">1</span>): res_1 ^= i</span><br><span class=\"line\">        <span class=\"keyword\">else</span>: res_0 ^= i</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [res_0, res_1]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4:    100</span></span><br><span class=\"line\"><span class=\"comment\"># 5:    101</span></span><br><span class=\"line\"><span class=\"comment\"># 4^5:  001</span></span><br><span class=\"line\"><span class=\"comment\"># xxx1&amp;1: 1</span></span><br><span class=\"line\">arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(findTwoSingleNum(arr))</span><br></pre></td></tr></table></figure>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"方法\">方法</h2>\n<h3 id=\"投票算法\">投票算法</h3>\n<p>可以看一下多数元素的题解 <sup id='cite_ref-2'><a href=\"#cite_note-2\">[2]</a></sup></p>\n<p>对于出现次数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>大于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>的元素,能抵消其他元素还有余量,最后 candidate 必然是众数</p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h3 id=\"快慢指针\">快慢指针</h3>\n<p>常用于链表</p>\n<ol>\n<li>\n<p><a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.go\">判断是否存在 <code>环</code>, 相遇即成环</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hasCycle</span><span class=\"params\">(head *ListNode)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">  slow, fast := head, head</span><br><span class=\"line\">  <span class=\"keyword\">for</span> fast != <span class=\"literal\">nil</span> &amp;&amp; fast.Next != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    slow = slow.Next</span><br><span class=\"line\">    fast = fast.Next.Next</span><br><span class=\"line\">    <span class=\"keyword\">if</span> slow == fast &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/148.%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8.java\">寻找链表中点</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ListNode</span> <span class=\"variable\">slow</span> <span class=\"operator\">=</span> head, fast = head;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (fast != tail) &#123;</span><br><span class=\"line\">  slow = slow.next;</span><br><span class=\"line\">  fast = fast.next;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fast != tail) &#123;</span><br><span class=\"line\">    fast = fast.next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">ListNode</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> slow;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h3 id=\"动态规划\">动态规划</h3>\n<p>有的问题会需要<code>前瞻后顾 找最优 &quot;重叠&quot; 子结构</code>, 像是递归/迭代/贪心无法解决或者十分棘手, 瞥一眼又是中等+难度的, 多是 dp (dymanic-programming) 没跑了; 这种问题有个大致框架: <sup id='cite_ref-5'><a href=\"#cite_note-5\">[5]</a></sup></p>\n<ol>\n<li>\n<p>状态矩阵 <code>dp[n][n]</code></p>\n<p>dp[i][j] 一般存储第 i 到 j 位通过条件转换后的状态位/数值</p>\n</li>\n<li>\n<p>条件转换方程</p>\n<p>条件: if-else</p>\n<p>转换方程: 类似 <code>dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])</code> 这种形式</p>\n</li>\n<li>\n<p>最终结果就是最后一趟 i,j 的位置: 如下的 <code>dp[0][ n - 1]</code></p>\n</li>\n</ol>\n<hr>\n<ul>\n<li>\n<p>i, j 的遍历方向是根据转换方程来确定的, 比如 <a href=\"https://github.com/Weidows-projects/public-post/blob/main/LeetCode/code/516.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97.py\">516.最长回文子序列</a> 这个题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">longestPalindromeSubseq</span>(<span class=\"params\">self, s</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\"></span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span>] * n <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n - <span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            dp[i][i] = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> s[i] == s[j]:</span><br><span class=\"line\">                    dp[i][j] = dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"number\">2</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dp[i][j] = <span class=\"built_in\">max</span>(dp[i + <span class=\"number\">1</span>][j], dp[i][j - <span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][n - <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<p>在确定 <code>dp[i][j]</code> 前, 需要已经确定 <code>dp[i+1][j]</code> 和 <code>dp[i][j-1]</code></p>\n<p>也就是说: 外层 i 为逆序,从上往下推, 内层 j 为正序从左往右推 (x 为所推的值)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">i \\ j</th>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">7</th>\n<th style=\"text-align:center\">8</th>\n<th style=\"text-align:center\">9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:center\">x</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"坑\">坑</h2>\n<h3 id=\"python-取整与整除\">python-取整与整除</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 整除: 对于正数是int(), 对于负数是round()</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span>//<span class=\"number\">2</span>)          <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(-<span class=\"number\">3</span>//<span class=\"number\">2</span>)         <span class=\"comment\"># -2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">9</span>//<span class=\"number\">5</span>)          <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(-<span class=\"number\">9</span>//<span class=\"number\">5</span>)         <span class=\"comment\"># -2</span></span><br><span class=\"line\"><span class=\"comment\"># 向下取整</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">3</span> / <span class=\"number\">2</span>))    <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(-<span class=\"number\">3</span> / <span class=\"number\">2</span>))   <span class=\"comment\"># -1</span></span><br><span class=\"line\"><span class=\"comment\"># 四舍五入</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(<span class=\"number\">3</span> / <span class=\"number\">2</span>))  <span class=\"comment\"># 2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">round</span>(-<span class=\"number\">3</span> / <span class=\"number\">2</span>)) <span class=\"comment\"># -2</span></span><br><span class=\"line\"><span class=\"comment\"># 还有其他区别</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">14</span> - <span class=\"number\">3</span> / <span class=\"number\">2</span>))  <span class=\"comment\"># 12 (14-1.5=12.5 -&gt; 12)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">14</span> - <span class=\"number\">3</span> // <span class=\"number\">2</span>)) <span class=\"comment\"># 13 (14-1=13)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(- <span class=\"number\">3</span> / <span class=\"number\">2</span>))     <span class=\"comment\"># -1 (-1.5 -&gt; -1)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(-<span class=\"number\">3</span> // <span class=\"number\">2</span>))     <span class=\"comment\"># -2</span></span><br></pre></td></tr></table></figure>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"借物表\">借物表</h2>\n<p><a name='cite_note-0' href='#cite_ref-0'>[0]</a>: <a href=\"https://github.com/Weidows-projects/public-post/\">✔️ 仓库地址</a></p>\n<p><a name='cite_note-1' href='#cite_ref-1'>[1]</a>: <a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiang-jiao-lian-biao-by-leetcode-solutio-a8jn/\">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/xiang-jiao-lian-biao-by-leetcode-solutio-a8jn/</a></p>\n<p><a name='cite_note-2' href='#cite_ref-2'>[2]</a>: <a href=\"https://leetcode-cn.com/problems/majority-element/solution/duo-shu-yuan-su-by-leetcode-solution/\">https://leetcode-cn.com/problems/majority-element/solution/duo-shu-yuan-su-by-leetcode-solution/</a></p>\n<p><a name='cite_note-3' href='#cite_ref-3'>[3]</a>: <a href=\"https://blog.csdn.net/u013834525/article/details/80421684\">https://blog.csdn.net/u013834525/article/details/80421684</a></p>\n<p><a name='cite_note-4' href='#cite_ref-4'>[4]</a>: <a href=\"http://www.manongjc.com/detail/16-qngebjtzewkyzmi.html\">jdk8 下 ArrayList 与 LinedList 排序效率对比</a></p>\n<p><a name='cite_note-5' href='#cite_ref-5'>[5]</a>: <a href=\"https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/zui-chang-hui-wen-zi-xu-lie-by-leetcode-hcjqp/\">https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/zui-chang-hui-wen-zi-xu-lie-by-leetcode-hcjqp/</a></p>\n<p><a name='cite_note-6' href='#cite_ref-6'>[6]</a>: <a href=\"https://blog.csdn.net/qq_39705793/article/details/81237005\">异或的用途</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "算法",
                "LeetCode",
                "数据结构",
                "面试"
            ]
        },
        {
            "id": "https://blog.weidows.tech/post/Web/get-resources/",
            "url": "https://blog.weidows.tech/post/Web/get-resources/",
            "title": "🌏媒体资源加密-and-解密获取",
            "date_published": "2022-02-22T11:49:20.000Z",
            "content_html": "<h1>媒体资源加密-and-解密获取</h1>\n<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2024-08-06 15:36:23\n * @FilePath: \\Blog-private\\source\\_posts\\Web\\get-resources.md\n * @Description:\n * @!: *********************************************************************\n-->\n<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li><a href=\"#%E5%AA%92%E4%BD%93%E8%B5%84%E6%BA%90%E5%8A%A0%E5%AF%86-and-%E8%A7%A3%E5%AF%86%E8%8E%B7%E5%8F%96\">媒体资源加密-and-解密获取</a>\n<ul>\n<li><a href=\"#token-%E9%98%B2%E7%9B%97%E9%93%BE\">token-防盗链</a></li>\n<li><a href=\"#ffmpeg-hls-aes_128_cbc\">FFmpeg-HLS-AES_128_CBC</a>\n<ul>\n<li><a href=\"#%E5%88%86%E7%89%87\">分片</a></li>\n<li><a href=\"#%E5%88%86%E7%89%87%E4%BD%9C%E7%94%A8-%E5%BC%95%E5%AD%90\">分片作用-引子</a></li>\n<li><a href=\"#%E8%8A%B1%E6%B4%BB\">花活</a></li>\n<li><a href=\"#%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%B5%81%E7%A8%8B%E5%9B%BE\">加解密流程图</a></li>\n<li><a href=\"#openssl-%E6%89%8B%E5%8A%A8%E5%8A%A0%E5%AF%86\">openssl-手动加密</a>\n<ul>\n<li><a href=\"#encrypt-without-iv\">encrypt-without-iv</a></li>\n<li><a href=\"#encrypt-with-iv\">encrypt-with-iv</a></li>\n</ul>\n</li>\n<li><a href=\"#ffmpeg-%E5%88%86%E7%89%87%E5%8A%A0%E5%AF%86%E4%B8%80%E6%9D%A1%E9%BE%99\">FFmpeg-分片加密一条龙</a></li>\n<li><a href=\"#%E8%A7%A3%E5%AF%86-%E5%90%88%E5%B9%B6\">解密-合并</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%8E%B7%E5%8F%96\">获取</a>\n<ul>\n<li><a href=\"#%E8%A7%86%E9%A2%91\">视频</a></li>\n<li><a href=\"#%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87\">网页图片</a></li>\n<li><a href=\"#qq-%E7%BE%A4%E5%9B%BE%E7%89%87\">QQ-群图片</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%80%9F%E7%89%A9%E8%A1%A8\">借物表</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p>各类平台网页中的视频通常会被 <code>加密处理</code> 以防止别人拿走; 防盗技术还是有很多种的:<sup id='cite_ref-3'><a href=\"#cite_note-3\">[3]</a></sup></p>\n<ol>\n<li>FFmpeg-HLS-AES_128_CBC 加密</li>\n<li>url 中加入 token 验证</li>\n<li>验证用户身份再给链接(session,cookie)</li>\n<li>视频加水印</li>\n<li>限制跨域访问</li>\n<li>…etc</li>\n</ol>\n</li>\n</ul>\n<p>下面只摸一下技术层面的 <code>1.和2.</code></p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"token-防盗链\">token-防盗链</h2>\n<p>如 <code>http://xxxxxx.com/m3u8/hunan/desc.m3u8?stream_id=hunan&lt;m=1410595018&amp;lkey=8bc1e0fe35f6321ef560f8ccffb70e5d&amp;path=59.49.42.14,58.59.3.9,58.59.3.51&amp;platid=10&amp;splatid=1015&amp;tag=live&amp;cips=127.0.0.1&amp;ext=m3u8&amp;sign=live_tv</code> <sup id='cite_ref-8'><a href=\"#cite_note-8\">[8]</a></sup></p>\n<p>在 url 加上 时间戳,ip 地址,平台 id,splatid,tag,cips,ext,sign 等参数, 可以让服务器鉴别是否被其他网站/客户端请求, 并作出 403 响应</p>\n<p>同一参数的 url 无法被复用, 但是仍可以通过动态调整参数来绕过服务器的检测</p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"FFmpeg-HLS-AES-128-CBC\">FFmpeg-HLS-AES_128_CBC</h2>\n<ul>\n<li>\n<p>这么一坨 💩,什么意思嘛?</p>\n<p>FFmpeg 是最强大的视频编解码器, 可以把输入的视频处理成符合 HLS 规范的流媒体, 同时通过 AES-128-CBC 格式的秘钥加密视频</p>\n<p>浅入深出,别急慢慢吃… 下面结合这个库动动手就明白了:<sup id='cite_ref-4'><a href=\"#cite_note-4\">[4]</a></sup></p>\n<hr>\n</li>\n</ul>\n<h3 id=\"分片\">分片</h3>\n<ul>\n<li>\n<p>分片的方式比较简单,这里我们准备好一个 <code>demo.mp4</code>, 丢给 FFmpeg 下面的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i demo.mp4 -codec copy -f segment -segment_list index.m3u8 -segment_time 30 %d.ts</span><br></pre></td></tr></table></figure>\n<p>执行完会出来下面这些东西,这些 ts 文件就是分成片的小段视频,此处没加密可以直接播放</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRd0R.png\" alt=\"\"></p>\n<p>有些播放器支持的话 index.m3u8 也是可以播放的, 其实就是引用的这些 ts</p>\n<hr>\n</li>\n<li>\n<p>上面命令中 <code>index.m3u8</code> 这个文件是分片的索引文件, 指明了 ts 文件的先后顺序,时长,版本和加密等信息</p>\n<blockquote>\n<ul>\n<li>TS: MPEG2-Transport Stream,高清相机拍摄视频的封装格式;特点就是要求从视频流的任一片段开始都是可以独立解码的</li>\n<li>m3u8: HTTP Live Streaming（HLS） 协议格式的基础,Unicode 版本的 M3U，此文件用 UTF-8 编码<sup id='cite_ref-01'><a href=\"#cite_note-01\">[1]</a></sup> <br>\n下图 index 就是 m3u8,作用就是索引 ts<br>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRc4n.png\" alt=\"\"></li>\n</ul>\n</blockquote>\n<hr>\n</li>\n<li>\n<p>喏,index.m3u8 文件内容应该能看懂</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#EXTM3U</span><br><span class=\"line\">#EXT-X-VERSION:3</span><br><span class=\"line\">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class=\"line\">#EXT-X-ALLOW-CACHE:YES</span><br><span class=\"line\">#EXT-X-TARGETDURATION:32</span><br><span class=\"line\">#EXTINF:30.720000,</span><br><span class=\"line\">0.ts</span><br><span class=\"line\">#EXTINF:29.280000,</span><br><span class=\"line\">1.ts</span><br><span class=\"line\">#EXTINF:31.880000,</span><br><span class=\"line\">2.ts</span><br><span class=\"line\">#EXTINF:29.040000,</span><br><span class=\"line\">3.ts</span><br><span class=\"line\">#EXTINF:29.320000,</span><br><span class=\"line\">4.ts</span><br><span class=\"line\">#EXTINF:6.280000,</span><br><span class=\"line\">5.ts</span><br><span class=\"line\">#EXT-X-ENDLIST</span><br></pre></td></tr></table></figure>\n<hr>\n</li>\n</ul>\n<h3 id=\"分片作用-引子\">分片作用-引子</h3>\n<ol>\n<li>\n<p>分段加载视频而不是一口气加载到底</p>\n<p>大部分视频用户不会完完整整的看,分段加载减轻服务器压力,也使用户体验好</p>\n<p>(好几 G 的电影,一口气加载到底, 内存/缓存遭不住…)</p>\n</li>\n<li>\n<p>分片可以让用户无法<code>直接通过链接</code>在浏览器获取<code>完整的 mp4 视频</code></p>\n<p>但,可以通过获取所有 ts 文件合并为 mp4</p>\n<p>插件市场的一些插件可以通过 .m3u8 获取并合并.ts 间接获取完整的 .MP4</p>\n</li>\n</ol>\n<p>于是为了反破解出现了 <code>某些花活</code> 和 <code>视频加密</code></p>\n<hr>\n<h3 id=\"花活\">花活</h3>\n<ol>\n<li>\n<p>把 .m3u8 文件伪装成 .mp4, 可以让大部分没有伪装识别能力的爬虫找不着北 (比如 CoCocut)</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRSwv.png\" alt=\"\"><br>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRTHM.png\" alt=\"\"></p>\n</li>\n<li>\n<p>m3u8 中多层嵌套 m3u8 (套娃), 有些爬虫是支持的, 有的 G 了</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">#EXTM3U</span><br><span class=\"line\">#EXT-X-STREAM-<span class=\"keyword\">INF</span>:<span class=\"keyword\">PROGRAM</span>-ID=1,BANDWIDTH=1064000</span><br><span class=\"line\">1000kbps.m3u8</span><br><span class=\"line\">#EXT-X-STREAM-<span class=\"keyword\">INF</span>:<span class=\"keyword\">PROGRAM</span>-ID=1,BANDWIDTH=564000</span><br><span class=\"line\">500kbps.m3u8</span><br><span class=\"line\">#EXT-X-STREAM-<span class=\"keyword\">INF</span>:<span class=\"keyword\">PROGRAM</span>-ID=1,BANDWIDTH=282000</span><br><span class=\"line\">250kbps.m3u8</span><br><span class=\"line\">#EXT-X-STREAM-<span class=\"keyword\">INF</span>:<span class=\"keyword\">PROGRAM</span>-ID=1,BANDWIDTH=2128000</span><br><span class=\"line\">2000kbps.m3u8</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>…etc</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"加解密流程图\">加解密流程图</h3>\n<p>原创哦,转载请标记</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRvhz.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"openssl-手动加密\">openssl-手动加密</h3>\n<h4 id=\"encrypt-without-iv\">encrypt-without-iv</h4>\n<p>此处通过 shell 脚本分析,墙裂建议结合仓库学习:<sup id='cite_ref-4'><a href=\"#cite_note-4\">[4]</a></sup></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">workPath=&quot;2.encrypted-without-iv&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清除原先的</span></span><br><span class=\"line\">rm -rf $workPath/*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">分片</span></span><br><span class=\"line\">ffmpeg -i demo.mp4 -codec copy -f segment -segment_list $workPath/index.m3u8 -segment_time 30 $workPath/%d.ts</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取加密秘钥</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">openssl rand 16</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  随机生成 16B 二进制数据 (16*8=128 位, 对应AES-128-CBC名称)</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># tee -a $workPath/enc.key</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  将生成的数据输出到秘钥文件 enc.key, 同时把数据交给 hexdump 处理</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># hexdump -e &#x27;16/1 &quot;%02x&quot;&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  hexdump -e <span class=\"string\">&#x27;a/b format1 format2&#x27;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    a个字节/8位 -&gt; format2 (a可省,默认为1)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    b个字节/8位 -&gt; format1</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    详见: https://blog.csdn.net/bytxl/article/details/43738103</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\">#   每1字节/8位 -&gt; %02x -&gt; 2位16进制</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    也就是二进制转16进制,每4位合1位, 128/4=32位16进制</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  每16字节的结果为1行, 那去掉这个16可以吗?</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    应该是不行的,结果会出错,例如:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    4a6afd460c84c498b8a817ad66392ef2 √</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    46fd6a4a98c4840cad17a8b8f22e3966 ×</span></span><br><span class=\"line\">encryptionKey=`openssl rand 16 | tee -a $workPath/enc.key | hexdump -e &#x27;16/1 &quot;%02x&quot;&#x27;`</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ts 文件数</span></span><br><span class=\"line\">numberOfTsFiles=`ls $workPath/*.ts | wc -l`</span><br><span class=\"line\"></span><br><span class=\"line\">for ((i=0; i&lt;$numberOfTsFiles; i ++)) do</span><br><span class=\"line\">    # without-iv也就是默认iv为32位文件序列号</span><br><span class=\"line\">    #   如 5.ts -&gt; 00000000000000000000000000000005</span><br><span class=\"line\">    initializationVector=`printf &#x27;%032x&#x27; $i`</span><br><span class=\"line\"></span><br><span class=\"line\">    # 对每个分片加密</span><br><span class=\"line\">    openssl aes-128-cbc -e -in $workPath/$i.ts -out $workPath/enc_$i.ts -nosalt -iv $initializationVector -K $encryptionKey</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">寻找并添加加密方法和秘钥URL</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  找 <span class=\"string\">&quot;#EXT-X-TARGETDURATION:&quot;</span> 这一段,并在下一行添加</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  <span class=\"comment\">#EXT-X-KEY:METHOD=AES-128,URI=&quot;enc.key&quot;</span></span></span><br><span class=\"line\">sed &#x27;/#EXT-X-TARGETDURATION:/a #EXT-X-KEY:METHOD=AES-128,URI=&quot;enc.key&quot;&#x27; $workPath/index.m3u8 &gt; $workPath/index_new.m3u8</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">覆盖</span></span><br><span class=\"line\">mv $workPath/index_new.m3u8 $workPath/index.m3u8</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>如图,加密后的 ts 就不能直接播放了</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRzam.png\" alt=\"\"></p>\n</li>\n</ul>\n<hr>\n<h4 id=\"encrypt-with-iv\">encrypt-with-iv</h4>\n<p>这个 iv (initialisation vector,初始化向量) 有点迷, 作用是增强随机性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">workPath=&quot;3.encrypted-with-iv&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf $workPath/*</span><br><span class=\"line\"></span><br><span class=\"line\">ffmpeg -i demo.mp4 -codec copy -f segment -segment_list $workPath/index.m3u8 -segment_time 30 $workPath/%d.ts</span><br><span class=\"line\"></span><br><span class=\"line\">encryptionKey=`openssl rand 16 | tee -a $workPath/enc.key | hexdump -e &#x27;16/1 &quot;%02x&quot;&#x27;`</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ivKey 偏移量,32位16进制数据,如: f86b5decdb6359cb1023e308651dccfb</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">不需要另存文件, 只需要写在 m3u8 文件里</span></span><br><span class=\"line\">ivKey=`openssl rand -hex 16`</span><br><span class=\"line\"></span><br><span class=\"line\">numberOfTsFiles=`ls $workPath/*.ts | wc -l`</span><br><span class=\"line\"></span><br><span class=\"line\">for ((i=0; i&lt;$numberOfTsFiles; i ++)) do</span><br><span class=\"line\">    openssl aes-128-cbc -e -in $workPath/$i.ts -out $workPath/enc_$i.ts -nosalt -iv $ivKey -K $encryptionKey</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下面 <span class=\"variable\">$&#123;ivKey&#125;</span> 需要获取变量,所以字符串要用<span class=\"string\">&quot;&quot;</span>而不能是<span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\">sed &quot;/#EXT-X-TARGETDURATION:/a #EXT-X-KEY:METHOD=AES-128,URI=\\&quot;enc.key\\&quot;,IV=0x$&#123;ivKey&#125;&quot; $workPath/index.m3u8 &gt; $workPath/index_new.m3u8</span><br><span class=\"line\"></span><br><span class=\"line\">mv $workPath/index_new.m3u8 $workPath/index.m3u8</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"FFmpeg-分片加密一条龙\">FFmpeg-分片加密一条龙</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">workPath=&quot;4.encrypt-with-FFmpeg&quot;</span><br><span class=\"line\">urlPrefix=&quot;weidows.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf $workPath/*</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">enc.keyinfo</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  写到 m3u8 里的 keyURL | https://hlsbook.net/enc.key</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  加密用的 key 文件地址  | enc.key</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  IV值 (可选)          | ecd0d06eaf884d8226c33928e87efa33</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  详见: https://hlsbook.net/how-to-encrypt-hls-video-with-ffmpeg/</span></span><br><span class=\"line\"></span><br><span class=\"line\">openssl rand 16 &gt; $workPath/enc.key</span><br><span class=\"line\"></span><br><span class=\"line\">tmpfile=`mktemp`</span><br><span class=\"line\">echo $urlPrefix/enc.key &gt; $tmpfile</span><br><span class=\"line\">echo $workPath/enc.key &gt;&gt; $tmpfile</span><br><span class=\"line\">echo `openssl rand -hex 16` &gt;&gt; $tmpfile</span><br><span class=\"line\">mv $tmpfile $workPath/enc.keyinfo</span><br><span class=\"line\"></span><br><span class=\"line\">ffmpeg -y -i demo.mp4 -c copy -hls_time 30 -hls_key_info_file $workPath/enc.keyinfo -hls_playlist_type vod -hls_segment_filename $workPath/enc_%d.ts $workPath/index.m3u8</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>index.m3u8</p>\n<p>可见生成的没什么问题,而且可以通过下面的方法正常解密</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#EXTM3U</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXT-X-VERSION</span>:<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXT-X-TARGETDURATION</span>:<span class=\"number\">32</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXT-X-MEDIA-SEQUENCE</span>:<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXT-X-PLAYLIST-TYPE</span>:VOD</span><br><span class=\"line\"><span class=\"selector-id\">#EXT-X-KEY</span>:METHOD=AES-<span class=\"number\">128</span>,URI=<span class=\"string\">&quot;./enc.key&quot;</span>,IV=<span class=\"number\">0</span>x2b5cc8a84648ed8ce5f64e5845d3cb7c</span><br><span class=\"line\"><span class=\"selector-id\">#EXTINF</span>:<span class=\"number\">30.720000</span>,</span><br><span class=\"line\">enc_0<span class=\"selector-class\">.ts</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXTINF</span>:<span class=\"number\">29.280000</span>,</span><br><span class=\"line\">enc_1<span class=\"selector-class\">.ts</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXTINF</span>:<span class=\"number\">31.880000</span>,</span><br><span class=\"line\">enc_2<span class=\"selector-class\">.ts</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXTINF</span>:<span class=\"number\">29.040000</span>,</span><br><span class=\"line\">enc_3<span class=\"selector-class\">.ts</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXTINF</span>:<span class=\"number\">29.320000</span>,</span><br><span class=\"line\">enc_4<span class=\"selector-class\">.ts</span></span><br><span class=\"line\"><span class=\"selector-id\">#EXTINF</span>:<span class=\"number\">6.280000</span>,</span><br><span class=\"line\">enc_5<span class=\"selector-class\">.ts</span></span><br><span class=\"line\">#EXT-X-ENDLIST</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"解密-合并\">解密-合并</h3>\n<p>上面加密会了的话,解密就简单了,完全就是反过来</p>\n<p>合并方法取自: <sup id='cite_ref-6'><a href=\"#cite_note-6\">[6]</a></sup></p>\n<p>这篇文章<sup id='cite_ref-5'><a href=\"#cite_note-5\">[5]</a></sup>简单介绍了下如何手动解密,其文中把 key 和 iv 位数标错为 16 了,别误解</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">inputPath=<span class=\"string\">&quot;2.encrypted-without-iv&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ivKey=<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">inputPath=<span class=\"string\">&quot;3.encrypted-with-iv&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ivKey=<span class=\"string\">&quot;0d5cce6d9fbfae9dcc86cb3f12d4eb4b&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加密 enc_*.ts 输入路径</span></span><br><span class=\"line\">inputPath=&quot;4.encrypt-with-FFmpeg&quot;</span><br><span class=\"line\">ivKey=&quot;36bb7a1e43e1d3d88b779243817a67bc&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">解密 dec_*.ts 和合并后 mp4 输出路径</span></span><br><span class=\"line\">outputPath=&quot;5.decrypt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rm -rf $outputPath/*</span><br><span class=\"line\"></span><br><span class=\"line\">encryptionKey=$(hexdump -e &#x27;16/1 &quot;%02x&quot;&#x27; $inputPath/enc.key)</span><br><span class=\"line\"></span><br><span class=\"line\">numberOfTsFiles=`ls $inputPath/enc_*.ts | wc -l`</span><br><span class=\"line\"></span><br><span class=\"line\">for ((i=0; i&lt;$numberOfTsFiles; i ++)) do</span><br><span class=\"line\">    if [[ $ivKey == &quot;&quot; ]]; then</span><br><span class=\"line\">        ivKey=$(printf &#x27;%032x&#x27; $i)</span><br><span class=\"line\">    fi</span><br><span class=\"line\"></span><br><span class=\"line\">    openssl aes-128-cbc -d -in $inputPath/enc_$i.ts -out $outputPath/dec_$i.ts -nosalt -iv $ivKey -K $encryptionKey</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">合并</span></span><br><span class=\"line\">ffmpeg -allowed_extensions ALL -i $inputPath/index.m3u8 -acodec copy -vcodec copy -f mp4 $outputPath/combine.mp4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>如图 <code>dec_*.ts</code> 为解密后的文件,可以直接播放了</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVR0xA.png\" alt=\"\"></p>\n<p>可以看项目中的 <code>5.</code>, 合并后的 mp4 也没有问题</p>\n<p>但 原视频 != 分片加解密合并后的视频, 大小差不多但是会有差异 (9.87MB vs 9.95MB)</p>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"获取\">获取</h2>\n<p>下面就是对资源获取方式的 <code>推荐</code> 了</p>\n<h3 id=\"视频\">视频</h3>\n<blockquote>\n<p>CoCocut: 这个插件官方直接说了不支持爬加密视频,但是大部分平台用起来<s>还是很棒的</s>,插件中最棒的<br>\n有个小弊病, 它不开会员的话是超慢的单线程下载… 我常用它获取 m3u8 地址让下面这伙计下载</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/nilaoda/N_m3u8DL-CLI\">N_m3u8DL-CLI</a>: 这家伙可以通过 m3u8 下载加密视频; 支持多线程,很快 <img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVct49.png\" alt=\"\"><br>\n可以手动破解加密视频 <sup id='cite_ref-7'><a href=\"#cite_note-7\">[7]</a></sup></p>\n</blockquote>\n<blockquote>\n<p>QQ 浏览器手机 app, 直接进对应网页就可以爬下来视频,加密的也可以,速度拉满 (小母牛倒立 🐄🍺</p>\n</blockquote>\n<hr>\n<h3 id=\"网页图片\">网页图片</h3>\n<ul>\n<li>\n<p>下面两个差不多,都是把页面现有的图片都扒下来, <code>按域名分类</code>,很容易筛选出来</p>\n<p>这方法并不适用于获取视频.</p>\n<blockquote>\n<p>梦想资源下载器</p>\n</blockquote>\n<blockquote>\n<p>网页右键另存为<br>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRbW9.png\" alt=\"\"></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>Picviewer CE+</p>\n</blockquote>\n<hr>\n<h3 id=\"QQ-群图片\">QQ-群图片</h3>\n<p>经常有老哥在群里发图,苦于一张张保存手抽筋,发现了此方法:</p>\n<ol>\n<li>\n<p>打开电脑版消息管理器,找到那些聊天记录</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRQg0.png\" alt=\"\"></p>\n</li>\n<li>\n<p>选择,复制</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVRN95.png\" alt=\"\"></p>\n</li>\n<li>\n<p>发送给 <code>我的手机</code></p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVR7Hh.png\" alt=\"\"></p>\n</li>\n<li>\n<p>然后就无了, 这手段对于保存好几十/上百张图十分便利</p>\n</li>\n</ol>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"借物表\">借物表</h2>\n<p><a name='cite_note-01' href='#cite_ref-01'>[1]</a>: <a href=\"https://www.jianshu.com/p/426425cad08a\">HLS 协议介绍</a></p>\n<p><a name='cite_note-2' href='#cite_ref-2'>[2]</a>: <a href=\"https://github.com/fftt2017/hls-m3u8-sample\">https://github.com/fftt2017/hls-m3u8-sample</a></p>\n<p><a name='cite_note-3' href='#cite_ref-3'>[3]</a>: <a href=\"https://zhuanlan.zhihu.com/p/32014463\">在线教育类网站视频加密视频安全的一些方法</a></p>\n<p><a name='cite_note-4' href='#cite_ref-4'>[4]</a>: <a href=\"https://github.com/Weidows-projects/hls-m3u8-sample\">https://github.com/Weidows-projects/hls-m3u8-sample</a>, 此库是在<sup id='cite_ref-2'><a href=\"#cite_note-2\">[2]</a></sup>的基础上改进的</p>\n<p><a name='cite_note-5' href='#cite_ref-5'>[5]</a>: <a href=\"https://www.52pojie.cn/thread-971265-1-1.html\">解密 m3u8 文件, ts 文件解密, hls 解密.</a></p>\n<p><a name='cite_note-6' href='#cite_ref-6'>[6]</a>: <a href=\"https://blog.csdn.net/Yao_2333/article/details/82910560\">ffmpeg-简单 AES 加解密记录</a></p>\n<p><a name='cite_note-7' href='#cite_ref-7'>[7]</a>: <a href=\"https://www.appinn.com/download-video-30482/\">恕我直言，再难下载的视频，手搓大佬终究还是有办法</a></p>\n<p><a name='cite_note-8' href='#cite_ref-8'>[8]</a>: <a href=\"https://www.zhihu.com/question/20697986/answer/128433075\">HLS 如何实现加密 ？</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "推荐",
                "浏览器",
                "扩展",
                "FFmpeg",
                "算法",
                "hexdump",
                "HLS",
                "openssl",
                "shell",
                "密码学",
                "QQ"
            ]
        },
        {
            "id": "https://blog.weidows.tech/post/experience/basic/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "https://blog.weidows.tech/post/experience/basic/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "🌈基础知识",
            "date_published": "2021-03-25T03:32:45.000Z",
            "content_html": "<h1>基础知识</h1>\n<!--\n * @?: *********************************************************************\n * @Author: Weidows\n * @LastEditors: Weidows\n * @LastEditTime: 2022-09-15 22:48:51\n * @FilePath: \\Blog-private\\source\\_posts\\experience\\basic\\基础知识.md\n * @Description:\n * @!: *********************************************************************\n-->\n<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li><a href=\"#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\">基础知识</a>\n<ul>\n<li><a href=\"#%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE\">思维导图</a></li>\n<li><a href=\"#%E7%A1%AC%E4%BB%B6\">硬件</a>\n<ul>\n<li><a href=\"#%E5%8E%9F%E5%8F%8D%E8%A1%A5%E7%A0%81\">原反补码</a></li>\n<li><a href=\"#%E5%8D%95%E7%89%87%E6%9C%BA\">单片机</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0\">复变函数</a>\n<ul>\n<li><a href=\"#%E5%A4%8D%E6%95%B0\">复数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C\">计算机网络</a>\n<ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82\">数据链路层</a>\n<ul>\n<li><a href=\"#%E5%AA%92%E4%BD%93%E6%8E%A5%E5%85%A5%E6%8E%A7%E5%88%B6%E5%88%86%E7%B1%BB\">媒体接入控制分类</a></li>\n<li><a href=\"#csmacd\">CSMA/CD</a></li>\n<li><a href=\"#mac-%E5%B1%82%E5%8D%8F%E8%AE%AE\">MAC 层协议</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%BD%91%E7%BB%9C%E5%B1%82\">网络层</a>\n<ul>\n<li><a href=\"#%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E5%8D%8F%E8%AE%AE\">路由选择协议</a></li>\n<li><a href=\"#%E8%B7%AF%E7%94%B1%E4%BF%A1%E6%81%AF%E5%8D%8F%E8%AE%AE-rip-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">路由信息协议 RIP 的基本工作原理</a></li>\n<li><a href=\"#%E5%BC%80%E6%94%BE%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%BC%98%E5%85%88-ospf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">开放最短路径优先 OSPF 的基本工作原理</a></li>\n<li><a href=\"#%E8%BE%B9%E7%95%8C%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE-bgp\">边界网关协议 BGP</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E7%A6%BB%E6%95%A3\">离散</a>\n<ul>\n<li><a href=\"#%E5%9B%BE\">图</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1\">算法分析与设计</a>\n<ul>\n<li><a href=\"#%E9%A2%98%E7%9B%AE\">题目</a>\n<ul>\n<li><a href=\"#%E6%9C%80%E5%A4%A7%E5%9B%A2-%E6%9C%80%E5%A4%A7%E7%8B%AC%E7%AB%8B%E9%9B%86\">最大团-最大独立集</a></li>\n<li><a href=\"#01-%E8%83%8C%E5%8C%85\">01-背包</a></li>\n<li><a href=\"#%E7%9F%A9%E9%98%B5%E8%BF%9E%E4%B9%98\">矩阵连乘</a></li>\n<li><a href=\"#%E5%85%AB%E7%9A%87%E5%90%8E%E8%A7%A3%E6%B3%95%E9%80%9F%E8%AE%B0\">八皇后解法速记</a></li>\n<li><a href=\"#%E9%9A%8F%E6%9C%BA%E5%8C%96%E7%AE%97%E6%B3%95\">随机化算法</a></li>\n<li><a href=\"#%E6%B8%90%E8%BF%91%E9%98%B6%E9%AB%98%E4%BD%8E\">渐近阶高低</a></li>\n<li><a href=\"#%E6%95%B0%E8%AE%BA%E5%9B%9B%E5%A4%A7%E5%AE%9A%E7%90%86\">数论四大定理</a></li>\n<li><a href=\"#%E6%A3%8B%E7%9B%98%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98\">棋盘覆盖问题</a></li>\n<li><a href=\"#%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2\">二分搜索</a></li>\n<li><a href=\"#%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91\">斐波那契</a></li>\n<li><a href=\"#%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97\">最长公共子序列</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD\">人工智能</a></li>\n<li><a href=\"#%E9%9B%B6%E6%95%A3%E7%9A%84\">零散的</a>\n<ul>\n<li><a href=\"#%E6%B2%B3%E5%B7%A5%E5%A4%A7-uml\">河工大-UML</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%80%9F%E7%89%A9%E8%A1%A8\">借物表</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>已录入 <a href=\"../../../others/LearnWay#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\">😍Weidows-の成长路线#基础知识</a></p>\n</blockquote>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"思维导图\">思维导图</h2>\n<p>一些零散的不足以道,做成导图了</p>\n<blockquote class=\"pullquote mindmap mindmap-lg\"><ul>\n<li>基础知识\n<ul>\n<li>数据结构\n<ul>\n<li><a href=\"https://www.cnblogs.com/zmc940317/articles/10925497.html\">二叉树的前,中,后序遍历详解</a></li>\n</ul>\n</li>\n<li>操作系统\n<ul>\n<li><a href=\"../../../system/process-thread\">我给总结了一下: 🤷‍♂️ 进程,线程,CPU 核心,并行,并发大杂碎!</a></li>\n<li><a href=\"https://blog.csdn.net/qq_33414271/article/details/80245715\">一句话+一张图说清楚——银行家算法</a></li>\n<li><a href=\"https://blog.csdn.net/a745233700/article/details/86011504\">操作系统：经典进程同步问题 之 生产者-消费者问题、读者-写者问题、哲学家进餐问题</a></li>\n<li><a href=\"https://blog.csdn.net/lala_wang/article/details/81116781?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242\">调度算法的介绍及优缺点</a></li>\n</ul>\n</li>\n<li>编译原理\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_39384184/article/details/86037568\">编译原理：总结</a></li>\n</ul>\n</li>\n<li>硬件\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1sE411L7j5\">【一天掌握 51 单片机基础】<em>单片机原理及应用</em>东北大学（高宏亮 主讲）</a></li>\n</ul>\n</li>\n<li>数据库\n<ul>\n<li>MySQL\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1NJ411J79W\">【狂神说 Java】MySQL 最新教程通俗易懂</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_45483328/article/details/113759286?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control\">狂神说数据库笔记</a></li>\n</ul>\n</li>\n<li>MongoDB\n<ul>\n<li>有 MySQL 基础能很快上手</li>\n<li><a href=\"https://github.com/krislinzhao/StudyNotes/tree/master/MongoDB\">krislinzhao/StudyNotes</a></li>\n</ul>\n</li>\n<li>通用\n<ul>\n<li><a href=\"https://blog.csdn.net/wxwzy738/article/details/17590305\">MySQL 单列索引和组合索引的区别介绍</a>\n<ul>\n<li>质量相当高的文章</li>\n</ul>\n</li>\n<li><a href=\"https://mp.weixin.qq.com/s/3ZdACGiA0SutmbDxMeF-UA\">我们为什么要分库分表？</a>\n<ul>\n<li>这篇封神了,把我最近在数据库业务设计方面的疑问解决了.</li>\n</ul>\n</li>\n<li><a href=\"https://www.52pojie.cn/thread-1569242-1-1.html\">读写分离</a></li>\n</ul>\n</li>\n<li>课程\n<ul>\n<li><a href=\"https://www.docin.com/p-1564094016.html\">数据库考试试题及答案</a></li>\n<li><a href=\"https://www.cnblogs.com/Soprano/p/10659101.html\">子查询</a></li>\n</ul>\n</li>\n<li>Neo4j\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1EB4y1a7Sf?p=15\">让所有程序员都能学懂的 Neo4j 数据库教程，B 站史上最实用的 Neo4j 数据库入门到实战学习教程</a></li>\n<li><a href=\"https://www.zmonster.me/2019/04/30/neo4j-introduction.html#org02654fb\">图数据库 Neo4j 的部署、数据导入和简单使用</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>算法-数学\n<ul>\n<li>傅里叶变换\n<ul>\n<li><a href=\"../%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF#%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2\">👽 通信技术-开坑自埋</a></li>\n</ul>\n</li>\n<li>P/NP 问题\n<ul>\n<li><a href=\"https://baike.baidu.com/item/P%E5%AF%B9NP%E9%97%AE%E9%A2%98\">P 对 NP 问题</a></li>\n<li><a href=\"https://www.omegaxyz.com/2019/04/22/np/?hilite=%27filled%27,%27o.e.m%27\">算法复杂度与 NP 问题</a></li>\n<li><a href=\"http://www.cainiaoxueyuan.com/suanfa/4517.html\">贪婪算法案例、np 完全问题及 java 代码实现</a>\n<ul>\n<li>非常经典和值得探索的问题 (经验接收自@河北工业大学)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Hash-算法\n<ul>\n<li>用来校验文本/文件,主流有三类,不同算法产生的 hash code 不同\n<ul>\n<li>MD5</li>\n<li>CRC-32, CRC-64</li>\n<li>SHA-1, SHA-256, SHA-384, SHA-512</li>\n</ul>\n</li>\n<li>校验方法\n<ul>\n<li><a href=\"https://blog.csdn.net/weixin_30799995/article/details/94896898\">文件完整性校验</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>排序算法\n<ul>\n<li><a href=\"https://www.cnblogs.com/chengxiao/p/6194356.html\">图解排序算法(四)之归并排序</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>论文\n<ul>\n<li><a href=\"https://cloud.tencent.com/developer/news/231960\">如何将 CNKI 论文信息转换成你想要的参考文献格式</a>\n<ul>\n<li>关键时候挺好用的功能</li>\n</ul>\n</li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/54344547\">word 操作技巧：有关脚注和尾注的使用方法</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"硬件\">硬件</h2>\n<h3 id=\"原反补码\">原反补码</h3>\n<ul>\n<li>\n<p>开局三张图,故事全靠编 🤣</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVtBQE.png\" alt=\"20210325114342\" />\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVtZcX.png\" alt=\"20210325114403\" />\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVtRJ9.png\" alt=\"20210325114419\" />\n</li>\n<li>\n<p>因为带有符号位的二进制数在计算机内计算时,原码和反码的运算结果都不是 100%正确,而且会有<code>+0</code>和<code>-0</code>两个零</p>\n</li>\n<li>\n<p>补码 100%正确,于是我们采用补码,而且补码只有一个零</p>\n<ul>\n<li>补码就是为了解决这两个问题的,没了.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"单片机\">单片机</h3>\n<ul>\n<li>\n<p>标志寄存器内部的八位是分开使用的,作用不同,但功能都是作为标志位</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVtJm5.png\" alt=\"20210331121042\" />\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVtxyA.png\" alt=\"20210331122847\" />\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVtsVm.png\" alt=\"20210331122957\" />\n</li>\n</ul>\n<p><a href=\"https://www.jdzj.com/diangong/article/2018-2-3/95275-1.htm\">单片机时钟周期、机器周期、指令周期与总线周期</a></p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"复变函数\">复变函数</h2>\n<h3 id=\"复数\">复数</h3>\n<ul>\n<li>\n<p>运算<br>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVtqQz.png\" alt=\"20210402161142\" /></p>\n</li>\n<li>\n<p>一般表示<br>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVtorg.png\" alt=\"20210325170144\" /></p>\n</li>\n<li>\n<p>几何表示<br>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVtP3M.png\" alt=\"20210325170538\" /></p>\n</li>\n<li>\n<p>幂与根<br>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVtXZn.png\" alt=\"20210325181554\" /></p>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"计算机网络\">计算机网络</h2>\n<blockquote>\n<p>摘自 <a href=\"https://space.bilibili.com/360996402/\">湖科大教书匠-计算机网络</a></p>\n</blockquote>\n<h3 id=\"数据链路层\">数据链路层</h3>\n<h4 id=\"媒体接入控制分类\">媒体接入控制分类</h4>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVSwgX.png\" alt=\"20210930170530\" />\n<h4 id=\"CSMA-CD\">CSMA/CD</h4>\n<blockquote>\n<p><a href=\"https://www.136.la/tech/show-132262.html\">2016.6.20 计算机网络复习要点第三章之 CSMA/CD 协议(示例代码)</a></p>\n</blockquote>\n<p>采用随机接入,当多个主机同时发送帧时会<code>发生碰撞/冲突</code>.无连接不可靠,尽力交付的服务.</p>\n<ul>\n<li>\n<p>CSMA/CD (载波监听多点接入/碰撞检测) 是以太网采用的<code>解决冲突</code>的方法</p>\n<ul>\n<li>多路接入 MA: 多个站点接入同一条总线上,竞争使用总线</li>\n<li>载波监听 CS: 站点发送数据前，先检查总线上是不是已经有数据在传输，如果有就暂缓发送，避免冲突。</li>\n<li>冲突检测: 边发送边对介质上电压信号进行检测，当电压摆动值超过一定门限时就认为发生了冲突。一旦发生冲突就停止发送数据，然后根据协议进行重传。</li>\n</ul>\n<hr>\n</li>\n<li>\n<p>在使用 CSMA/CD 协议时，一个站不可能同时进行发送和接收（但必须边发送边监听）。因此，使用 CSMA/CD 协议的以太网不可能进行全双工通信而只能进行半双工通信（双向交替通信）；</p>\n<ul>\n<li>\n<p>每一个站在自己发送数据之后的一小段时间内，存在着遭遇碰撞的可能性，这一小段时间是不确定的，它取决于另一个发送数据的站到本站的距离；</p>\n</li>\n<li>\n<p>最先发送数据帧的 A 站，在发送数据帧后至多经过时间 2r 就可知道所发送的数据帧是否遭受到碰撞；因此，以太网端到端往返时间 2r 称为争用期（碰撞窗口）；</p>\n</li>\n<li>\n<p>经过争用期还没有检测到碰撞，才能肯定后续发送的数据一定不会发送碰撞；</p>\n</li>\n<li>\n<p>凡是长度小于 64 字节的帧都是由于冲突而异常中止的无效帧，只要收到了这种无效帧，就应当立即将其丢弃；</p>\n</li>\n</ul>\n<hr>\n</li>\n<li>\n<p>采用截断二进制指数退避算法来确定碰撞后重传的时机</p>\n<ul>\n<li>\n<p>让发生碰撞的站停止发送数据后，不是等待信道变为空闲后就立即发送数据，而是推迟（退避）一个随机的时间</p>\n</li>\n<li>\n<p>单位回退时间通常取冲突窗口(争用期)的值 2r，即传输最小帧长 512bit 数据用时，叫作时槽。</p>\n</li>\n<li>\n<p>取 r, 0 ≤ r &lt; 2^k-1,重传的时延(退避时间)就是 r 倍的单位回退时间。</p>\n</li>\n<li>\n<p>K 为碰撞次数时。K=Min[重传次数，10]，当重传次数超过 10 时，K 就不在增大而是一直等于 10；当重传达 16 次仍不能成功时，则丢弃该帧，并向高层报告</p>\n</li>\n</ul>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVPP1b.png\" alt=\"20210930181153\" />\n</li>\n<li>\n<p>信道利用率</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GV4ggS.png\" alt=\"20210930191350\" />\n</li>\n<li>\n<p>帧发送/接收流程</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVPbu6.png\" alt=\"20210930191552\" />\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVL18C.png\" alt=\"20210930191636\" />\n</li>\n</ul>\n<hr>\n<h4 id=\"MAC-层协议\">MAC 层协议</h4>\n<blockquote>\n<ol>\n<li><a href=\"https://blog.csdn.net/t_home/article/details/90711643\">以太网 MAC 层基础知识学习</a></li>\n<li>小林 Coding - 图解网络</li>\n</ol>\n</blockquote>\n<ul>\n<li>\n<p>MAC (media access control) / (message authentication code)</p>\n<ul>\n<li>MAC 地址相同的设备只要不是同属一个数据链路就不会出现问题。同一网段下两设备都不能正常联网.</li>\n</ul>\n<blockquote>\n<p>I3E 注册管理结构 RA（Registration Authority）是局域网全球地址的法定管理机构[W-IEEERA]，负责分配前三个字节；前三个字节又称组织唯一标识符 OUI（Organizationally Unique Identifier），又称公司标识符（Company ID）[RFC 7042]。后三个字节由厂家自行指派称为扩展标识符（Extended Identifier）。总的一起叫做 EUI-48 扩展的唯一标识符（Extended Unique Identifier）。</p>\n</blockquote>\n<hr>\n</li>\n<li>\n<p>以太网 V2 的 MAC 帧格式(MAC 格式标准有两个，一个是 DIX Ethernet V2 标准，一个是 IEEE 的 802.3 标准)</p>\n<ul>\n<li>IEEE 802 标准中规定了一种 48 位的全球地址，此地址固化在适配器的 ROM 中（所以称为物理地址）。无线 LAN、蓝牙、以太网、FDDI、ATM 等设备都使用相同规格的 MAC 地址。</li>\n</ul>\n</li>\n<li>\n<p>MAC 地址字段</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVthY0.png\" alt=\"20210930194939\" />\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVAx90.png\" alt=\"20210930202539\" />\n<hr>\n</li>\n<li>\n<p>网络包至此(数据链路层)的图解</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GV4M7n.png\" alt=\"20210930204450\" />\n</li>\n</ul>\n<hr>\n<h3 id=\"网络层\">网络层</h3>\n<h4 id=\"路由选择协议\">路由选择协议</h4>\n<ul>\n<li>\n<p>动/静态路由选择</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GV4raC.png\" alt=\"20211022084950\" />\n</li>\n<li>\n<p>因特网<code>采用动态路由选择</code>,分层次自治</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVPc60.png\" alt=\"20211022085337\" />\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GV4u0E.png\" alt=\"20211022085557\" />\n</li>\n<li>\n<p>路由器基本结构</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GViD6S.png\" alt=\"20211022090722\" />\n</li>\n</ul>\n<h4 id=\"路由信息协议-RIP-的基本工作原理\">路由信息协议 RIP 的基本工作原理</h4>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVAFD6.png\" alt=\"20211022100415\" />\n<ul>\n<li>\n<p>RIP 会选择距离向量短的路由,而不管带宽 (距离相同的话使用负载均衡)</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVLHpn.png\" alt=\"20211022100624\" />\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVP7V1.png\" alt=\"20211022100656\" />\n</li>\n<li>\n<p>RIP 交换要点</p>\n<p>只和相邻路由器交换信息</p>\n<p>交换自己的路由表</p>\n<p>周期性交换 (比如 30s)</p>\n</li>\n<li>\n<p>举例: RIP 路由条目更新规则</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVA7lM.png\" alt=\"20211022115640\" />\n</li>\n<li>\n<p>坏消息传得慢/路由环路/距离无穷计数问题</p>\n<p>新更新的路由表被老版本覆盖,有几个措施可以<code>减少出现概率</code>或减小危害:</p>\n<ol>\n<li>\n<p>限制最大路径为 15</p>\n</li>\n<li>\n<p>路由表发生变化时立即发送更新报文 (触发更新)</p>\n</li>\n<li>\n<p>记录特定接口的路由信息,而不反向传递 (水平分割)</p>\n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h4 id=\"开放最短路径优先-OSPF-的基本工作原理\">开放最短路径优先 OSPF 的基本工作原理</h4>\n<ul>\n<li>\n<p>基本工作原理</p>\n<p>基于链路状态,使用最短路径优先,保证不会产生路由环路</p>\n<p>不限制网络规模,更新效率高,收敛速度快</p>\n<p>链路状态是指与哪些路由器相邻以及相应连路的代价 (费用/距离/时延/带宽等等)</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GV4yhY.png\" alt=\"20211022165456\" />\n</li>\n<li>\n<p>链路状态更新 &amp;&amp; 最短路径 SPF 计算</p>\n<p>每个路由器会产生链路状态通告(LSA),包含: 直连网络/邻居路由器得到链路状态</p>\n<p>LSA 封装在链路状态更新分组(LSU)中,采用洪泛法发送</p>\n<p>每个路由器通过链路状态数据库(LSDB)来接收 LSU 维护链路状态,各路由器 LSDB 最终一致</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVPeLC.png\" alt=\"20211022170324\" />\n</li>\n<li>\n<p>OSPF 工作过程 &amp;&amp; 五种数据分组</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVtuem.png\" alt=\"20211022170725\" />\n</li>\n<li>\n<p>邻居关系建立 &amp;&amp; 划分区域</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVPNyq.png\" alt=\"20211022174329\" />\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GV4Oh5.png\" alt=\"20211022174754\" />\n</li>\n</ul>\n<h4 id=\"边界网关协议-BGP\">边界网关协议 BGP</h4>\n<ul>\n<li>\n<p>路由选择</p>\n<p>不同自治系统内度量路由的代价可能是不同的,所以无法通过代价度量来寻找最佳路由</p>\n<p>自治系统间路由选择还需要考虑政治,经济,安全等因素</p>\n<p>BGP 力求找一条不兜圈子的较好的路由线路,而不是找最佳路由</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GV44vY.png\" alt=\"20211022232434\" />\n</li>\n<li>\n<p>举例: BGP 路径向量应用</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVL4XX.png\" alt=\"20211022232856\" />\n</li>\n<li>\n<p>BGP-4 的四种报文</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVLwiq.png\" alt=\"20211022233905\" />\n</li>\n<li>\n<p>直接封装 xx 报文的协议</p>\n<p>RIP -&gt; UDP</p>\n<p>OSPF -&gt; IP</p>\n<p>BGP -&gt; TCP</p>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"离散\">离散</h2>\n<h3 id=\"图\">图</h3>\n<ul>\n<li>\n<p>有向图-邻接矩阵存储</p>\n<img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GVL5Lr.png\" alt=\"20211028200201\" />\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"算法分析与设计\">算法分析与设计</h2>\n<h3 id=\"题目\">题目</h3>\n<h4 id=\"最大团-最大独立集\">最大团-最大独立集</h4>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GhJOD6.png\" alt=\"\"></p>\n<p>最大团: 顶点间都相连的最多顶点数 24567 或 45679</p>\n<p>最大独立集: 顶点间都不直接相连的最多顶点数 158 或 168</p>\n<hr>\n<h4 id=\"01-背包\">01-背包</h4>\n<p>5 个物品,1 个背包，背包容量为 10.</p>\n<p>价值：8,10,4,5,5</p>\n<p>重量：6,4,2,2,3</p>\n<p>求将该 5 个物品装入背包的最大价值<code>20</code>,以及 x[6]的向量值<code>（0,0,1,0,1,1）</code>(后 5 个空选择哪个对应的向量值为 1)</p>\n<hr>\n<h4 id=\"矩阵连乘\">矩阵连乘</h4>\n<ul>\n<li>\n<p><code>A1 A2 A3 A4 A5</code> 五个矩阵连乘,通过下图判断怎么加括号使运算最少</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GhJ6Iq.png\" alt=\"\"></p>\n</li>\n<li>\n<p>不看 0 那一斜线和 0 上面的一位,如下</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GhA3Yz.png\" alt=\"\"></p>\n<p>第三列: 在 A2 断开</p>\n<p>第四列: 在 A2 断开</p>\n<p>第五列: 在 A2 和 A4 断开</p>\n</li>\n<li>\n<p>A1 A2 | A3 A4 | A5</p>\n<p>每组括起来就是结果: <code>(A1 A2)(A3 A4)A5</code></p>\n</li>\n</ul>\n<hr>\n<h4 id=\"八皇后解法速记\">八皇后解法速记</h4>\n<p>17582463<br>\n24683175<br>\n31758246<br>\n42736851</p>\n<p>通过镜像操作可以得到对面四种解法: 1-&gt;8, 2-&gt;7, 3-&gt;6, 4-&gt;5</p>\n<hr>\n<h4 id=\"随机化算法\">随机化算法</h4>\n<ul>\n<li>\n<p>舍伍德算法</p>\n<p>去掉问题最坏解，使得求解的时候的复杂度趋向于平均</p>\n</li>\n<li>\n<p>拉斯维加斯算法：</p>\n<p>问题求解时随机决策</p>\n<p>随机找，找到了一定是正确的，但是不一定能在有限的时间内找到正确的解</p>\n</li>\n<li>\n<p>蒙特卡洛算法</p>\n<p>以高概率给出一个正确的解，但是不能判定是不是正确的</p>\n<p>【主元素】随机找出一个元素，看看它有没有出现了很多次，如果是，就返回 true，否则返回 false。<br>\n返回 true 一定能确定有主元素，但是返回 false 的时候不一定能确定没有主元素。</p>\n<p>【是否正确】<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>&lt;</mo><mi>p</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{2}&lt;p&lt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>,如果得到正确解的概率不小于 p，则称该蒙特卡洛算法是 p 正确的，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">p-\\frac{1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 是该算法的优势<br>\n【一致】如果对于同一个实例，算法不会给出两个正确的解答，那么称这个蒙特卡洛算法是一致的<br>\n【提高正确率】执行若干次，选择频次最高的<br>\n<sup id='cite_ref-2'><a href=\"#cite_note-2\">[2]</a></sup></p>\n</li>\n</ul>\n<hr>\n<h4 id=\"渐近阶高低\">渐近阶高低</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\nO(1) &lt; O(\\log{n})) &lt; O(n) &lt; O(n\\log{n}) &lt; O(n^2) &lt; O(n^3) &lt; O(n^k) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0991em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> <sup id='cite_ref-1'><a href=\"#cite_note-1\">[1]</a></sup></p>\n<hr>\n<h4 id=\"数论四大定理\">数论四大定理</h4>\n<p>威尔逊定理, 欧拉定理, 中国剩余定理, 费马小定理</p>\n<hr>\n<h4 id=\"棋盘覆盖问题\">棋盘覆盖问题</h4>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GhAJFm.png\" alt=\"\"></p>\n<ol>\n<li>根据黑的先画最中间绿色的</li>\n<li>根据绿色的画黄色的</li>\n<li>根据黄色画蓝色的</li>\n<li>可以确定答案了<br>\n<sup id='cite_ref-3'><a href=\"#cite_note-3\">[3]</a></sup></li>\n</ol>\n<hr>\n<h4 id=\"二分搜索\">二分搜索</h4>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">（<span class=\"number\">1</span>）给定从小到达已排好序的<span class=\"number\">2021</span>个整数，存放在数组<span class=\"selector-tag\">a</span><span class=\"selector-attr\">[2021]</span>中，执行以下BinarySearch()函数，需要查找的特定元素<span class=\"attribute\">x</span>。</span><br><span class=\"line\">问<span class=\"number\">1</span>：当<span class=\"attribute\">x</span> &gt; <span class=\"selector-tag\">a</span><span class=\"selector-attr\">[2020]</span>时，查找不到元素<span class=\"attribute\">x</span>时，比较了______ 次。</span><br><span class=\"line\">问<span class=\"number\">2</span>：当<span class=\"attribute\">x</span> &lt; <span class=\"selector-tag\">a</span><span class=\"selector-attr\">[0]</span>时，查找不到元素<span class=\"attribute\">x</span>时，比较了______ 次。</span><br><span class=\"line\"></span><br><span class=\"line\">（<span class=\"number\">2</span>）给定从小到达已排好序的<span class=\"number\">2048</span>个整数，存放在数组<span class=\"selector-tag\">a</span><span class=\"selector-attr\">[2048]</span>中，执行以下BinarySearch()函数，需要查找的特定元素<span class=\"attribute\">x</span>。</span><br><span class=\"line\">问<span class=\"number\">3</span>：当<span class=\"attribute\">x</span> &gt; <span class=\"selector-tag\">a</span><span class=\"selector-attr\">[2047]</span>时，查找不到元素<span class=\"attribute\">x</span>时，比较了______ 次。</span><br><span class=\"line\">问<span class=\"number\">4</span>：当<span class=\"attribute\">x</span> &lt; <span class=\"selector-tag\">a</span><span class=\"selector-attr\">[0]</span>时，查找不到元素<span class=\"attribute\">x</span>时，比较了______ 次。</span><br></pre></td></tr></table></figure>\n<p>11 10 12 11</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>2020</mn><mo stretchy=\"false\">]</mo><mo>&lt;</mo><msup><mn>2</mn><mn>11</mn></msup></mrow><annotation encoding=\"application/x-tex\">[0,2020] &lt; 2^{11}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2020</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">11</span></span></span></span></span></span></span></span></span></span></span></span> -&gt; k1=11 k2=11-1</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>11</mn></msup><mo>&lt;</mo><mo>=</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>4047</mn><mo stretchy=\"false\">]</mo><mo>&lt;</mo><msup><mn>2</mn><mn>12</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{11} &lt;= [0,4047] &lt; 2^{12}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8532em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">11</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4047</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">12</span></span></span></span></span></span></span></span></span></span></span></span> -&gt; k3=12 k4=12-1</p>\n<hr>\n<h4 id=\"斐波那契\">斐波那契</h4>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GhA2nS.png\" alt=\"\"></p>\n<p>F()执行 15 次, f(1) 3 次</p>\n<hr>\n<h4 id=\"最长公共子序列\">最长公共子序列</h4>\n<ul>\n<li>\n<p>填写 C 表和 B 表 (不知道还有什么学校教这种老套,反正是考点没的办法了…)</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GhA8wn.png\" alt=\"\"></p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GhAKhR.png\" alt=\"\"></p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/GhAkWA.png\" alt=\"\"></p>\n</li>\n<li>\n<p>思路</p>\n<p>C/B 表同时写不要分开先后写,只不过 B 表要根据 C 表写</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// c[行][列]  b[行][列]</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先判断行列字符是否一样,相同的话</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x[i] == y[j]) &#123;</span><br><span class=\"line\">      c[i][j] = c[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + <span class=\"number\">1</span>; <span class=\"comment\">//   c[i][j]=C表左上角+1</span></span><br><span class=\"line\">      b[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果行列字符不一样,判断C表上面一格是否&gt;=左边,如果true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c[i - <span class=\"number\">1</span>][j] &gt;= c[i][j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      c[i][j] = c[i - <span class=\"number\">1</span>][j]; <span class=\"comment\">//           c[i][j]=C表上面一格</span></span><br><span class=\"line\">      b[i][j] = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果行列字符不一样,判断C表上面一格是否&gt;=左边,如果false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      c[i][j] = c[i][j - <span class=\"number\">1</span>]; <span class=\"comment\">//           c[i][j]=C表左边一格</span></span><br><span class=\"line\">      b[i][j] = <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"人工智能\">人工智能</h2>\n<blockquote>\n<p><a href=\"../AI\">🐊 人工智能笔记</a></p>\n</blockquote>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"零散的\">零散的</h2>\n<h3 id=\"河工大-UML\">河工大-UML</h3>\n<p>这是河北工业大学-刘洪普老师的 UML 课程截图记录</p>\n<p>讲的领域很广, 互联网领域架构, 计算机底层交互/操作系统设计, AI 领域, 并行计算…etc, <code>i了i了</code></p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/R1Uw16.jpg\" alt=\"\"></p>\n<p>并发程序: 指的是具有并行处理能力的程序(多线程/协程), 当遇到单核 U 或者环境不适合时会变为顺序执行的程序</p>\n<p>同一机子内多个进程可以通过操作系统来完成进程间通信, Socket 实现的是不同机子之间通过网络来进行进程间的通信</p>\n<blockquote>\n<p>关于分布式并行计算, 这里引 Linus 说的: <br>\n放弃吧。“并行就是未来”的说法就是一片浮云。 <sup id='cite_ref-4'><a href=\"#cite_note-4\">[4]</a></sup></p>\n</blockquote>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/R1Ujyo.jpg\" alt=\"\"></p>\n<ul>\n<li>\n<p>显卡: 3d 计算加速卡,图形处理需要做大量线性代数向量运算(3 维模型的坐标转换和投影), 取决于向量运算的数学性质, 其可以通过并行运算来加速处理,区别如下:</p>\n<p>CPU 的这种逻辑运算可以通过分支预测来加速,但是必须顺序执行 (这也就限制了一些程序吃不到多核性能, 两核 3G 打不过一核 5G 的)</p>\n<p>GPU 的运算独立, 简单看来核心越多算的越快,这种计算方式叫<code>向量化计算</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CPU</span></span><br><span class=\"line\"><span class=\"attr\">C</span> = A + B</span><br><span class=\"line\"><span class=\"attr\">B</span> = A + C</span><br><span class=\"line\"><span class=\"attr\">A</span> = B + C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># GPU</span></span><br><span class=\"line\"><span class=\"attr\">A1</span> = B1 + C1</span><br><span class=\"line\"><span class=\"attr\">A2</span> = B2 + C2</span><br><span class=\"line\"><span class=\"attr\">A3</span> = B3 + C3</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>CPU 核心少而且更适合做逻辑运算, 把向量运算能力加进 CPU (也就是如今的 TPU) 并不是很合适, 所以独立出来了显卡 (一般核心数量上千,高出 CPU 两个量级)</p>\n<p><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/blog/R1gRMt.jpg\" alt=\"\"></p>\n<p>深度学习就是要做大量的线性计算和非线性计算(最终也是通过数学转化为线性计算), 所以炼丹也是吃显卡</p>\n<p><a><img src= \"https://pan.weidows.tech/d/local/img/loading.svg\" data-lazy-src=\"https://pan.weidows.tech/d/local/img/divider.png\" alt=\"分割线\"></a></p>\n<h2 id=\"借物表\">借物表</h2>\n<p><a name='cite_note-1' href='#cite_ref-1'>[1]</a>: <a href=\"https://www.nowcoder.com/questionTerminal/7401d66e14e84279ba278ce04e735deb?page=1&amp;onlyReference=false\">https://www.nowcoder.com/questionTerminal/7401d66e14e84279ba278ce04e735deb?page=1&amp;onlyReference=false</a></p>\n<p><a name='cite_note-2' href='#cite_ref-2'>[2]</a>: <a href=\"https://www.geek-share.com/detail/2771384952.html\">随机化算法-舍伍德算法&amp;拉斯维加斯算法&amp;蒙特卡洛算法</a></p>\n<p><a name='cite_note-3' href='#cite_ref-3'>[3]</a>: <a href=\"https://blog.csdn.net/qq_30268545/article/details/80600064\">棋盘覆盖问题-分治法</a></p>\n<p><a name='cite_note-4' href='#cite_ref-4'>[4]</a>: <a href=\"https://www.dell.com/community/%E7%BB%BC%E5%90%88%E8%AE%A8%E8%AE%BA%E5%8C%BA/Linux%E4%B9%8B%E7%88%B6Linus%E8%AF%B4-%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97%E5%9F%BA%E6%9C%AC%E4%B8%8A%E5%B0%B1%E6%98%AF%E6%B5%AA%E8%B4%B9%E5%A4%A7%E5%AE%B6%E7%9A%84%E6%97%B6%E9%97%B4/td-p/7047422\">Linux 之父 Linus 说：并行计算基本上就是浪费大家的时间</a></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "备忘录",
                "算法",
                "笔记",
                "操作系统",
                "计网",
                "硬件",
                "OneNote",
                "复变函数",
                "人工智能"
            ]
        }
    ]
}